
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004e4c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000200  00800060  00004e4c  00004ee0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800260  00800260  000050e0  2**0
                  ALLOC
  3 .stab         00004ec0  00000000  00000000  000050e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001673  00000000  00000000  00009fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000b613  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  0000b793  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  0000b966  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  0000d975  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  0000eae5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000fae8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  0000fc88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0000ff49  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000107f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 ad 09 	jmp	0x135a	; 0x135a <__vector_1>
       8:	0c 94 e0 09 	jmp	0x13c0	; 0x13c0 <__vector_2>
       c:	0c 94 13 0a 	jmp	0x1426	; 0x1426 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 a0 06 	jmp	0xd40	; 0xd40 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e4       	ldi	r30, 0x4C	; 76
      68:	fe e4       	ldi	r31, 0x4E	; 78
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 36       	cpi	r26, 0x60	; 96
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a0 e6       	ldi	r26, 0x60	; 96
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 36       	cpi	r26, 0x6F	; 111
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <main>
      8a:	0c 94 24 27 	jmp	0x4e48	; 0x4e48 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ed 26 	jmp	0x4dda	; 0x4dda <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e3       	ldi	r26, 0x3F	; 63
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 09 27 	jmp	0x4e12	; 0x4e12 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f9 26 	jmp	0x4df2	; 0x4df2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 15 27 	jmp	0x4e2a	; 0x4e2a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f9 26 	jmp	0x4df2	; 0x4df2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 15 27 	jmp	0x4e2a	; 0x4e2a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ed 26 	jmp	0x4dda	; 0x4dda <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e3       	ldi	r24, 0x3F	; 63
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 09 27 	jmp	0x4e12	; 0x4e12 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f9 26 	jmp	0x4df2	; 0x4df2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 15 27 	jmp	0x4e2a	; 0x4e2a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 f9 26 	jmp	0x4df2	; 0x4df2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 15 27 	jmp	0x4e2a	; 0x4e2a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 f9 26 	jmp	0x4df2	; 0x4df2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 15 27 	jmp	0x4e2a	; 0x4e2a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 fd 26 	jmp	0x4dfa	; 0x4dfa <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 19 27 	jmp	0x4e32	; 0x4e32 <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 f5 26 	jmp	0x4dea	; 0x4dea <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 11 27 	jmp	0x4e22	; 0x4e22 <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	e9 5b       	subi	r30, 0xB9	; 185
     972:	fe 4f       	sbci	r31, 0xFE	; 254
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <TIMER0_INT>:

/*Global Pointer to Function*/

static void (*PF_Timer0)(void) = 0;
void TIMER0_INT(void)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
	/* Select Normal Mode */
	CLR_BIT(TCCR0_REG,3);
     cde:	a3 e5       	ldi	r26, 0x53	; 83
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e3 e5       	ldi	r30, 0x53	; 83
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	87 7f       	andi	r24, 0xF7	; 247
     cea:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,6);
     cec:	a3 e5       	ldi	r26, 0x53	; 83
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e3 e5       	ldi	r30, 0x53	; 83
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	8f 7b       	andi	r24, 0xBF	; 191
     cf8:	8c 93       	st	X, r24
	//SET_BIT(SREG_REG,7);
	
	
	
	/*Enable Overflow Interrupt */
	SET_BIT(TIMSK_REG,0);
     cfa:	a9 e5       	ldi	r26, 0x59	; 89
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e9 e5       	ldi	r30, 0x59	; 89
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	81 60       	ori	r24, 0x01	; 1
     d06:	8c 93       	st	X, r24
	
	/*Select Prescaller Value*/
	TCNT0_REG = 192;
     d08:	e2 e5       	ldi	r30, 0x52	; 82
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 ec       	ldi	r24, 0xC0	; 192
     d0e:	80 83       	st	Z, r24
	
	
	
	/*Select Prescaller-> 8 */
	CLR_BIT(TCCR0_REG,0);
     d10:	a3 e5       	ldi	r26, 0x53	; 83
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	e3 e5       	ldi	r30, 0x53	; 83
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	8e 7f       	andi	r24, 0xFE	; 254
     d1c:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG,1);
     d1e:	a3 e5       	ldi	r26, 0x53	; 83
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	e3 e5       	ldi	r30, 0x53	; 83
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	82 60       	ori	r24, 0x02	; 2
     d2a:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,2);
     d2c:	a3 e5       	ldi	r26, 0x53	; 83
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	e3 e5       	ldi	r30, 0x53	; 83
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	8b 7f       	andi	r24, 0xFB	; 251
     d38:	8c 93       	st	X, r24
	
	
}
     d3a:	cf 91       	pop	r28
     d3c:	df 91       	pop	r29
     d3e:	08 95       	ret

00000d40 <__vector_11>:

/*Prototupe for ISR of Timer0 OVF*/

void __vector_11(void)__attribute__((signal));
void __vector_11(void)
{
     d40:	1f 92       	push	r1
     d42:	0f 92       	push	r0
     d44:	0f b6       	in	r0, 0x3f	; 63
     d46:	0f 92       	push	r0
     d48:	11 24       	eor	r1, r1
     d4a:	2f 93       	push	r18
     d4c:	3f 93       	push	r19
     d4e:	4f 93       	push	r20
     d50:	5f 93       	push	r21
     d52:	6f 93       	push	r22
     d54:	7f 93       	push	r23
     d56:	8f 93       	push	r24
     d58:	9f 93       	push	r25
     d5a:	af 93       	push	r26
     d5c:	bf 93       	push	r27
     d5e:	ef 93       	push	r30
     d60:	ff 93       	push	r31
     d62:	df 93       	push	r29
     d64:	cf 93       	push	r28
     d66:	cd b7       	in	r28, 0x3d	; 61
     d68:	de b7       	in	r29, 0x3e	; 62
	
	static u16 counter =0;
	counter++;
     d6a:	80 91 62 02 	lds	r24, 0x0262
     d6e:	90 91 63 02 	lds	r25, 0x0263
     d72:	01 96       	adiw	r24, 0x01	; 1
     d74:	90 93 63 02 	sts	0x0263, r25
     d78:	80 93 62 02 	sts	0x0262, r24
	if(counter==3907)
     d7c:	80 91 62 02 	lds	r24, 0x0262
     d80:	90 91 63 02 	lds	r25, 0x0263
     d84:	2f e0       	ldi	r18, 0x0F	; 15
     d86:	83 34       	cpi	r24, 0x43	; 67
     d88:	92 07       	cpc	r25, r18
     d8a:	99 f4       	brne	.+38     	; 0xdb2 <__vector_11+0x72>
	{
		/* preload Value */
		TCNT0_REG = 192;
     d8c:	e2 e5       	ldi	r30, 0x52	; 82
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 ec       	ldi	r24, 0xC0	; 192
     d92:	80 83       	st	Z, r24
		counter =0;
     d94:	10 92 63 02 	sts	0x0263, r1
     d98:	10 92 62 02 	sts	0x0262, r1
		if(PF_Timer0!=0)
     d9c:	80 91 60 02 	lds	r24, 0x0260
     da0:	90 91 61 02 	lds	r25, 0x0261
     da4:	00 97       	sbiw	r24, 0x00	; 0
     da6:	29 f0       	breq	.+10     	; 0xdb2 <__vector_11+0x72>
		{
			PF_Timer0();
     da8:	e0 91 60 02 	lds	r30, 0x0260
     dac:	f0 91 61 02 	lds	r31, 0x0261
     db0:	09 95       	icall
		}
		
	}
}
     db2:	cf 91       	pop	r28
     db4:	df 91       	pop	r29
     db6:	ff 91       	pop	r31
     db8:	ef 91       	pop	r30
     dba:	bf 91       	pop	r27
     dbc:	af 91       	pop	r26
     dbe:	9f 91       	pop	r25
     dc0:	8f 91       	pop	r24
     dc2:	7f 91       	pop	r23
     dc4:	6f 91       	pop	r22
     dc6:	5f 91       	pop	r21
     dc8:	4f 91       	pop	r20
     dca:	3f 91       	pop	r19
     dcc:	2f 91       	pop	r18
     dce:	0f 90       	pop	r0
     dd0:	0f be       	out	0x3f, r0	; 63
     dd2:	0f 90       	pop	r0
     dd4:	1f 90       	pop	r1
     dd6:	18 95       	reti

00000dd8 <Timer0_SetCallBack>:


u8 Timer0_SetCallBack(void(*Lpf)(void),u8 index)
{
     dd8:	df 93       	push	r29
     dda:	cf 93       	push	r28
     ddc:	00 d0       	rcall	.+0      	; 0xdde <Timer0_SetCallBack+0x6>
     dde:	00 d0       	rcall	.+0      	; 0xde0 <Timer0_SetCallBack+0x8>
     de0:	cd b7       	in	r28, 0x3d	; 61
     de2:	de b7       	in	r29, 0x3e	; 62
     de4:	9b 83       	std	Y+3, r25	; 0x03
     de6:	8a 83       	std	Y+2, r24	; 0x02
     de8:	6c 83       	std	Y+4, r22	; 0x04
	u8 ErrorState = 1;
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	89 83       	std	Y+1, r24	; 0x01
	if(Lpf!=0)
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	9b 81       	ldd	r25, Y+3	; 0x03
     df2:	00 97       	sbiw	r24, 0x00	; 0
     df4:	39 f0       	breq	.+14     	; 0xe04 <Timer0_SetCallBack+0x2c>
	{
		PF_Timer0=Lpf;
     df6:	8a 81       	ldd	r24, Y+2	; 0x02
     df8:	9b 81       	ldd	r25, Y+3	; 0x03
     dfa:	90 93 61 02 	sts	0x0261, r25
     dfe:	80 93 60 02 	sts	0x0260, r24
     e02:	01 c0       	rjmp	.+2      	; 0xe06 <Timer0_SetCallBack+0x2e>
	}
	else
	{
		ErrorState = 0;
     e04:	19 82       	std	Y+1, r1	; 0x01
	}
	return ErrorState;
     e06:	89 81       	ldd	r24, Y+1	; 0x01
}
     e08:	0f 90       	pop	r0
     e0a:	0f 90       	pop	r0
     e0c:	0f 90       	pop	r0
     e0e:	0f 90       	pop	r0
     e10:	cf 91       	pop	r28
     e12:	df 91       	pop	r29
     e14:	08 95       	ret

00000e16 <TIMER1_INT>:

void TIMER1_INT(void)
{
     e16:	df 93       	push	r29
     e18:	cf 93       	push	r28
     e1a:	cd b7       	in	r28, 0x3d	; 61
     e1c:	de b7       	in	r29, 0x3e	; 62
	/* Select TIMER1 MODE ==> 14 */
	CLR_BIT(TCCR1A_REG,0);
     e1e:	af e4       	ldi	r26, 0x4F	; 79
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	ef e4       	ldi	r30, 0x4F	; 79
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	8e 7f       	andi	r24, 0xFE	; 254
     e2a:	8c 93       	st	X, r24
	SET_BIT(TCCR1A_REG,1);
     e2c:	af e4       	ldi	r26, 0x4F	; 79
     e2e:	b0 e0       	ldi	r27, 0x00	; 0
     e30:	ef e4       	ldi	r30, 0x4F	; 79
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 81       	ld	r24, Z
     e36:	82 60       	ori	r24, 0x02	; 2
     e38:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG,3);
     e3a:	ae e4       	ldi	r26, 0x4E	; 78
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	ee e4       	ldi	r30, 0x4E	; 78
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	88 60       	ori	r24, 0x08	; 8
     e46:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG,4);
     e48:	ae e4       	ldi	r26, 0x4E	; 78
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	ee e4       	ldi	r30, 0x4E	; 78
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	80 61       	ori	r24, 0x10	; 16
     e54:	8c 93       	st	X, r24
	
	
	/* Select HW Action on OC1A pin==< Non Inverting */
	CLR_BIT(TCCR1A_REG,6);
     e56:	af e4       	ldi	r26, 0x4F	; 79
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	ef e4       	ldi	r30, 0x4F	; 79
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	8f 7b       	andi	r24, 0xBF	; 191
     e62:	8c 93       	st	X, r24
	SET_BIT(TCCR1A_REG,7);
     e64:	af e4       	ldi	r26, 0x4F	; 79
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	ef e4       	ldi	r30, 0x4F	; 79
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	80 68       	ori	r24, 0x80	; 128
     e70:	8c 93       	st	X, r24
	
	/* Set Top Value in ICR1 */
	ICR1_REG = 19999;
     e72:	e6 e4       	ldi	r30, 0x46	; 70
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	8f e1       	ldi	r24, 0x1F	; 31
     e78:	9e e4       	ldi	r25, 0x4E	; 78
     e7a:	91 83       	std	Z+1, r25	; 0x01
     e7c:	80 83       	st	Z, r24
 
	/* Set Angle of Servo Motor */
	 OCR1A_REG= 1999; // to produce period time = 20 mSec (desired time/tick time)
     e7e:	ea e4       	ldi	r30, 0x4A	; 74
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	8f ec       	ldi	r24, 0xCF	; 207
     e84:	97 e0       	ldi	r25, 0x07	; 7
     e86:	91 83       	std	Z+1, r25	; 0x01
     e88:	80 83       	st	Z, r24
	
	/*Select Prescaller-> 8 */
	CLR_BIT(TCCR1B_REG,0);
     e8a:	ae e4       	ldi	r26, 0x4E	; 78
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	ee e4       	ldi	r30, 0x4E	; 78
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	8e 7f       	andi	r24, 0xFE	; 254
     e96:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG,1);
     e98:	ae e4       	ldi	r26, 0x4E	; 78
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	ee e4       	ldi	r30, 0x4E	; 78
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	82 60       	ori	r24, 0x02	; 2
     ea4:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B_REG,2);
     ea6:	ae e4       	ldi	r26, 0x4E	; 78
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	ee e4       	ldi	r30, 0x4E	; 78
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	8b 7f       	andi	r24, 0xFB	; 251
     eb2:	8c 93       	st	X, r24
}
     eb4:	cf 91       	pop	r28
     eb6:	df 91       	pop	r29
     eb8:	08 95       	ret

00000eba <Timer1SetAngle_A>:
void Timer1SetAngle_A(u16 OCRA)
{
     eba:	df 93       	push	r29
     ebc:	cf 93       	push	r28
     ebe:	00 d0       	rcall	.+0      	; 0xec0 <Timer1SetAngle_A+0x6>
     ec0:	00 d0       	rcall	.+0      	; 0xec2 <Timer1SetAngle_A+0x8>
     ec2:	cd b7       	in	r28, 0x3d	; 61
     ec4:	de b7       	in	r29, 0x3e	; 62
     ec6:	9c 83       	std	Y+4, r25	; 0x04
     ec8:	8b 83       	std	Y+3, r24	; 0x03
	u16 Angle = (5.6 * OCRA) + 999;
     eca:	8b 81       	ldd	r24, Y+3	; 0x03
     ecc:	9c 81       	ldd	r25, Y+4	; 0x04
     ece:	cc 01       	movw	r24, r24
     ed0:	a0 e0       	ldi	r26, 0x00	; 0
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	bc 01       	movw	r22, r24
     ed6:	cd 01       	movw	r24, r26
     ed8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
     edc:	dc 01       	movw	r26, r24
     ede:	cb 01       	movw	r24, r22
     ee0:	bc 01       	movw	r22, r24
     ee2:	cd 01       	movw	r24, r26
     ee4:	23 e3       	ldi	r18, 0x33	; 51
     ee6:	33 e3       	ldi	r19, 0x33	; 51
     ee8:	43 eb       	ldi	r20, 0xB3	; 179
     eea:	50 e4       	ldi	r21, 0x40	; 64
     eec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ef0:	dc 01       	movw	r26, r24
     ef2:	cb 01       	movw	r24, r22
     ef4:	bc 01       	movw	r22, r24
     ef6:	cd 01       	movw	r24, r26
     ef8:	20 e0       	ldi	r18, 0x00	; 0
     efa:	30 ec       	ldi	r19, 0xC0	; 192
     efc:	49 e7       	ldi	r20, 0x79	; 121
     efe:	54 e4       	ldi	r21, 0x44	; 68
     f00:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
     f04:	dc 01       	movw	r26, r24
     f06:	cb 01       	movw	r24, r22
     f08:	bc 01       	movw	r22, r24
     f0a:	cd 01       	movw	r24, r26
     f0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f10:	dc 01       	movw	r26, r24
     f12:	cb 01       	movw	r24, r22
     f14:	9a 83       	std	Y+2, r25	; 0x02
     f16:	89 83       	std	Y+1, r24	; 0x01
	OCR1A_REG = Angle;
     f18:	ea e4       	ldi	r30, 0x4A	; 74
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	89 81       	ldd	r24, Y+1	; 0x01
     f1e:	9a 81       	ldd	r25, Y+2	; 0x02
     f20:	91 83       	std	Z+1, r25	; 0x01
     f22:	80 83       	st	Z, r24
}
     f24:	0f 90       	pop	r0
     f26:	0f 90       	pop	r0
     f28:	0f 90       	pop	r0
     f2a:	0f 90       	pop	r0
     f2c:	cf 91       	pop	r28
     f2e:	df 91       	pop	r29
     f30:	08 95       	ret

00000f32 <PWM_INIT_FAST>:
#include "PWM_CONFIG.h"
#include "PWM_PRIVATE.h"
#include "PWM_INTERFACE.h"

void PWM_INIT_FAST(void)
{
     f32:	df 93       	push	r29
     f34:	cf 93       	push	r28
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
	/* SELECT FAST PWM MODE */
	SET_BIT(TCCR0_REG,6);
     f3a:	a3 e5       	ldi	r26, 0x53	; 83
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	e3 e5       	ldi	r30, 0x53	; 83
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	80 64       	ori	r24, 0x40	; 64
     f46:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG,3);
     f48:	a3 e5       	ldi	r26, 0x53	; 83
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	e3 e5       	ldi	r30, 0x53	; 83
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	88 60       	ori	r24, 0x08	; 8
     f54:	8c 93       	st	X, r24
	
	
	/* NON-INVERTING */
	CLR_BIT(TCCR0_REG,4);
     f56:	a3 e5       	ldi	r26, 0x53	; 83
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	e3 e5       	ldi	r30, 0x53	; 83
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	8f 7e       	andi	r24, 0xEF	; 239
     f62:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG,5);
     f64:	a3 e5       	ldi	r26, 0x53	; 83
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	e3 e5       	ldi	r30, 0x53	; 83
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	80 62       	ori	r24, 0x20	; 32
     f70:	8c 93       	st	X, r24
	
	
	/*Select Prescaller-> 8 */
	CLR_BIT(TCCR0_REG,0);
     f72:	a3 e5       	ldi	r26, 0x53	; 83
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	e3 e5       	ldi	r30, 0x53	; 83
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	8e 7f       	andi	r24, 0xFE	; 254
     f7e:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG,1);
     f80:	a3 e5       	ldi	r26, 0x53	; 83
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	e3 e5       	ldi	r30, 0x53	; 83
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	82 60       	ori	r24, 0x02	; 2
     f8c:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,2);
     f8e:	a3 e5       	ldi	r26, 0x53	; 83
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	e3 e5       	ldi	r30, 0x53	; 83
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	8b 7f       	andi	r24, 0xFB	; 251
     f9a:	8c 93       	st	X, r24
	
}
     f9c:	cf 91       	pop	r28
     f9e:	df 91       	pop	r29
     fa0:	08 95       	ret

00000fa2 <PWM_INIT_PHASE_CORRECT>:

void PWM_INIT_PHASE_CORRECT(void)
{
     fa2:	df 93       	push	r29
     fa4:	cf 93       	push	r28
     fa6:	cd b7       	in	r28, 0x3d	; 61
     fa8:	de b7       	in	r29, 0x3e	; 62
	/* SELECT FAST PWM MODE */
	SET_BIT(TCCR0_REG,6);
     faa:	a3 e5       	ldi	r26, 0x53	; 83
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	e3 e5       	ldi	r30, 0x53	; 83
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	80 64       	ori	r24, 0x40	; 64
     fb6:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,3);
     fb8:	a3 e5       	ldi	r26, 0x53	; 83
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	e3 e5       	ldi	r30, 0x53	; 83
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	87 7f       	andi	r24, 0xF7	; 247
     fc4:	8c 93       	st	X, r24


	/* NON-INVERTING */
	CLR_BIT(TCCR0_REG,4);
     fc6:	a3 e5       	ldi	r26, 0x53	; 83
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	e3 e5       	ldi	r30, 0x53	; 83
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	8f 7e       	andi	r24, 0xEF	; 239
     fd2:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG,5);
     fd4:	a3 e5       	ldi	r26, 0x53	; 83
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	e3 e5       	ldi	r30, 0x53	; 83
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	80 62       	ori	r24, 0x20	; 32
     fe0:	8c 93       	st	X, r24


	/*Select Prescaller-> 8 */
	CLR_BIT(TCCR0_REG,0);
     fe2:	a3 e5       	ldi	r26, 0x53	; 83
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	e3 e5       	ldi	r30, 0x53	; 83
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	8e 7f       	andi	r24, 0xFE	; 254
     fee:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG,1);
     ff0:	a3 e5       	ldi	r26, 0x53	; 83
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	e3 e5       	ldi	r30, 0x53	; 83
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	82 60       	ori	r24, 0x02	; 2
     ffc:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,2);
     ffe:	a3 e5       	ldi	r26, 0x53	; 83
    1000:	b0 e0       	ldi	r27, 0x00	; 0
    1002:	e3 e5       	ldi	r30, 0x53	; 83
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	8b 7f       	andi	r24, 0xFB	; 251
    100a:	8c 93       	st	X, r24

}
    100c:	cf 91       	pop	r28
    100e:	df 91       	pop	r29
    1010:	08 95       	ret

00001012 <PWM_CTC_VALUE>:

void PWM_CTC_VALUE(u8 Value)
{
    1012:	df 93       	push	r29
    1014:	cf 93       	push	r28
    1016:	0f 92       	push	r0
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62
    101c:	89 83       	std	Y+1, r24	; 0x01
	OCR0_REG = Value;
    101e:	ec e5       	ldi	r30, 0x5C	; 92
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	89 81       	ldd	r24, Y+1	; 0x01
    1024:	80 83       	st	Z, r24
}
    1026:	0f 90       	pop	r0
    1028:	cf 91       	pop	r28
    102a:	df 91       	pop	r29
    102c:	08 95       	ret

0000102e <GI_Enable>:
#include "GI_INTERFACE.h"

#define SREG_REG  	*(( volatile u8*)0x5F)

void GI_Enable(void)
{
    102e:	df 93       	push	r29
    1030:	cf 93       	push	r28
    1032:	cd b7       	in	r28, 0x3d	; 61
    1034:	de b7       	in	r29, 0x3e	; 62
		SET_BIT(SREG_REG,7);
    1036:	af e5       	ldi	r26, 0x5F	; 95
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	ef e5       	ldi	r30, 0x5F	; 95
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	80 68       	ori	r24, 0x80	; 128
    1042:	8c 93       	st	X, r24
}
    1044:	cf 91       	pop	r28
    1046:	df 91       	pop	r29
    1048:	08 95       	ret

0000104a <GI_DisEnable>:

void GI_DisEnable(void)
{
    104a:	df 93       	push	r29
    104c:	cf 93       	push	r28
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
		CLR_BIT(SREG_REG,7);
    1052:	af e5       	ldi	r26, 0x5F	; 95
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	ef e5       	ldi	r30, 0x5F	; 95
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	8f 77       	andi	r24, 0x7F	; 127
    105e:	8c 93       	st	X, r24
}
    1060:	cf 91       	pop	r28
    1062:	df 91       	pop	r29
    1064:	08 95       	ret

00001066 <ExtEnable>:
 /* Array Of Global pointer to function */
 void(*EXT[3])(void) = {0,0,0};


u8 ExtEnable(u8 ExtIndex,u8 EdgeSense)
{
    1066:	df 93       	push	r29
    1068:	cf 93       	push	r28
    106a:	cd b7       	in	r28, 0x3d	; 61
    106c:	de b7       	in	r29, 0x3e	; 62
    106e:	2b 97       	sbiw	r28, 0x0b	; 11
    1070:	0f b6       	in	r0, 0x3f	; 63
    1072:	f8 94       	cli
    1074:	de bf       	out	0x3e, r29	; 62
    1076:	0f be       	out	0x3f, r0	; 63
    1078:	cd bf       	out	0x3d, r28	; 61
    107a:	8a 83       	std	Y+2, r24	; 0x02
    107c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_ErrorState = 1;
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	89 83       	std	Y+1, r24	; 0x01
	switch(ExtIndex)
    1082:	8a 81       	ldd	r24, Y+2	; 0x02
    1084:	28 2f       	mov	r18, r24
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	3b 87       	std	Y+11, r19	; 0x0b
    108a:	2a 87       	std	Y+10, r18	; 0x0a
    108c:	8a 85       	ldd	r24, Y+10	; 0x0a
    108e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1090:	81 30       	cpi	r24, 0x01	; 1
    1092:	91 05       	cpc	r25, r1
    1094:	09 f4       	brne	.+2      	; 0x1098 <ExtEnable+0x32>
    1096:	85 c0       	rjmp	.+266    	; 0x11a2 <ExtEnable+0x13c>
    1098:	2a 85       	ldd	r18, Y+10	; 0x0a
    109a:	3b 85       	ldd	r19, Y+11	; 0x0b
    109c:	22 30       	cpi	r18, 0x02	; 2
    109e:	31 05       	cpc	r19, r1
    10a0:	09 f4       	brne	.+2      	; 0x10a4 <ExtEnable+0x3e>
    10a2:	f9 c0       	rjmp	.+498    	; 0x1296 <ExtEnable+0x230>
    10a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    10a6:	9b 85       	ldd	r25, Y+11	; 0x0b
    10a8:	00 97       	sbiw	r24, 0x00	; 0
    10aa:	09 f0       	breq	.+2      	; 0x10ae <ExtEnable+0x48>
    10ac:	23 c1       	rjmp	.+582    	; 0x12f4 <ExtEnable+0x28e>
	{
	case EXT_INT0:
	switch(EdgeSense)
    10ae:	8b 81       	ldd	r24, Y+3	; 0x03
    10b0:	28 2f       	mov	r18, r24
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	39 87       	std	Y+9, r19	; 0x09
    10b6:	28 87       	std	Y+8, r18	; 0x08
    10b8:	88 85       	ldd	r24, Y+8	; 0x08
    10ba:	99 85       	ldd	r25, Y+9	; 0x09
    10bc:	81 30       	cpi	r24, 0x01	; 1
    10be:	91 05       	cpc	r25, r1
    10c0:	61 f1       	breq	.+88     	; 0x111a <ExtEnable+0xb4>
    10c2:	28 85       	ldd	r18, Y+8	; 0x08
    10c4:	39 85       	ldd	r19, Y+9	; 0x09
    10c6:	22 30       	cpi	r18, 0x02	; 2
    10c8:	31 05       	cpc	r19, r1
    10ca:	2c f4       	brge	.+10     	; 0x10d6 <ExtEnable+0x70>
    10cc:	88 85       	ldd	r24, Y+8	; 0x08
    10ce:	99 85       	ldd	r25, Y+9	; 0x09
    10d0:	00 97       	sbiw	r24, 0x00	; 0
    10d2:	69 f0       	breq	.+26     	; 0x10ee <ExtEnable+0x88>
    10d4:	64 c0       	rjmp	.+200    	; 0x119e <ExtEnable+0x138>
    10d6:	28 85       	ldd	r18, Y+8	; 0x08
    10d8:	39 85       	ldd	r19, Y+9	; 0x09
    10da:	22 30       	cpi	r18, 0x02	; 2
    10dc:	31 05       	cpc	r19, r1
    10de:	09 f4       	brne	.+2      	; 0x10e2 <ExtEnable+0x7c>
    10e0:	48 c0       	rjmp	.+144    	; 0x1172 <ExtEnable+0x10c>
    10e2:	88 85       	ldd	r24, Y+8	; 0x08
    10e4:	99 85       	ldd	r25, Y+9	; 0x09
    10e6:	83 30       	cpi	r24, 0x03	; 3
    10e8:	91 05       	cpc	r25, r1
    10ea:	69 f1       	breq	.+90     	; 0x1146 <ExtEnable+0xe0>
    10ec:	58 c0       	rjmp	.+176    	; 0x119e <ExtEnable+0x138>
	{
		case EXT_RAISING_EDGE:
		SET_BIT(MCUCR,MCUCR_ISC00);
    10ee:	a5 e5       	ldi	r26, 0x55	; 85
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	e5 e5       	ldi	r30, 0x55	; 85
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	81 60       	ori	r24, 0x01	; 1
    10fa:	8c 93       	st	X, r24
		SET_BIT(MCUCR,MCUCR_ISC01);
    10fc:	a5 e5       	ldi	r26, 0x55	; 85
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	e5 e5       	ldi	r30, 0x55	; 85
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	82 60       	ori	r24, 0x02	; 2
    1108:	8c 93       	st	X, r24
		SET_BIT(GICR,GICR_INT0);
    110a:	ab e5       	ldi	r26, 0x5B	; 91
    110c:	b0 e0       	ldi	r27, 0x00	; 0
    110e:	eb e5       	ldi	r30, 0x5B	; 91
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	80 81       	ld	r24, Z
    1114:	80 64       	ori	r24, 0x40	; 64
    1116:	8c 93       	st	X, r24
    1118:	ee c0       	rjmp	.+476    	; 0x12f6 <ExtEnable+0x290>
		break;
		
		case EXT_FALLING_EDGE:
		CLR_BIT(MCUCR,MCUCR_ISC00);
    111a:	a5 e5       	ldi	r26, 0x55	; 85
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	e5 e5       	ldi	r30, 0x55	; 85
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	8e 7f       	andi	r24, 0xFE	; 254
    1126:	8c 93       	st	X, r24
		SET_BIT(MCUCR,MCUCR_ISC01);
    1128:	a5 e5       	ldi	r26, 0x55	; 85
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	e5 e5       	ldi	r30, 0x55	; 85
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	82 60       	ori	r24, 0x02	; 2
    1134:	8c 93       	st	X, r24
		SET_BIT(GICR,GICR_INT0);
    1136:	ab e5       	ldi	r26, 0x5B	; 91
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	eb e5       	ldi	r30, 0x5B	; 91
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	80 64       	ori	r24, 0x40	; 64
    1142:	8c 93       	st	X, r24
    1144:	d8 c0       	rjmp	.+432    	; 0x12f6 <ExtEnable+0x290>
		break;
		
		case EXT_LOW_LEVEL:
		CLR_BIT(MCUCR,MCUCR_ISC00);
    1146:	a5 e5       	ldi	r26, 0x55	; 85
    1148:	b0 e0       	ldi	r27, 0x00	; 0
    114a:	e5 e5       	ldi	r30, 0x55	; 85
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	8e 7f       	andi	r24, 0xFE	; 254
    1152:	8c 93       	st	X, r24
		CLR_BIT(MCUCR,MCUCR_ISC01);
    1154:	a5 e5       	ldi	r26, 0x55	; 85
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	e5 e5       	ldi	r30, 0x55	; 85
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	8d 7f       	andi	r24, 0xFD	; 253
    1160:	8c 93       	st	X, r24
		SET_BIT(GICR,GICR_INT0);
    1162:	ab e5       	ldi	r26, 0x5B	; 91
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	eb e5       	ldi	r30, 0x5B	; 91
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	80 64       	ori	r24, 0x40	; 64
    116e:	8c 93       	st	X, r24
    1170:	c2 c0       	rjmp	.+388    	; 0x12f6 <ExtEnable+0x290>
		break;
		
		case EXT_ANY_LOGICAL:
		SET_BIT(MCUCR,MCUCR_ISC00);
    1172:	a5 e5       	ldi	r26, 0x55	; 85
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	e5 e5       	ldi	r30, 0x55	; 85
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	81 60       	ori	r24, 0x01	; 1
    117e:	8c 93       	st	X, r24
		CLR_BIT(MCUCR,MCUCR_ISC01);
    1180:	a5 e5       	ldi	r26, 0x55	; 85
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	e5 e5       	ldi	r30, 0x55	; 85
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	8d 7f       	andi	r24, 0xFD	; 253
    118c:	8c 93       	st	X, r24
		SET_BIT(GICR,GICR_INT0);
    118e:	ab e5       	ldi	r26, 0x5B	; 91
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	eb e5       	ldi	r30, 0x5B	; 91
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	80 64       	ori	r24, 0x40	; 64
    119a:	8c 93       	st	X, r24
    119c:	ac c0       	rjmp	.+344    	; 0x12f6 <ExtEnable+0x290>
		break;
		default : Local_ErrorState =0;
    119e:	19 82       	std	Y+1, r1	; 0x01
    11a0:	aa c0       	rjmp	.+340    	; 0x12f6 <ExtEnable+0x290>
	
	break;
	
	
	case EXT_INT1:
	switch(EdgeSense)
    11a2:	8b 81       	ldd	r24, Y+3	; 0x03
    11a4:	28 2f       	mov	r18, r24
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	3f 83       	std	Y+7, r19	; 0x07
    11aa:	2e 83       	std	Y+6, r18	; 0x06
    11ac:	8e 81       	ldd	r24, Y+6	; 0x06
    11ae:	9f 81       	ldd	r25, Y+7	; 0x07
    11b0:	81 30       	cpi	r24, 0x01	; 1
    11b2:	91 05       	cpc	r25, r1
    11b4:	61 f1       	breq	.+88     	; 0x120e <ExtEnable+0x1a8>
    11b6:	2e 81       	ldd	r18, Y+6	; 0x06
    11b8:	3f 81       	ldd	r19, Y+7	; 0x07
    11ba:	22 30       	cpi	r18, 0x02	; 2
    11bc:	31 05       	cpc	r19, r1
    11be:	2c f4       	brge	.+10     	; 0x11ca <ExtEnable+0x164>
    11c0:	8e 81       	ldd	r24, Y+6	; 0x06
    11c2:	9f 81       	ldd	r25, Y+7	; 0x07
    11c4:	00 97       	sbiw	r24, 0x00	; 0
    11c6:	69 f0       	breq	.+26     	; 0x11e2 <ExtEnable+0x17c>
    11c8:	64 c0       	rjmp	.+200    	; 0x1292 <ExtEnable+0x22c>
    11ca:	2e 81       	ldd	r18, Y+6	; 0x06
    11cc:	3f 81       	ldd	r19, Y+7	; 0x07
    11ce:	22 30       	cpi	r18, 0x02	; 2
    11d0:	31 05       	cpc	r19, r1
    11d2:	09 f4       	brne	.+2      	; 0x11d6 <ExtEnable+0x170>
    11d4:	48 c0       	rjmp	.+144    	; 0x1266 <ExtEnable+0x200>
    11d6:	8e 81       	ldd	r24, Y+6	; 0x06
    11d8:	9f 81       	ldd	r25, Y+7	; 0x07
    11da:	83 30       	cpi	r24, 0x03	; 3
    11dc:	91 05       	cpc	r25, r1
    11de:	69 f1       	breq	.+90     	; 0x123a <ExtEnable+0x1d4>
    11e0:	58 c0       	rjmp	.+176    	; 0x1292 <ExtEnable+0x22c>
	{
		case EXT_RAISING_EDGE:
		SET_BIT(MCUCR,MCUCR_ISC10);
    11e2:	a5 e5       	ldi	r26, 0x55	; 85
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	e5 e5       	ldi	r30, 0x55	; 85
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	84 60       	ori	r24, 0x04	; 4
    11ee:	8c 93       	st	X, r24
		SET_BIT(MCUCR,MCUCR_ISC11);
    11f0:	a5 e5       	ldi	r26, 0x55	; 85
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	e5 e5       	ldi	r30, 0x55	; 85
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	88 60       	ori	r24, 0x08	; 8
    11fc:	8c 93       	st	X, r24
		SET_BIT(GICR,GICR_INT1);
    11fe:	ab e5       	ldi	r26, 0x5B	; 91
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	eb e5       	ldi	r30, 0x5B	; 91
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	80 68       	ori	r24, 0x80	; 128
    120a:	8c 93       	st	X, r24
    120c:	74 c0       	rjmp	.+232    	; 0x12f6 <ExtEnable+0x290>
		break;
		
		case EXT_FALLING_EDGE:
		CLR_BIT(MCUCR,MCUCR_ISC10);
    120e:	a5 e5       	ldi	r26, 0x55	; 85
    1210:	b0 e0       	ldi	r27, 0x00	; 0
    1212:	e5 e5       	ldi	r30, 0x55	; 85
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	8b 7f       	andi	r24, 0xFB	; 251
    121a:	8c 93       	st	X, r24
		SET_BIT(MCUCR,MCUCR_ISC11);
    121c:	a5 e5       	ldi	r26, 0x55	; 85
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	e5 e5       	ldi	r30, 0x55	; 85
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	88 60       	ori	r24, 0x08	; 8
    1228:	8c 93       	st	X, r24
		SET_BIT(GICR,GICR_INT1);
    122a:	ab e5       	ldi	r26, 0x5B	; 91
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	eb e5       	ldi	r30, 0x5B	; 91
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	80 68       	ori	r24, 0x80	; 128
    1236:	8c 93       	st	X, r24
    1238:	5e c0       	rjmp	.+188    	; 0x12f6 <ExtEnable+0x290>
		break;
		
		case EXT_LOW_LEVEL:
		CLR_BIT(MCUCR,MCUCR_ISC10);
    123a:	a5 e5       	ldi	r26, 0x55	; 85
    123c:	b0 e0       	ldi	r27, 0x00	; 0
    123e:	e5 e5       	ldi	r30, 0x55	; 85
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	8b 7f       	andi	r24, 0xFB	; 251
    1246:	8c 93       	st	X, r24
		CLR_BIT(MCUCR,MCUCR_ISC11);
    1248:	a5 e5       	ldi	r26, 0x55	; 85
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	e5 e5       	ldi	r30, 0x55	; 85
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	87 7f       	andi	r24, 0xF7	; 247
    1254:	8c 93       	st	X, r24
		SET_BIT(GICR,GICR_INT1);
    1256:	ab e5       	ldi	r26, 0x5B	; 91
    1258:	b0 e0       	ldi	r27, 0x00	; 0
    125a:	eb e5       	ldi	r30, 0x5B	; 91
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	80 68       	ori	r24, 0x80	; 128
    1262:	8c 93       	st	X, r24
    1264:	48 c0       	rjmp	.+144    	; 0x12f6 <ExtEnable+0x290>
		break;
		
		case EXT_ANY_LOGICAL:
		SET_BIT(MCUCR,MCUCR_ISC10);
    1266:	a5 e5       	ldi	r26, 0x55	; 85
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	e5 e5       	ldi	r30, 0x55	; 85
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	84 60       	ori	r24, 0x04	; 4
    1272:	8c 93       	st	X, r24
		CLR_BIT(MCUCR,MCUCR_ISC11);
    1274:	a5 e5       	ldi	r26, 0x55	; 85
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	e5 e5       	ldi	r30, 0x55	; 85
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	87 7f       	andi	r24, 0xF7	; 247
    1280:	8c 93       	st	X, r24
		SET_BIT(GICR,GICR_INT1);
    1282:	ab e5       	ldi	r26, 0x5B	; 91
    1284:	b0 e0       	ldi	r27, 0x00	; 0
    1286:	eb e5       	ldi	r30, 0x5B	; 91
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	80 68       	ori	r24, 0x80	; 128
    128e:	8c 93       	st	X, r24
    1290:	32 c0       	rjmp	.+100    	; 0x12f6 <ExtEnable+0x290>
		break;
		
		default : Local_ErrorState =0;
    1292:	19 82       	std	Y+1, r1	; 0x01
    1294:	30 c0       	rjmp	.+96     	; 0x12f6 <ExtEnable+0x290>
	}
	break;
	
	
	case EXT_INT2:
	switch(EdgeSense)
    1296:	8b 81       	ldd	r24, Y+3	; 0x03
    1298:	28 2f       	mov	r18, r24
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	3d 83       	std	Y+5, r19	; 0x05
    129e:	2c 83       	std	Y+4, r18	; 0x04
    12a0:	8c 81       	ldd	r24, Y+4	; 0x04
    12a2:	9d 81       	ldd	r25, Y+5	; 0x05
    12a4:	00 97       	sbiw	r24, 0x00	; 0
    12a6:	31 f0       	breq	.+12     	; 0x12b4 <ExtEnable+0x24e>
    12a8:	2c 81       	ldd	r18, Y+4	; 0x04
    12aa:	3d 81       	ldd	r19, Y+5	; 0x05
    12ac:	21 30       	cpi	r18, 0x01	; 1
    12ae:	31 05       	cpc	r19, r1
    12b0:	81 f0       	breq	.+32     	; 0x12d2 <ExtEnable+0x26c>
    12b2:	1e c0       	rjmp	.+60     	; 0x12f0 <ExtEnable+0x28a>
	{
		case EXT_RAISING_EDGE:
		SET_BIT(MCUCSR,MCUCSR_ISC2);
    12b4:	a4 e5       	ldi	r26, 0x54	; 84
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	e4 e5       	ldi	r30, 0x54	; 84
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	80 64       	ori	r24, 0x40	; 64
    12c0:	8c 93       	st	X, r24
		SET_BIT(GICR,GICR_INT2);
    12c2:	ab e5       	ldi	r26, 0x5B	; 91
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	eb e5       	ldi	r30, 0x5B	; 91
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	80 62       	ori	r24, 0x20	; 32
    12ce:	8c 93       	st	X, r24
    12d0:	12 c0       	rjmp	.+36     	; 0x12f6 <ExtEnable+0x290>
		break;
		
		case EXT_FALLING_EDGE:
		CLR_BIT(MCUCSR,MCUCSR_ISC2);
    12d2:	a4 e5       	ldi	r26, 0x54	; 84
    12d4:	b0 e0       	ldi	r27, 0x00	; 0
    12d6:	e4 e5       	ldi	r30, 0x54	; 84
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	8f 7b       	andi	r24, 0xBF	; 191
    12de:	8c 93       	st	X, r24
		SET_BIT(GICR,GICR_INT2);
    12e0:	ab e5       	ldi	r26, 0x5B	; 91
    12e2:	b0 e0       	ldi	r27, 0x00	; 0
    12e4:	eb e5       	ldi	r30, 0x5B	; 91
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 81       	ld	r24, Z
    12ea:	80 62       	ori	r24, 0x20	; 32
    12ec:	8c 93       	st	X, r24
    12ee:	03 c0       	rjmp	.+6      	; 0x12f6 <ExtEnable+0x290>
		break;
		default : Local_ErrorState =0;
    12f0:	19 82       	std	Y+1, r1	; 0x01
    12f2:	01 c0       	rjmp	.+2      	; 0x12f6 <ExtEnable+0x290>
	}
	break;
	default : Local_ErrorState =0;
    12f4:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_ErrorState; 
    12f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    12f8:	2b 96       	adiw	r28, 0x0b	; 11
    12fa:	0f b6       	in	r0, 0x3f	; 63
    12fc:	f8 94       	cli
    12fe:	de bf       	out	0x3e, r29	; 62
    1300:	0f be       	out	0x3f, r0	; 63
    1302:	cd bf       	out	0x3d, r28	; 61
    1304:	cf 91       	pop	r28
    1306:	df 91       	pop	r29
    1308:	08 95       	ret

0000130a <SetCallBack>:


u8 SetCallBack(void(*Lpf)(void),u8 index)
{
    130a:	df 93       	push	r29
    130c:	cf 93       	push	r28
    130e:	00 d0       	rcall	.+0      	; 0x1310 <SetCallBack+0x6>
    1310:	00 d0       	rcall	.+0      	; 0x1312 <SetCallBack+0x8>
    1312:	cd b7       	in	r28, 0x3d	; 61
    1314:	de b7       	in	r29, 0x3e	; 62
    1316:	9b 83       	std	Y+3, r25	; 0x03
    1318:	8a 83       	std	Y+2, r24	; 0x02
    131a:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_ErrorState = 1;
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	89 83       	std	Y+1, r24	; 0x01
	if((index<=EXT_INT2) && (Lpf!=0))
    1320:	8c 81       	ldd	r24, Y+4	; 0x04
    1322:	83 30       	cpi	r24, 0x03	; 3
    1324:	88 f4       	brcc	.+34     	; 0x1348 <SetCallBack+0x3e>
    1326:	8a 81       	ldd	r24, Y+2	; 0x02
    1328:	9b 81       	ldd	r25, Y+3	; 0x03
    132a:	00 97       	sbiw	r24, 0x00	; 0
    132c:	69 f0       	breq	.+26     	; 0x1348 <SetCallBack+0x3e>
	{
	EXT[index] = Lpf;
    132e:	8c 81       	ldd	r24, Y+4	; 0x04
    1330:	88 2f       	mov	r24, r24
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	88 0f       	add	r24, r24
    1336:	99 1f       	adc	r25, r25
    1338:	fc 01       	movw	r30, r24
    133a:	ec 59       	subi	r30, 0x9C	; 156
    133c:	fd 4f       	sbci	r31, 0xFD	; 253
    133e:	8a 81       	ldd	r24, Y+2	; 0x02
    1340:	9b 81       	ldd	r25, Y+3	; 0x03
    1342:	91 83       	std	Z+1, r25	; 0x01
    1344:	80 83       	st	Z, r24
    1346:	01 c0       	rjmp	.+2      	; 0x134a <SetCallBack+0x40>
	}
	else
	{
		Local_ErrorState = 0;
    1348:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_ErrorState;
    134a:	89 81       	ldd	r24, Y+1	; 0x01
}
    134c:	0f 90       	pop	r0
    134e:	0f 90       	pop	r0
    1350:	0f 90       	pop	r0
    1352:	0f 90       	pop	r0
    1354:	cf 91       	pop	r28
    1356:	df 91       	pop	r29
    1358:	08 95       	ret

0000135a <__vector_1>:

/* prototype for ISR of EXT0*/
void __vector_1(void)   __attribute__((signal));
void __vector_1(void)  
{
    135a:	1f 92       	push	r1
    135c:	0f 92       	push	r0
    135e:	0f b6       	in	r0, 0x3f	; 63
    1360:	0f 92       	push	r0
    1362:	11 24       	eor	r1, r1
    1364:	2f 93       	push	r18
    1366:	3f 93       	push	r19
    1368:	4f 93       	push	r20
    136a:	5f 93       	push	r21
    136c:	6f 93       	push	r22
    136e:	7f 93       	push	r23
    1370:	8f 93       	push	r24
    1372:	9f 93       	push	r25
    1374:	af 93       	push	r26
    1376:	bf 93       	push	r27
    1378:	ef 93       	push	r30
    137a:	ff 93       	push	r31
    137c:	df 93       	push	r29
    137e:	cf 93       	push	r28
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
	if(EXT[EXT_INT0]!=0)
    1384:	80 91 64 02 	lds	r24, 0x0264
    1388:	90 91 65 02 	lds	r25, 0x0265
    138c:	00 97       	sbiw	r24, 0x00	; 0
    138e:	29 f0       	breq	.+10     	; 0x139a <__vector_1+0x40>
	{
		EXT[EXT_INT0]();
    1390:	e0 91 64 02 	lds	r30, 0x0264
    1394:	f0 91 65 02 	lds	r31, 0x0265
    1398:	09 95       	icall
	}
	
}
    139a:	cf 91       	pop	r28
    139c:	df 91       	pop	r29
    139e:	ff 91       	pop	r31
    13a0:	ef 91       	pop	r30
    13a2:	bf 91       	pop	r27
    13a4:	af 91       	pop	r26
    13a6:	9f 91       	pop	r25
    13a8:	8f 91       	pop	r24
    13aa:	7f 91       	pop	r23
    13ac:	6f 91       	pop	r22
    13ae:	5f 91       	pop	r21
    13b0:	4f 91       	pop	r20
    13b2:	3f 91       	pop	r19
    13b4:	2f 91       	pop	r18
    13b6:	0f 90       	pop	r0
    13b8:	0f be       	out	0x3f, r0	; 63
    13ba:	0f 90       	pop	r0
    13bc:	1f 90       	pop	r1
    13be:	18 95       	reti

000013c0 <__vector_2>:


/* prototype for ISR of EXT1*/
void __vector_2(void)   __attribute__((signal));
void __vector_2(void)  
{
    13c0:	1f 92       	push	r1
    13c2:	0f 92       	push	r0
    13c4:	0f b6       	in	r0, 0x3f	; 63
    13c6:	0f 92       	push	r0
    13c8:	11 24       	eor	r1, r1
    13ca:	2f 93       	push	r18
    13cc:	3f 93       	push	r19
    13ce:	4f 93       	push	r20
    13d0:	5f 93       	push	r21
    13d2:	6f 93       	push	r22
    13d4:	7f 93       	push	r23
    13d6:	8f 93       	push	r24
    13d8:	9f 93       	push	r25
    13da:	af 93       	push	r26
    13dc:	bf 93       	push	r27
    13de:	ef 93       	push	r30
    13e0:	ff 93       	push	r31
    13e2:	df 93       	push	r29
    13e4:	cf 93       	push	r28
    13e6:	cd b7       	in	r28, 0x3d	; 61
    13e8:	de b7       	in	r29, 0x3e	; 62
	if(EXT[EXT_INT1]!=0)
    13ea:	80 91 66 02 	lds	r24, 0x0266
    13ee:	90 91 67 02 	lds	r25, 0x0267
    13f2:	00 97       	sbiw	r24, 0x00	; 0
    13f4:	29 f0       	breq	.+10     	; 0x1400 <__vector_2+0x40>
	{
		EXT[EXT_INT1]();
    13f6:	e0 91 66 02 	lds	r30, 0x0266
    13fa:	f0 91 67 02 	lds	r31, 0x0267
    13fe:	09 95       	icall
	}
}
    1400:	cf 91       	pop	r28
    1402:	df 91       	pop	r29
    1404:	ff 91       	pop	r31
    1406:	ef 91       	pop	r30
    1408:	bf 91       	pop	r27
    140a:	af 91       	pop	r26
    140c:	9f 91       	pop	r25
    140e:	8f 91       	pop	r24
    1410:	7f 91       	pop	r23
    1412:	6f 91       	pop	r22
    1414:	5f 91       	pop	r21
    1416:	4f 91       	pop	r20
    1418:	3f 91       	pop	r19
    141a:	2f 91       	pop	r18
    141c:	0f 90       	pop	r0
    141e:	0f be       	out	0x3f, r0	; 63
    1420:	0f 90       	pop	r0
    1422:	1f 90       	pop	r1
    1424:	18 95       	reti

00001426 <__vector_3>:


/* prototype for ISR of EXT2*/
void __vector_3(void)   __attribute__((signal));
void __vector_3(void)  
{
    1426:	1f 92       	push	r1
    1428:	0f 92       	push	r0
    142a:	0f b6       	in	r0, 0x3f	; 63
    142c:	0f 92       	push	r0
    142e:	11 24       	eor	r1, r1
    1430:	2f 93       	push	r18
    1432:	3f 93       	push	r19
    1434:	4f 93       	push	r20
    1436:	5f 93       	push	r21
    1438:	6f 93       	push	r22
    143a:	7f 93       	push	r23
    143c:	8f 93       	push	r24
    143e:	9f 93       	push	r25
    1440:	af 93       	push	r26
    1442:	bf 93       	push	r27
    1444:	ef 93       	push	r30
    1446:	ff 93       	push	r31
    1448:	df 93       	push	r29
    144a:	cf 93       	push	r28
    144c:	cd b7       	in	r28, 0x3d	; 61
    144e:	de b7       	in	r29, 0x3e	; 62
	if(EXT[EXT_INT2]!=0)  // sure that the pointer contain an address
    1450:	80 91 68 02 	lds	r24, 0x0268
    1454:	90 91 69 02 	lds	r25, 0x0269
    1458:	00 97       	sbiw	r24, 0x00	; 0
    145a:	29 f0       	breq	.+10     	; 0x1466 <__vector_3+0x40>
	{
		EXT[EXT_INT2]();
    145c:	e0 91 68 02 	lds	r30, 0x0268
    1460:	f0 91 69 02 	lds	r31, 0x0269
    1464:	09 95       	icall
	}
}
    1466:	cf 91       	pop	r28
    1468:	df 91       	pop	r29
    146a:	ff 91       	pop	r31
    146c:	ef 91       	pop	r30
    146e:	bf 91       	pop	r27
    1470:	af 91       	pop	r26
    1472:	9f 91       	pop	r25
    1474:	8f 91       	pop	r24
    1476:	7f 91       	pop	r23
    1478:	6f 91       	pop	r22
    147a:	5f 91       	pop	r21
    147c:	4f 91       	pop	r20
    147e:	3f 91       	pop	r19
    1480:	2f 91       	pop	r18
    1482:	0f 90       	pop	r0
    1484:	0f be       	out	0x3f, r0	; 63
    1486:	0f 90       	pop	r0
    1488:	1f 90       	pop	r1
    148a:	18 95       	reti

0000148c <DIO_SetPinDirection>:
#include "DIO_CONFIG.h"
#include "DIO_PRIVATE.h"


void DIO_SetPinDirection(u8 Port, u8 Pin, u8 Direction)
	{
    148c:	df 93       	push	r29
    148e:	cf 93       	push	r28
    1490:	00 d0       	rcall	.+0      	; 0x1492 <DIO_SetPinDirection+0x6>
    1492:	00 d0       	rcall	.+0      	; 0x1494 <DIO_SetPinDirection+0x8>
    1494:	0f 92       	push	r0
    1496:	cd b7       	in	r28, 0x3d	; 61
    1498:	de b7       	in	r29, 0x3e	; 62
    149a:	89 83       	std	Y+1, r24	; 0x01
    149c:	6a 83       	std	Y+2, r22	; 0x02
    149e:	4b 83       	std	Y+3, r20	; 0x03
		switch(Port)
    14a0:	89 81       	ldd	r24, Y+1	; 0x01
    14a2:	28 2f       	mov	r18, r24
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	3d 83       	std	Y+5, r19	; 0x05
    14a8:	2c 83       	std	Y+4, r18	; 0x04
    14aa:	8c 81       	ldd	r24, Y+4	; 0x04
    14ac:	9d 81       	ldd	r25, Y+5	; 0x05
    14ae:	81 30       	cpi	r24, 0x01	; 1
    14b0:	91 05       	cpc	r25, r1
    14b2:	09 f4       	brne	.+2      	; 0x14b6 <DIO_SetPinDirection+0x2a>
    14b4:	47 c0       	rjmp	.+142    	; 0x1544 <DIO_SetPinDirection+0xb8>
    14b6:	2c 81       	ldd	r18, Y+4	; 0x04
    14b8:	3d 81       	ldd	r19, Y+5	; 0x05
    14ba:	22 30       	cpi	r18, 0x02	; 2
    14bc:	31 05       	cpc	r19, r1
    14be:	2c f4       	brge	.+10     	; 0x14ca <DIO_SetPinDirection+0x3e>
    14c0:	8c 81       	ldd	r24, Y+4	; 0x04
    14c2:	9d 81       	ldd	r25, Y+5	; 0x05
    14c4:	00 97       	sbiw	r24, 0x00	; 0
    14c6:	71 f0       	breq	.+28     	; 0x14e4 <DIO_SetPinDirection+0x58>
    14c8:	cb c0       	rjmp	.+406    	; 0x1660 <DIO_SetPinDirection+0x1d4>
    14ca:	2c 81       	ldd	r18, Y+4	; 0x04
    14cc:	3d 81       	ldd	r19, Y+5	; 0x05
    14ce:	22 30       	cpi	r18, 0x02	; 2
    14d0:	31 05       	cpc	r19, r1
    14d2:	09 f4       	brne	.+2      	; 0x14d6 <DIO_SetPinDirection+0x4a>
    14d4:	67 c0       	rjmp	.+206    	; 0x15a4 <DIO_SetPinDirection+0x118>
    14d6:	8c 81       	ldd	r24, Y+4	; 0x04
    14d8:	9d 81       	ldd	r25, Y+5	; 0x05
    14da:	83 30       	cpi	r24, 0x03	; 3
    14dc:	91 05       	cpc	r25, r1
    14de:	09 f4       	brne	.+2      	; 0x14e2 <DIO_SetPinDirection+0x56>
    14e0:	91 c0       	rjmp	.+290    	; 0x1604 <DIO_SetPinDirection+0x178>
    14e2:	be c0       	rjmp	.+380    	; 0x1660 <DIO_SetPinDirection+0x1d4>
		{
			case PORTA:
			if(Direction == DIO_INPUT)
    14e4:	8b 81       	ldd	r24, Y+3	; 0x03
    14e6:	88 23       	and	r24, r24
    14e8:	a9 f4       	brne	.+42     	; 0x1514 <DIO_SetPinDirection+0x88>
			{
				CLR_BIT(DDRA_REG,Pin);
    14ea:	aa e3       	ldi	r26, 0x3A	; 58
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	ea e3       	ldi	r30, 0x3A	; 58
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	48 2f       	mov	r20, r24
    14f6:	8a 81       	ldd	r24, Y+2	; 0x02
    14f8:	28 2f       	mov	r18, r24
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	81 e0       	ldi	r24, 0x01	; 1
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	02 2e       	mov	r0, r18
    1502:	02 c0       	rjmp	.+4      	; 0x1508 <DIO_SetPinDirection+0x7c>
    1504:	88 0f       	add	r24, r24
    1506:	99 1f       	adc	r25, r25
    1508:	0a 94       	dec	r0
    150a:	e2 f7       	brpl	.-8      	; 0x1504 <DIO_SetPinDirection+0x78>
    150c:	80 95       	com	r24
    150e:	84 23       	and	r24, r20
    1510:	8c 93       	st	X, r24
    1512:	a6 c0       	rjmp	.+332    	; 0x1660 <DIO_SetPinDirection+0x1d4>
			}
			else if(Direction == DIO_OUTPUT)
    1514:	8b 81       	ldd	r24, Y+3	; 0x03
    1516:	81 30       	cpi	r24, 0x01	; 1
    1518:	09 f0       	breq	.+2      	; 0x151c <DIO_SetPinDirection+0x90>
    151a:	a2 c0       	rjmp	.+324    	; 0x1660 <DIO_SetPinDirection+0x1d4>
			{
				SET_BIT(DDRA_REG,Pin);
    151c:	aa e3       	ldi	r26, 0x3A	; 58
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	ea e3       	ldi	r30, 0x3A	; 58
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	48 2f       	mov	r20, r24
    1528:	8a 81       	ldd	r24, Y+2	; 0x02
    152a:	28 2f       	mov	r18, r24
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	02 2e       	mov	r0, r18
    1534:	02 c0       	rjmp	.+4      	; 0x153a <DIO_SetPinDirection+0xae>
    1536:	88 0f       	add	r24, r24
    1538:	99 1f       	adc	r25, r25
    153a:	0a 94       	dec	r0
    153c:	e2 f7       	brpl	.-8      	; 0x1536 <DIO_SetPinDirection+0xaa>
    153e:	84 2b       	or	r24, r20
    1540:	8c 93       	st	X, r24
    1542:	8e c0       	rjmp	.+284    	; 0x1660 <DIO_SetPinDirection+0x1d4>
			
			break;
			
			
			case PORTB:
			if(Direction == DIO_INPUT)
    1544:	8b 81       	ldd	r24, Y+3	; 0x03
    1546:	88 23       	and	r24, r24
    1548:	a9 f4       	brne	.+42     	; 0x1574 <DIO_SetPinDirection+0xe8>
			{
				CLR_BIT(DDRB_REG,Pin);
    154a:	a7 e3       	ldi	r26, 0x37	; 55
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	e7 e3       	ldi	r30, 0x37	; 55
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	48 2f       	mov	r20, r24
    1556:	8a 81       	ldd	r24, Y+2	; 0x02
    1558:	28 2f       	mov	r18, r24
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	02 2e       	mov	r0, r18
    1562:	02 c0       	rjmp	.+4      	; 0x1568 <DIO_SetPinDirection+0xdc>
    1564:	88 0f       	add	r24, r24
    1566:	99 1f       	adc	r25, r25
    1568:	0a 94       	dec	r0
    156a:	e2 f7       	brpl	.-8      	; 0x1564 <DIO_SetPinDirection+0xd8>
    156c:	80 95       	com	r24
    156e:	84 23       	and	r24, r20
    1570:	8c 93       	st	X, r24
    1572:	76 c0       	rjmp	.+236    	; 0x1660 <DIO_SetPinDirection+0x1d4>
			}
			else if(Direction == DIO_OUTPUT)
    1574:	8b 81       	ldd	r24, Y+3	; 0x03
    1576:	81 30       	cpi	r24, 0x01	; 1
    1578:	09 f0       	breq	.+2      	; 0x157c <DIO_SetPinDirection+0xf0>
    157a:	72 c0       	rjmp	.+228    	; 0x1660 <DIO_SetPinDirection+0x1d4>
			{
				SET_BIT(DDRB_REG,Pin);
    157c:	a7 e3       	ldi	r26, 0x37	; 55
    157e:	b0 e0       	ldi	r27, 0x00	; 0
    1580:	e7 e3       	ldi	r30, 0x37	; 55
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	80 81       	ld	r24, Z
    1586:	48 2f       	mov	r20, r24
    1588:	8a 81       	ldd	r24, Y+2	; 0x02
    158a:	28 2f       	mov	r18, r24
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	02 2e       	mov	r0, r18
    1594:	02 c0       	rjmp	.+4      	; 0x159a <DIO_SetPinDirection+0x10e>
    1596:	88 0f       	add	r24, r24
    1598:	99 1f       	adc	r25, r25
    159a:	0a 94       	dec	r0
    159c:	e2 f7       	brpl	.-8      	; 0x1596 <DIO_SetPinDirection+0x10a>
    159e:	84 2b       	or	r24, r20
    15a0:	8c 93       	st	X, r24
    15a2:	5e c0       	rjmp	.+188    	; 0x1660 <DIO_SetPinDirection+0x1d4>
			
			break;
			
			
			case PORTC :
			if(Direction == DIO_INPUT)
    15a4:	8b 81       	ldd	r24, Y+3	; 0x03
    15a6:	88 23       	and	r24, r24
    15a8:	a9 f4       	brne	.+42     	; 0x15d4 <DIO_SetPinDirection+0x148>
			{
				CLR_BIT(DDRC_REG,Pin);
    15aa:	a4 e3       	ldi	r26, 0x34	; 52
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	e4 e3       	ldi	r30, 0x34	; 52
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	48 2f       	mov	r20, r24
    15b6:	8a 81       	ldd	r24, Y+2	; 0x02
    15b8:	28 2f       	mov	r18, r24
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	02 2e       	mov	r0, r18
    15c2:	02 c0       	rjmp	.+4      	; 0x15c8 <DIO_SetPinDirection+0x13c>
    15c4:	88 0f       	add	r24, r24
    15c6:	99 1f       	adc	r25, r25
    15c8:	0a 94       	dec	r0
    15ca:	e2 f7       	brpl	.-8      	; 0x15c4 <DIO_SetPinDirection+0x138>
    15cc:	80 95       	com	r24
    15ce:	84 23       	and	r24, r20
    15d0:	8c 93       	st	X, r24
    15d2:	46 c0       	rjmp	.+140    	; 0x1660 <DIO_SetPinDirection+0x1d4>
			}
			else if(Direction == DIO_OUTPUT)
    15d4:	8b 81       	ldd	r24, Y+3	; 0x03
    15d6:	81 30       	cpi	r24, 0x01	; 1
    15d8:	09 f0       	breq	.+2      	; 0x15dc <DIO_SetPinDirection+0x150>
    15da:	42 c0       	rjmp	.+132    	; 0x1660 <DIO_SetPinDirection+0x1d4>
			{
				SET_BIT(DDRC_REG,Pin);
    15dc:	a4 e3       	ldi	r26, 0x34	; 52
    15de:	b0 e0       	ldi	r27, 0x00	; 0
    15e0:	e4 e3       	ldi	r30, 0x34	; 52
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	80 81       	ld	r24, Z
    15e6:	48 2f       	mov	r20, r24
    15e8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ea:	28 2f       	mov	r18, r24
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	02 2e       	mov	r0, r18
    15f4:	02 c0       	rjmp	.+4      	; 0x15fa <DIO_SetPinDirection+0x16e>
    15f6:	88 0f       	add	r24, r24
    15f8:	99 1f       	adc	r25, r25
    15fa:	0a 94       	dec	r0
    15fc:	e2 f7       	brpl	.-8      	; 0x15f6 <DIO_SetPinDirection+0x16a>
    15fe:	84 2b       	or	r24, r20
    1600:	8c 93       	st	X, r24
    1602:	2e c0       	rjmp	.+92     	; 0x1660 <DIO_SetPinDirection+0x1d4>
			
			break;
			
			
			case PORTD :
			if(Direction == DIO_INPUT)
    1604:	8b 81       	ldd	r24, Y+3	; 0x03
    1606:	88 23       	and	r24, r24
    1608:	a9 f4       	brne	.+42     	; 0x1634 <DIO_SetPinDirection+0x1a8>
			{
				CLR_BIT(DDRD_REG,Pin);
    160a:	a1 e3       	ldi	r26, 0x31	; 49
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	e1 e3       	ldi	r30, 0x31	; 49
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	48 2f       	mov	r20, r24
    1616:	8a 81       	ldd	r24, Y+2	; 0x02
    1618:	28 2f       	mov	r18, r24
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	02 2e       	mov	r0, r18
    1622:	02 c0       	rjmp	.+4      	; 0x1628 <DIO_SetPinDirection+0x19c>
    1624:	88 0f       	add	r24, r24
    1626:	99 1f       	adc	r25, r25
    1628:	0a 94       	dec	r0
    162a:	e2 f7       	brpl	.-8      	; 0x1624 <DIO_SetPinDirection+0x198>
    162c:	80 95       	com	r24
    162e:	84 23       	and	r24, r20
    1630:	8c 93       	st	X, r24
    1632:	16 c0       	rjmp	.+44     	; 0x1660 <DIO_SetPinDirection+0x1d4>
			}
			else if(Direction == DIO_OUTPUT)
    1634:	8b 81       	ldd	r24, Y+3	; 0x03
    1636:	81 30       	cpi	r24, 0x01	; 1
    1638:	99 f4       	brne	.+38     	; 0x1660 <DIO_SetPinDirection+0x1d4>
			{
				SET_BIT(DDRD_REG,Pin);
    163a:	a1 e3       	ldi	r26, 0x31	; 49
    163c:	b0 e0       	ldi	r27, 0x00	; 0
    163e:	e1 e3       	ldi	r30, 0x31	; 49
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	80 81       	ld	r24, Z
    1644:	48 2f       	mov	r20, r24
    1646:	8a 81       	ldd	r24, Y+2	; 0x02
    1648:	28 2f       	mov	r18, r24
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	02 2e       	mov	r0, r18
    1652:	02 c0       	rjmp	.+4      	; 0x1658 <DIO_SetPinDirection+0x1cc>
    1654:	88 0f       	add	r24, r24
    1656:	99 1f       	adc	r25, r25
    1658:	0a 94       	dec	r0
    165a:	e2 f7       	brpl	.-8      	; 0x1654 <DIO_SetPinDirection+0x1c8>
    165c:	84 2b       	or	r24, r20
    165e:	8c 93       	st	X, r24
			
			default :
			
			break;
		}
	}
    1660:	0f 90       	pop	r0
    1662:	0f 90       	pop	r0
    1664:	0f 90       	pop	r0
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	cf 91       	pop	r28
    166c:	df 91       	pop	r29
    166e:	08 95       	ret

00001670 <DIO_SetPinValue>:
		
		void DIO_SetPinValue (u8 Port, u8 Pin,u8 Value)
		{
    1670:	df 93       	push	r29
    1672:	cf 93       	push	r28
    1674:	00 d0       	rcall	.+0      	; 0x1676 <DIO_SetPinValue+0x6>
    1676:	00 d0       	rcall	.+0      	; 0x1678 <DIO_SetPinValue+0x8>
    1678:	0f 92       	push	r0
    167a:	cd b7       	in	r28, 0x3d	; 61
    167c:	de b7       	in	r29, 0x3e	; 62
    167e:	89 83       	std	Y+1, r24	; 0x01
    1680:	6a 83       	std	Y+2, r22	; 0x02
    1682:	4b 83       	std	Y+3, r20	; 0x03
			switch(Port){
    1684:	89 81       	ldd	r24, Y+1	; 0x01
    1686:	28 2f       	mov	r18, r24
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	3d 83       	std	Y+5, r19	; 0x05
    168c:	2c 83       	std	Y+4, r18	; 0x04
    168e:	8c 81       	ldd	r24, Y+4	; 0x04
    1690:	9d 81       	ldd	r25, Y+5	; 0x05
    1692:	81 30       	cpi	r24, 0x01	; 1
    1694:	91 05       	cpc	r25, r1
    1696:	09 f4       	brne	.+2      	; 0x169a <DIO_SetPinValue+0x2a>
    1698:	47 c0       	rjmp	.+142    	; 0x1728 <DIO_SetPinValue+0xb8>
    169a:	2c 81       	ldd	r18, Y+4	; 0x04
    169c:	3d 81       	ldd	r19, Y+5	; 0x05
    169e:	22 30       	cpi	r18, 0x02	; 2
    16a0:	31 05       	cpc	r19, r1
    16a2:	2c f4       	brge	.+10     	; 0x16ae <DIO_SetPinValue+0x3e>
    16a4:	8c 81       	ldd	r24, Y+4	; 0x04
    16a6:	9d 81       	ldd	r25, Y+5	; 0x05
    16a8:	00 97       	sbiw	r24, 0x00	; 0
    16aa:	71 f0       	breq	.+28     	; 0x16c8 <DIO_SetPinValue+0x58>
    16ac:	cb c0       	rjmp	.+406    	; 0x1844 <DIO_SetPinValue+0x1d4>
    16ae:	2c 81       	ldd	r18, Y+4	; 0x04
    16b0:	3d 81       	ldd	r19, Y+5	; 0x05
    16b2:	22 30       	cpi	r18, 0x02	; 2
    16b4:	31 05       	cpc	r19, r1
    16b6:	09 f4       	brne	.+2      	; 0x16ba <DIO_SetPinValue+0x4a>
    16b8:	67 c0       	rjmp	.+206    	; 0x1788 <DIO_SetPinValue+0x118>
    16ba:	8c 81       	ldd	r24, Y+4	; 0x04
    16bc:	9d 81       	ldd	r25, Y+5	; 0x05
    16be:	83 30       	cpi	r24, 0x03	; 3
    16c0:	91 05       	cpc	r25, r1
    16c2:	09 f4       	brne	.+2      	; 0x16c6 <DIO_SetPinValue+0x56>
    16c4:	91 c0       	rjmp	.+290    	; 0x17e8 <DIO_SetPinValue+0x178>
    16c6:	be c0       	rjmp	.+380    	; 0x1844 <DIO_SetPinValue+0x1d4>
			
			case PORTA :
			if(Value == DIO_LOW)
    16c8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ca:	88 23       	and	r24, r24
    16cc:	a9 f4       	brne	.+42     	; 0x16f8 <DIO_SetPinValue+0x88>
			{
				CLR_BIT(PORTA_REG,Pin);
    16ce:	ab e3       	ldi	r26, 0x3B	; 59
    16d0:	b0 e0       	ldi	r27, 0x00	; 0
    16d2:	eb e3       	ldi	r30, 0x3B	; 59
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	80 81       	ld	r24, Z
    16d8:	48 2f       	mov	r20, r24
    16da:	8a 81       	ldd	r24, Y+2	; 0x02
    16dc:	28 2f       	mov	r18, r24
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	02 2e       	mov	r0, r18
    16e6:	02 c0       	rjmp	.+4      	; 0x16ec <DIO_SetPinValue+0x7c>
    16e8:	88 0f       	add	r24, r24
    16ea:	99 1f       	adc	r25, r25
    16ec:	0a 94       	dec	r0
    16ee:	e2 f7       	brpl	.-8      	; 0x16e8 <DIO_SetPinValue+0x78>
    16f0:	80 95       	com	r24
    16f2:	84 23       	and	r24, r20
    16f4:	8c 93       	st	X, r24
    16f6:	a6 c0       	rjmp	.+332    	; 0x1844 <DIO_SetPinValue+0x1d4>
			}
			else if(Value == DIO_HIGH)
    16f8:	8b 81       	ldd	r24, Y+3	; 0x03
    16fa:	81 30       	cpi	r24, 0x01	; 1
    16fc:	09 f0       	breq	.+2      	; 0x1700 <DIO_SetPinValue+0x90>
    16fe:	a2 c0       	rjmp	.+324    	; 0x1844 <DIO_SetPinValue+0x1d4>
			{
				SET_BIT(PORTA_REG,Pin);
    1700:	ab e3       	ldi	r26, 0x3B	; 59
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	eb e3       	ldi	r30, 0x3B	; 59
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	48 2f       	mov	r20, r24
    170c:	8a 81       	ldd	r24, Y+2	; 0x02
    170e:	28 2f       	mov	r18, r24
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	02 2e       	mov	r0, r18
    1718:	02 c0       	rjmp	.+4      	; 0x171e <DIO_SetPinValue+0xae>
    171a:	88 0f       	add	r24, r24
    171c:	99 1f       	adc	r25, r25
    171e:	0a 94       	dec	r0
    1720:	e2 f7       	brpl	.-8      	; 0x171a <DIO_SetPinValue+0xaa>
    1722:	84 2b       	or	r24, r20
    1724:	8c 93       	st	X, r24
    1726:	8e c0       	rjmp	.+284    	; 0x1844 <DIO_SetPinValue+0x1d4>
			
			break;
			
			
			case PORTB :
			if(Value == DIO_LOW)
    1728:	8b 81       	ldd	r24, Y+3	; 0x03
    172a:	88 23       	and	r24, r24
    172c:	a9 f4       	brne	.+42     	; 0x1758 <DIO_SetPinValue+0xe8>
			{
				CLR_BIT(PORTB_REG,Pin);
    172e:	a8 e3       	ldi	r26, 0x38	; 56
    1730:	b0 e0       	ldi	r27, 0x00	; 0
    1732:	e8 e3       	ldi	r30, 0x38	; 56
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	80 81       	ld	r24, Z
    1738:	48 2f       	mov	r20, r24
    173a:	8a 81       	ldd	r24, Y+2	; 0x02
    173c:	28 2f       	mov	r18, r24
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	02 2e       	mov	r0, r18
    1746:	02 c0       	rjmp	.+4      	; 0x174c <DIO_SetPinValue+0xdc>
    1748:	88 0f       	add	r24, r24
    174a:	99 1f       	adc	r25, r25
    174c:	0a 94       	dec	r0
    174e:	e2 f7       	brpl	.-8      	; 0x1748 <DIO_SetPinValue+0xd8>
    1750:	80 95       	com	r24
    1752:	84 23       	and	r24, r20
    1754:	8c 93       	st	X, r24
    1756:	76 c0       	rjmp	.+236    	; 0x1844 <DIO_SetPinValue+0x1d4>
			}
			else if(Value == DIO_HIGH)
    1758:	8b 81       	ldd	r24, Y+3	; 0x03
    175a:	81 30       	cpi	r24, 0x01	; 1
    175c:	09 f0       	breq	.+2      	; 0x1760 <DIO_SetPinValue+0xf0>
    175e:	72 c0       	rjmp	.+228    	; 0x1844 <DIO_SetPinValue+0x1d4>
			{
				SET_BIT(PORTB_REG,Pin);
    1760:	a8 e3       	ldi	r26, 0x38	; 56
    1762:	b0 e0       	ldi	r27, 0x00	; 0
    1764:	e8 e3       	ldi	r30, 0x38	; 56
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	48 2f       	mov	r20, r24
    176c:	8a 81       	ldd	r24, Y+2	; 0x02
    176e:	28 2f       	mov	r18, r24
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	02 2e       	mov	r0, r18
    1778:	02 c0       	rjmp	.+4      	; 0x177e <DIO_SetPinValue+0x10e>
    177a:	88 0f       	add	r24, r24
    177c:	99 1f       	adc	r25, r25
    177e:	0a 94       	dec	r0
    1780:	e2 f7       	brpl	.-8      	; 0x177a <DIO_SetPinValue+0x10a>
    1782:	84 2b       	or	r24, r20
    1784:	8c 93       	st	X, r24
    1786:	5e c0       	rjmp	.+188    	; 0x1844 <DIO_SetPinValue+0x1d4>
			
			break;
			
			
			case PORTC :
			if(Value == DIO_LOW)
    1788:	8b 81       	ldd	r24, Y+3	; 0x03
    178a:	88 23       	and	r24, r24
    178c:	a9 f4       	brne	.+42     	; 0x17b8 <DIO_SetPinValue+0x148>
			{
				CLR_BIT(PORTC_REG,Pin);
    178e:	a5 e3       	ldi	r26, 0x35	; 53
    1790:	b0 e0       	ldi	r27, 0x00	; 0
    1792:	e5 e3       	ldi	r30, 0x35	; 53
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	80 81       	ld	r24, Z
    1798:	48 2f       	mov	r20, r24
    179a:	8a 81       	ldd	r24, Y+2	; 0x02
    179c:	28 2f       	mov	r18, r24
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	02 2e       	mov	r0, r18
    17a6:	02 c0       	rjmp	.+4      	; 0x17ac <DIO_SetPinValue+0x13c>
    17a8:	88 0f       	add	r24, r24
    17aa:	99 1f       	adc	r25, r25
    17ac:	0a 94       	dec	r0
    17ae:	e2 f7       	brpl	.-8      	; 0x17a8 <DIO_SetPinValue+0x138>
    17b0:	80 95       	com	r24
    17b2:	84 23       	and	r24, r20
    17b4:	8c 93       	st	X, r24
    17b6:	46 c0       	rjmp	.+140    	; 0x1844 <DIO_SetPinValue+0x1d4>
			}
			else if(Value == DIO_HIGH)
    17b8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ba:	81 30       	cpi	r24, 0x01	; 1
    17bc:	09 f0       	breq	.+2      	; 0x17c0 <DIO_SetPinValue+0x150>
    17be:	42 c0       	rjmp	.+132    	; 0x1844 <DIO_SetPinValue+0x1d4>
			{
				SET_BIT(PORTC_REG,Pin);
    17c0:	a5 e3       	ldi	r26, 0x35	; 53
    17c2:	b0 e0       	ldi	r27, 0x00	; 0
    17c4:	e5 e3       	ldi	r30, 0x35	; 53
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	80 81       	ld	r24, Z
    17ca:	48 2f       	mov	r20, r24
    17cc:	8a 81       	ldd	r24, Y+2	; 0x02
    17ce:	28 2f       	mov	r18, r24
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	02 2e       	mov	r0, r18
    17d8:	02 c0       	rjmp	.+4      	; 0x17de <DIO_SetPinValue+0x16e>
    17da:	88 0f       	add	r24, r24
    17dc:	99 1f       	adc	r25, r25
    17de:	0a 94       	dec	r0
    17e0:	e2 f7       	brpl	.-8      	; 0x17da <DIO_SetPinValue+0x16a>
    17e2:	84 2b       	or	r24, r20
    17e4:	8c 93       	st	X, r24
    17e6:	2e c0       	rjmp	.+92     	; 0x1844 <DIO_SetPinValue+0x1d4>
			
			break;
			
			
			case PORTD :
			if(Value == DIO_LOW)
    17e8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ea:	88 23       	and	r24, r24
    17ec:	a9 f4       	brne	.+42     	; 0x1818 <DIO_SetPinValue+0x1a8>
			{
				CLR_BIT(PORTD_REG,Pin);
    17ee:	a2 e3       	ldi	r26, 0x32	; 50
    17f0:	b0 e0       	ldi	r27, 0x00	; 0
    17f2:	e2 e3       	ldi	r30, 0x32	; 50
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	48 2f       	mov	r20, r24
    17fa:	8a 81       	ldd	r24, Y+2	; 0x02
    17fc:	28 2f       	mov	r18, r24
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	02 2e       	mov	r0, r18
    1806:	02 c0       	rjmp	.+4      	; 0x180c <DIO_SetPinValue+0x19c>
    1808:	88 0f       	add	r24, r24
    180a:	99 1f       	adc	r25, r25
    180c:	0a 94       	dec	r0
    180e:	e2 f7       	brpl	.-8      	; 0x1808 <DIO_SetPinValue+0x198>
    1810:	80 95       	com	r24
    1812:	84 23       	and	r24, r20
    1814:	8c 93       	st	X, r24
    1816:	16 c0       	rjmp	.+44     	; 0x1844 <DIO_SetPinValue+0x1d4>
			}
			else if(Value == DIO_HIGH)
    1818:	8b 81       	ldd	r24, Y+3	; 0x03
    181a:	81 30       	cpi	r24, 0x01	; 1
    181c:	99 f4       	brne	.+38     	; 0x1844 <DIO_SetPinValue+0x1d4>
			{
				SET_BIT(PORTD_REG,Pin);
    181e:	a2 e3       	ldi	r26, 0x32	; 50
    1820:	b0 e0       	ldi	r27, 0x00	; 0
    1822:	e2 e3       	ldi	r30, 0x32	; 50
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	80 81       	ld	r24, Z
    1828:	48 2f       	mov	r20, r24
    182a:	8a 81       	ldd	r24, Y+2	; 0x02
    182c:	28 2f       	mov	r18, r24
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	02 2e       	mov	r0, r18
    1836:	02 c0       	rjmp	.+4      	; 0x183c <DIO_SetPinValue+0x1cc>
    1838:	88 0f       	add	r24, r24
    183a:	99 1f       	adc	r25, r25
    183c:	0a 94       	dec	r0
    183e:	e2 f7       	brpl	.-8      	; 0x1838 <DIO_SetPinValue+0x1c8>
    1840:	84 2b       	or	r24, r20
    1842:	8c 93       	st	X, r24
			
			default :
			
			break;
		}
		}
    1844:	0f 90       	pop	r0
    1846:	0f 90       	pop	r0
    1848:	0f 90       	pop	r0
    184a:	0f 90       	pop	r0
    184c:	0f 90       	pop	r0
    184e:	cf 91       	pop	r28
    1850:	df 91       	pop	r29
    1852:	08 95       	ret

00001854 <DIO_GetPinValue>:
	
	u8 DIO_GetPinValue  (u8 Port, u8 pin)
	{
    1854:	df 93       	push	r29
    1856:	cf 93       	push	r28
    1858:	00 d0       	rcall	.+0      	; 0x185a <DIO_GetPinValue+0x6>
    185a:	00 d0       	rcall	.+0      	; 0x185c <DIO_GetPinValue+0x8>
    185c:	00 d0       	rcall	.+0      	; 0x185e <DIO_GetPinValue+0xa>
    185e:	cd b7       	in	r28, 0x3d	; 61
    1860:	de b7       	in	r29, 0x3e	; 62
    1862:	89 83       	std	Y+1, r24	; 0x01
    1864:	6a 83       	std	Y+2, r22	; 0x02
			switch(Port)
    1866:	89 81       	ldd	r24, Y+1	; 0x01
    1868:	28 2f       	mov	r18, r24
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	3d 83       	std	Y+5, r19	; 0x05
    186e:	2c 83       	std	Y+4, r18	; 0x04
    1870:	4c 81       	ldd	r20, Y+4	; 0x04
    1872:	5d 81       	ldd	r21, Y+5	; 0x05
    1874:	41 30       	cpi	r20, 0x01	; 1
    1876:	51 05       	cpc	r21, r1
    1878:	49 f1       	breq	.+82     	; 0x18cc <DIO_GetPinValue+0x78>
    187a:	8c 81       	ldd	r24, Y+4	; 0x04
    187c:	9d 81       	ldd	r25, Y+5	; 0x05
    187e:	82 30       	cpi	r24, 0x02	; 2
    1880:	91 05       	cpc	r25, r1
    1882:	34 f4       	brge	.+12     	; 0x1890 <DIO_GetPinValue+0x3c>
    1884:	2c 81       	ldd	r18, Y+4	; 0x04
    1886:	3d 81       	ldd	r19, Y+5	; 0x05
    1888:	21 15       	cp	r18, r1
    188a:	31 05       	cpc	r19, r1
    188c:	61 f0       	breq	.+24     	; 0x18a6 <DIO_GetPinValue+0x52>
    188e:	57 c0       	rjmp	.+174    	; 0x193e <DIO_GetPinValue+0xea>
    1890:	4c 81       	ldd	r20, Y+4	; 0x04
    1892:	5d 81       	ldd	r21, Y+5	; 0x05
    1894:	42 30       	cpi	r20, 0x02	; 2
    1896:	51 05       	cpc	r21, r1
    1898:	61 f1       	breq	.+88     	; 0x18f2 <DIO_GetPinValue+0x9e>
    189a:	8c 81       	ldd	r24, Y+4	; 0x04
    189c:	9d 81       	ldd	r25, Y+5	; 0x05
    189e:	83 30       	cpi	r24, 0x03	; 3
    18a0:	91 05       	cpc	r25, r1
    18a2:	d1 f1       	breq	.+116    	; 0x1918 <DIO_GetPinValue+0xc4>
    18a4:	4c c0       	rjmp	.+152    	; 0x193e <DIO_GetPinValue+0xea>
			{
				case PORTA :
				return GET_BIT(PINA_REG,pin);
    18a6:	e9 e3       	ldi	r30, 0x39	; 57
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	80 81       	ld	r24, Z
    18ac:	28 2f       	mov	r18, r24
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	8a 81       	ldd	r24, Y+2	; 0x02
    18b2:	88 2f       	mov	r24, r24
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	a9 01       	movw	r20, r18
    18b8:	02 c0       	rjmp	.+4      	; 0x18be <DIO_GetPinValue+0x6a>
    18ba:	55 95       	asr	r21
    18bc:	47 95       	ror	r20
    18be:	8a 95       	dec	r24
    18c0:	e2 f7       	brpl	.-8      	; 0x18ba <DIO_GetPinValue+0x66>
    18c2:	ca 01       	movw	r24, r20
    18c4:	58 2f       	mov	r21, r24
    18c6:	51 70       	andi	r21, 0x01	; 1
    18c8:	5b 83       	std	Y+3, r21	; 0x03
    18ca:	3a c0       	rjmp	.+116    	; 0x1940 <DIO_GetPinValue+0xec>
				break;
				
				
				case PORTB :	
				return GET_BIT(PINB_REG,pin);
    18cc:	e6 e3       	ldi	r30, 0x36	; 54
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	28 2f       	mov	r18, r24
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	8a 81       	ldd	r24, Y+2	; 0x02
    18d8:	88 2f       	mov	r24, r24
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	a9 01       	movw	r20, r18
    18de:	02 c0       	rjmp	.+4      	; 0x18e4 <DIO_GetPinValue+0x90>
    18e0:	55 95       	asr	r21
    18e2:	47 95       	ror	r20
    18e4:	8a 95       	dec	r24
    18e6:	e2 f7       	brpl	.-8      	; 0x18e0 <DIO_GetPinValue+0x8c>
    18e8:	ca 01       	movw	r24, r20
    18ea:	58 2f       	mov	r21, r24
    18ec:	51 70       	andi	r21, 0x01	; 1
    18ee:	5b 83       	std	Y+3, r21	; 0x03
    18f0:	27 c0       	rjmp	.+78     	; 0x1940 <DIO_GetPinValue+0xec>
				break;
				
				
				case PORTC :
				return GET_BIT(PINC_REG,pin);
    18f2:	e3 e3       	ldi	r30, 0x33	; 51
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	80 81       	ld	r24, Z
    18f8:	28 2f       	mov	r18, r24
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	8a 81       	ldd	r24, Y+2	; 0x02
    18fe:	88 2f       	mov	r24, r24
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	a9 01       	movw	r20, r18
    1904:	02 c0       	rjmp	.+4      	; 0x190a <DIO_GetPinValue+0xb6>
    1906:	55 95       	asr	r21
    1908:	47 95       	ror	r20
    190a:	8a 95       	dec	r24
    190c:	e2 f7       	brpl	.-8      	; 0x1906 <DIO_GetPinValue+0xb2>
    190e:	ca 01       	movw	r24, r20
    1910:	58 2f       	mov	r21, r24
    1912:	51 70       	andi	r21, 0x01	; 1
    1914:	5b 83       	std	Y+3, r21	; 0x03
    1916:	14 c0       	rjmp	.+40     	; 0x1940 <DIO_GetPinValue+0xec>
				break;
				
				
				case PORTD :
				return GET_BIT(PIND_REG,pin);
    1918:	e0 e3       	ldi	r30, 0x30	; 48
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	80 81       	ld	r24, Z
    191e:	28 2f       	mov	r18, r24
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	8a 81       	ldd	r24, Y+2	; 0x02
    1924:	88 2f       	mov	r24, r24
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	a9 01       	movw	r20, r18
    192a:	02 c0       	rjmp	.+4      	; 0x1930 <DIO_GetPinValue+0xdc>
    192c:	55 95       	asr	r21
    192e:	47 95       	ror	r20
    1930:	8a 95       	dec	r24
    1932:	e2 f7       	brpl	.-8      	; 0x192c <DIO_GetPinValue+0xd8>
    1934:	ca 01       	movw	r24, r20
    1936:	58 2f       	mov	r21, r24
    1938:	51 70       	andi	r21, 0x01	; 1
    193a:	5b 83       	std	Y+3, r21	; 0x03
    193c:	01 c0       	rjmp	.+2      	; 0x1940 <DIO_GetPinValue+0xec>
    193e:	02 c0       	rjmp	.+4      	; 0x1944 <DIO_GetPinValue+0xf0>
				default :
				
				break;
				
			}
	}
    1940:	8b 81       	ldd	r24, Y+3	; 0x03
    1942:	8e 83       	std	Y+6, r24	; 0x06
    1944:	8e 81       	ldd	r24, Y+6	; 0x06
    1946:	26 96       	adiw	r28, 0x06	; 6
    1948:	0f b6       	in	r0, 0x3f	; 63
    194a:	f8 94       	cli
    194c:	de bf       	out	0x3e, r29	; 62
    194e:	0f be       	out	0x3f, r0	; 63
    1950:	cd bf       	out	0x3d, r28	; 61
    1952:	cf 91       	pop	r28
    1954:	df 91       	pop	r29
    1956:	08 95       	ret

00001958 <DIO_SetPortDirection>:
			
			void DIO_SetPortDirection(u8 Port, u8 Direction)
			{
    1958:	df 93       	push	r29
    195a:	cf 93       	push	r28
    195c:	00 d0       	rcall	.+0      	; 0x195e <DIO_SetPortDirection+0x6>
    195e:	00 d0       	rcall	.+0      	; 0x1960 <DIO_SetPortDirection+0x8>
    1960:	cd b7       	in	r28, 0x3d	; 61
    1962:	de b7       	in	r29, 0x3e	; 62
    1964:	89 83       	std	Y+1, r24	; 0x01
    1966:	6a 83       	std	Y+2, r22	; 0x02
				switch(Port)
    1968:	89 81       	ldd	r24, Y+1	; 0x01
    196a:	28 2f       	mov	r18, r24
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	3c 83       	std	Y+4, r19	; 0x04
    1970:	2b 83       	std	Y+3, r18	; 0x03
    1972:	8b 81       	ldd	r24, Y+3	; 0x03
    1974:	9c 81       	ldd	r25, Y+4	; 0x04
    1976:	81 30       	cpi	r24, 0x01	; 1
    1978:	91 05       	cpc	r25, r1
    197a:	d1 f0       	breq	.+52     	; 0x19b0 <DIO_SetPortDirection+0x58>
    197c:	2b 81       	ldd	r18, Y+3	; 0x03
    197e:	3c 81       	ldd	r19, Y+4	; 0x04
    1980:	22 30       	cpi	r18, 0x02	; 2
    1982:	31 05       	cpc	r19, r1
    1984:	2c f4       	brge	.+10     	; 0x1990 <DIO_SetPortDirection+0x38>
    1986:	8b 81       	ldd	r24, Y+3	; 0x03
    1988:	9c 81       	ldd	r25, Y+4	; 0x04
    198a:	00 97       	sbiw	r24, 0x00	; 0
    198c:	61 f0       	breq	.+24     	; 0x19a6 <DIO_SetPortDirection+0x4e>
    198e:	1e c0       	rjmp	.+60     	; 0x19cc <DIO_SetPortDirection+0x74>
    1990:	2b 81       	ldd	r18, Y+3	; 0x03
    1992:	3c 81       	ldd	r19, Y+4	; 0x04
    1994:	22 30       	cpi	r18, 0x02	; 2
    1996:	31 05       	cpc	r19, r1
    1998:	81 f0       	breq	.+32     	; 0x19ba <DIO_SetPortDirection+0x62>
    199a:	8b 81       	ldd	r24, Y+3	; 0x03
    199c:	9c 81       	ldd	r25, Y+4	; 0x04
    199e:	83 30       	cpi	r24, 0x03	; 3
    19a0:	91 05       	cpc	r25, r1
    19a2:	81 f0       	breq	.+32     	; 0x19c4 <DIO_SetPortDirection+0x6c>
    19a4:	13 c0       	rjmp	.+38     	; 0x19cc <DIO_SetPortDirection+0x74>
				{
				case PORTA : DDRA_REG = Direction; break;
    19a6:	ea e3       	ldi	r30, 0x3A	; 58
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	8a 81       	ldd	r24, Y+2	; 0x02
    19ac:	80 83       	st	Z, r24
    19ae:	0e c0       	rjmp	.+28     	; 0x19cc <DIO_SetPortDirection+0x74>
				case PORTB : DDRB_REG = Direction; break;
    19b0:	e7 e3       	ldi	r30, 0x37	; 55
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	8a 81       	ldd	r24, Y+2	; 0x02
    19b6:	80 83       	st	Z, r24
    19b8:	09 c0       	rjmp	.+18     	; 0x19cc <DIO_SetPortDirection+0x74>
				case PORTC : DDRC_REG = Direction; break;
    19ba:	e4 e3       	ldi	r30, 0x34	; 52
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	8a 81       	ldd	r24, Y+2	; 0x02
    19c0:	80 83       	st	Z, r24
    19c2:	04 c0       	rjmp	.+8      	; 0x19cc <DIO_SetPortDirection+0x74>
				case PORTD : DDRD_REG = Direction; break;
    19c4:	e1 e3       	ldi	r30, 0x31	; 49
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ca:	80 83       	st	Z, r24
				default : break;
			}
			}
    19cc:	0f 90       	pop	r0
    19ce:	0f 90       	pop	r0
    19d0:	0f 90       	pop	r0
    19d2:	0f 90       	pop	r0
    19d4:	cf 91       	pop	r28
    19d6:	df 91       	pop	r29
    19d8:	08 95       	ret

000019da <DIO_SetPortValue>:
			void DIO_SetPortValue(u8 Port, u8 Value)
			{
    19da:	df 93       	push	r29
    19dc:	cf 93       	push	r28
    19de:	00 d0       	rcall	.+0      	; 0x19e0 <DIO_SetPortValue+0x6>
    19e0:	00 d0       	rcall	.+0      	; 0x19e2 <DIO_SetPortValue+0x8>
    19e2:	cd b7       	in	r28, 0x3d	; 61
    19e4:	de b7       	in	r29, 0x3e	; 62
    19e6:	89 83       	std	Y+1, r24	; 0x01
    19e8:	6a 83       	std	Y+2, r22	; 0x02

				switch(Port)
    19ea:	89 81       	ldd	r24, Y+1	; 0x01
    19ec:	28 2f       	mov	r18, r24
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	3c 83       	std	Y+4, r19	; 0x04
    19f2:	2b 83       	std	Y+3, r18	; 0x03
    19f4:	8b 81       	ldd	r24, Y+3	; 0x03
    19f6:	9c 81       	ldd	r25, Y+4	; 0x04
    19f8:	81 30       	cpi	r24, 0x01	; 1
    19fa:	91 05       	cpc	r25, r1
    19fc:	d1 f0       	breq	.+52     	; 0x1a32 <DIO_SetPortValue+0x58>
    19fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1a00:	3c 81       	ldd	r19, Y+4	; 0x04
    1a02:	22 30       	cpi	r18, 0x02	; 2
    1a04:	31 05       	cpc	r19, r1
    1a06:	2c f4       	brge	.+10     	; 0x1a12 <DIO_SetPortValue+0x38>
    1a08:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a0c:	00 97       	sbiw	r24, 0x00	; 0
    1a0e:	61 f0       	breq	.+24     	; 0x1a28 <DIO_SetPortValue+0x4e>
    1a10:	1e c0       	rjmp	.+60     	; 0x1a4e <DIO_SetPortValue+0x74>
    1a12:	2b 81       	ldd	r18, Y+3	; 0x03
    1a14:	3c 81       	ldd	r19, Y+4	; 0x04
    1a16:	22 30       	cpi	r18, 0x02	; 2
    1a18:	31 05       	cpc	r19, r1
    1a1a:	81 f0       	breq	.+32     	; 0x1a3c <DIO_SetPortValue+0x62>
    1a1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a20:	83 30       	cpi	r24, 0x03	; 3
    1a22:	91 05       	cpc	r25, r1
    1a24:	81 f0       	breq	.+32     	; 0x1a46 <DIO_SetPortValue+0x6c>
    1a26:	13 c0       	rjmp	.+38     	; 0x1a4e <DIO_SetPortValue+0x74>
				{
				case PORTA : PORTA_REG = Value; break;
    1a28:	eb e3       	ldi	r30, 0x3B	; 59
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2e:	80 83       	st	Z, r24
    1a30:	0e c0       	rjmp	.+28     	; 0x1a4e <DIO_SetPortValue+0x74>
				case PORTB : PORTB_REG = Value; break;
    1a32:	e8 e3       	ldi	r30, 0x38	; 56
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	8a 81       	ldd	r24, Y+2	; 0x02
    1a38:	80 83       	st	Z, r24
    1a3a:	09 c0       	rjmp	.+18     	; 0x1a4e <DIO_SetPortValue+0x74>
				case PORTC : PORTC_REG = Value; break;
    1a3c:	e5 e3       	ldi	r30, 0x35	; 53
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	8a 81       	ldd	r24, Y+2	; 0x02
    1a42:	80 83       	st	Z, r24
    1a44:	04 c0       	rjmp	.+8      	; 0x1a4e <DIO_SetPortValue+0x74>
				case PORTD : PORTD_REG = Value; break;
    1a46:	e2 e3       	ldi	r30, 0x32	; 50
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4c:	80 83       	st	Z, r24
				default : break;
				}
			}
    1a4e:	0f 90       	pop	r0
    1a50:	0f 90       	pop	r0
    1a52:	0f 90       	pop	r0
    1a54:	0f 90       	pop	r0
    1a56:	cf 91       	pop	r28
    1a58:	df 91       	pop	r29
    1a5a:	08 95       	ret

00001a5c <MADC_voidInit>:
#include "ADC_interface.h"
#include "ADC_private.h"
#include "ADC_config.h"

void MADC_voidInit(void)
{
    1a5c:	df 93       	push	r29
    1a5e:	cf 93       	push	r28
    1a60:	cd b7       	in	r28, 0x3d	; 61
    1a62:	de b7       	in	r29, 0x3e	; 62
	/* Select AVCC reference voltage */
	SET_BIT(ADMUX,ADMUX_REFS0);
    1a64:	a7 e2       	ldi	r26, 0x27	; 39
    1a66:	b0 e0       	ldi	r27, 0x00	; 0
    1a68:	e7 e2       	ldi	r30, 0x27	; 39
    1a6a:	f0 e0       	ldi	r31, 0x00	; 0
    1a6c:	80 81       	ld	r24, Z
    1a6e:	80 64       	ori	r24, 0x40	; 64
    1a70:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,ADMUX_REFS1);
    1a72:	a7 e2       	ldi	r26, 0x27	; 39
    1a74:	b0 e0       	ldi	r27, 0x00	; 0
    1a76:	e7 e2       	ldi	r30, 0x27	; 39
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	80 81       	ld	r24, Z
    1a7c:	8f 77       	andi	r24, 0x7F	; 127
    1a7e:	8c 93       	st	X, r24

	/*Activate Left adjust result(8 bit resolution)*/
	//SET_BIT(ADMUX,ADMUX_ADLAR);

	ADCSRA &= 0b11111000;			/*Clear first 3 bits in adcsra register*/
    1a80:	a6 e2       	ldi	r26, 0x26	; 38
    1a82:	b0 e0       	ldi	r27, 0x00	; 0
    1a84:	e6 e2       	ldi	r30, 0x26	; 38
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	80 81       	ld	r24, Z
    1a8a:	88 7f       	andi	r24, 0xF8	; 248
    1a8c:	8c 93       	st	X, r24
	ADCSRA |= ADC_u8PRESCALER;		/*set the required configuration*/
    1a8e:	a6 e2       	ldi	r26, 0x26	; 38
    1a90:	b0 e0       	ldi	r27, 0x00	; 0
    1a92:	e6 e2       	ldi	r30, 0x26	; 38
    1a94:	f0 e0       	ldi	r31, 0x00	; 0
    1a96:	80 81       	ld	r24, Z
    1a98:	87 60       	ori	r24, 0x07	; 7
    1a9a:	8c 93       	st	X, r24

	/*Enable ADC peripheral*/
	SET_BIT(ADCSRA,ADCSRA_ADEN);
    1a9c:	a6 e2       	ldi	r26, 0x26	; 38
    1a9e:	b0 e0       	ldi	r27, 0x00	; 0
    1aa0:	e6 e2       	ldi	r30, 0x26	; 38
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	80 81       	ld	r24, Z
    1aa6:	80 68       	ori	r24, 0x80	; 128
    1aa8:	8c 93       	st	X, r24
}
    1aaa:	cf 91       	pop	r28
    1aac:	df 91       	pop	r29
    1aae:	08 95       	ret

00001ab0 <MADC_u8StartConversion>:

u16 MADC_u8StartConversion(u8 Copy_u8Channel)
{
    1ab0:	df 93       	push	r29
    1ab2:	cf 93       	push	r28
    1ab4:	0f 92       	push	r0
    1ab6:	cd b7       	in	r28, 0x3d	; 61
    1ab8:	de b7       	in	r29, 0x3e	; 62
    1aba:	89 83       	std	Y+1, r24	; 0x01
	/*Clear first 5 bits in ADMUX register*/
	ADMUX &= 0b11100000;
    1abc:	a7 e2       	ldi	r26, 0x27	; 39
    1abe:	b0 e0       	ldi	r27, 0x00	; 0
    1ac0:	e7 e2       	ldi	r30, 0x27	; 39
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	80 81       	ld	r24, Z
    1ac6:	80 7e       	andi	r24, 0xE0	; 224
    1ac8:	8c 93       	st	X, r24

	/*set required channel*/
	ADMUX |= Copy_u8Channel;
    1aca:	a7 e2       	ldi	r26, 0x27	; 39
    1acc:	b0 e0       	ldi	r27, 0x00	; 0
    1ace:	e7 e2       	ldi	r30, 0x27	; 39
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	90 81       	ld	r25, Z
    1ad4:	89 81       	ldd	r24, Y+1	; 0x01
    1ad6:	89 2b       	or	r24, r25
    1ad8:	8c 93       	st	X, r24

	/*Start conversion*/
	SET_BIT(ADCSRA,ADCSRA_ADSC);
    1ada:	a6 e2       	ldi	r26, 0x26	; 38
    1adc:	b0 e0       	ldi	r27, 0x00	; 0
    1ade:	e6 e2       	ldi	r30, 0x26	; 38
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	80 81       	ld	r24, Z
    1ae4:	80 64       	ori	r24, 0x40	; 64
    1ae6:	8c 93       	st	X, r24

	/*Busy waiting (polling) until the conversion is complete*/
	while((GET_BIT(ADCSRA,ADCSRA_ADIF))==0);
    1ae8:	e6 e2       	ldi	r30, 0x26	; 38
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	80 81       	ld	r24, Z
    1aee:	82 95       	swap	r24
    1af0:	8f 70       	andi	r24, 0x0F	; 15
    1af2:	88 2f       	mov	r24, r24
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	81 70       	andi	r24, 0x01	; 1
    1af8:	90 70       	andi	r25, 0x00	; 0
    1afa:	00 97       	sbiw	r24, 0x00	; 0
    1afc:	a9 f3       	breq	.-22     	; 0x1ae8 <MADC_u8StartConversion+0x38>

	/*clear the interrupt flag*/
	SET_BIT(ADCSRA,ADCSRA_ADIF);
    1afe:	a6 e2       	ldi	r26, 0x26	; 38
    1b00:	b0 e0       	ldi	r27, 0x00	; 0
    1b02:	e6 e2       	ldi	r30, 0x26	; 38
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	80 81       	ld	r24, Z
    1b08:	80 61       	ori	r24, 0x10	; 16
    1b0a:	8c 93       	st	X, r24

	return ADC;
    1b0c:	e4 e2       	ldi	r30, 0x24	; 36
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	80 81       	ld	r24, Z
    1b12:	91 81       	ldd	r25, Z+1	; 0x01
}
    1b14:	0f 90       	pop	r0
    1b16:	cf 91       	pop	r28
    1b18:	df 91       	pop	r29
    1b1a:	08 95       	ret

00001b1c <LCD_Init>:

}
#elif CONNECTION==_4_PINS
 u8 init_flag = 0;
void LCD_Init(void)
{
    1b1c:	df 93       	push	r29
    1b1e:	cf 93       	push	r28
    1b20:	cd b7       	in	r28, 0x3d	; 61
    1b22:	de b7       	in	r29, 0x3e	; 62
    1b24:	e8 97       	sbiw	r28, 0x38	; 56
    1b26:	0f b6       	in	r0, 0x3f	; 63
    1b28:	f8 94       	cli
    1b2a:	de bf       	out	0x3e, r29	; 62
    1b2c:	0f be       	out	0x3f, r0	; 63
    1b2e:	cd bf       	out	0x3d, r28	; 61
	DIO_SetPinDirection(GPORT,RS,DIO_OUTPUT);
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	61 e0       	ldi	r22, 0x01	; 1
    1b34:	41 e0       	ldi	r20, 0x01	; 1
    1b36:	0e 94 46 0a 	call	0x148c	; 0x148c <DIO_SetPinDirection>
	DIO_SetPinDirection(GPORT,RW,DIO_OUTPUT);
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	67 e0       	ldi	r22, 0x07	; 7
    1b3e:	41 e0       	ldi	r20, 0x01	; 1
    1b40:	0e 94 46 0a 	call	0x148c	; 0x148c <DIO_SetPinDirection>
	DIO_SetPinDirection(GPORT,EN,DIO_OUTPUT);
    1b44:	81 e0       	ldi	r24, 0x01	; 1
    1b46:	62 e0       	ldi	r22, 0x02	; 2
    1b48:	41 e0       	ldi	r20, 0x01	; 1
    1b4a:	0e 94 46 0a 	call	0x148c	; 0x148c <DIO_SetPinDirection>
	DIO_SetPortDirection(LCD_PORT,LAST_4OUTPUT);
    1b4e:	80 e0       	ldi	r24, 0x00	; 0
    1b50:	60 ef       	ldi	r22, 0xF0	; 240
    1b52:	0e 94 ac 0c 	call	0x1958	; 0x1958 <DIO_SetPortDirection>
    1b56:	80 e0       	ldi	r24, 0x00	; 0
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	a8 ec       	ldi	r26, 0xC8	; 200
    1b5c:	b2 e4       	ldi	r27, 0x42	; 66
    1b5e:	8d ab       	std	Y+53, r24	; 0x35
    1b60:	9e ab       	std	Y+54, r25	; 0x36
    1b62:	af ab       	std	Y+55, r26	; 0x37
    1b64:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b66:	6d a9       	ldd	r22, Y+53	; 0x35
    1b68:	7e a9       	ldd	r23, Y+54	; 0x36
    1b6a:	8f a9       	ldd	r24, Y+55	; 0x37
    1b6c:	98 ad       	ldd	r25, Y+56	; 0x38
    1b6e:	20 e0       	ldi	r18, 0x00	; 0
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	4a ef       	ldi	r20, 0xFA	; 250
    1b74:	54 e4       	ldi	r21, 0x44	; 68
    1b76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b7a:	dc 01       	movw	r26, r24
    1b7c:	cb 01       	movw	r24, r22
    1b7e:	89 ab       	std	Y+49, r24	; 0x31
    1b80:	9a ab       	std	Y+50, r25	; 0x32
    1b82:	ab ab       	std	Y+51, r26	; 0x33
    1b84:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b86:	69 a9       	ldd	r22, Y+49	; 0x31
    1b88:	7a a9       	ldd	r23, Y+50	; 0x32
    1b8a:	8b a9       	ldd	r24, Y+51	; 0x33
    1b8c:	9c a9       	ldd	r25, Y+52	; 0x34
    1b8e:	20 e0       	ldi	r18, 0x00	; 0
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	40 e8       	ldi	r20, 0x80	; 128
    1b94:	5f e3       	ldi	r21, 0x3F	; 63
    1b96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b9a:	88 23       	and	r24, r24
    1b9c:	2c f4       	brge	.+10     	; 0x1ba8 <LCD_Init+0x8c>
		__ticks = 1;
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	98 ab       	std	Y+48, r25	; 0x30
    1ba4:	8f a7       	std	Y+47, r24	; 0x2f
    1ba6:	3f c0       	rjmp	.+126    	; 0x1c26 <LCD_Init+0x10a>
	else if (__tmp > 65535)
    1ba8:	69 a9       	ldd	r22, Y+49	; 0x31
    1baa:	7a a9       	ldd	r23, Y+50	; 0x32
    1bac:	8b a9       	ldd	r24, Y+51	; 0x33
    1bae:	9c a9       	ldd	r25, Y+52	; 0x34
    1bb0:	20 e0       	ldi	r18, 0x00	; 0
    1bb2:	3f ef       	ldi	r19, 0xFF	; 255
    1bb4:	4f e7       	ldi	r20, 0x7F	; 127
    1bb6:	57 e4       	ldi	r21, 0x47	; 71
    1bb8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bbc:	18 16       	cp	r1, r24
    1bbe:	4c f5       	brge	.+82     	; 0x1c12 <LCD_Init+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bc0:	6d a9       	ldd	r22, Y+53	; 0x35
    1bc2:	7e a9       	ldd	r23, Y+54	; 0x36
    1bc4:	8f a9       	ldd	r24, Y+55	; 0x37
    1bc6:	98 ad       	ldd	r25, Y+56	; 0x38
    1bc8:	20 e0       	ldi	r18, 0x00	; 0
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	40 e2       	ldi	r20, 0x20	; 32
    1bce:	51 e4       	ldi	r21, 0x41	; 65
    1bd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd4:	dc 01       	movw	r26, r24
    1bd6:	cb 01       	movw	r24, r22
    1bd8:	bc 01       	movw	r22, r24
    1bda:	cd 01       	movw	r24, r26
    1bdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be0:	dc 01       	movw	r26, r24
    1be2:	cb 01       	movw	r24, r22
    1be4:	98 ab       	std	Y+48, r25	; 0x30
    1be6:	8f a7       	std	Y+47, r24	; 0x2f
    1be8:	0f c0       	rjmp	.+30     	; 0x1c08 <LCD_Init+0xec>
    1bea:	88 ec       	ldi	r24, 0xC8	; 200
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	9e a7       	std	Y+46, r25	; 0x2e
    1bf0:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1bf2:	8d a5       	ldd	r24, Y+45	; 0x2d
    1bf4:	9e a5       	ldd	r25, Y+46	; 0x2e
    1bf6:	01 97       	sbiw	r24, 0x01	; 1
    1bf8:	f1 f7       	brne	.-4      	; 0x1bf6 <LCD_Init+0xda>
    1bfa:	9e a7       	std	Y+46, r25	; 0x2e
    1bfc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bfe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c00:	98 a9       	ldd	r25, Y+48	; 0x30
    1c02:	01 97       	sbiw	r24, 0x01	; 1
    1c04:	98 ab       	std	Y+48, r25	; 0x30
    1c06:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c08:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c0a:	98 a9       	ldd	r25, Y+48	; 0x30
    1c0c:	00 97       	sbiw	r24, 0x00	; 0
    1c0e:	69 f7       	brne	.-38     	; 0x1bea <LCD_Init+0xce>
    1c10:	14 c0       	rjmp	.+40     	; 0x1c3a <LCD_Init+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c12:	69 a9       	ldd	r22, Y+49	; 0x31
    1c14:	7a a9       	ldd	r23, Y+50	; 0x32
    1c16:	8b a9       	ldd	r24, Y+51	; 0x33
    1c18:	9c a9       	ldd	r25, Y+52	; 0x34
    1c1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c1e:	dc 01       	movw	r26, r24
    1c20:	cb 01       	movw	r24, r22
    1c22:	98 ab       	std	Y+48, r25	; 0x30
    1c24:	8f a7       	std	Y+47, r24	; 0x2f
    1c26:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c28:	98 a9       	ldd	r25, Y+48	; 0x30
    1c2a:	9c a7       	std	Y+44, r25	; 0x2c
    1c2c:	8b a7       	std	Y+43, r24	; 0x2b
    1c2e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c30:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c32:	01 97       	sbiw	r24, 0x01	; 1
    1c34:	f1 f7       	brne	.-4      	; 0x1c32 <LCD_Init+0x116>
    1c36:	9c a7       	std	Y+44, r25	; 0x2c
    1c38:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(100);
	LCD_WriteCommand(0x20);
    1c3a:	80 e2       	ldi	r24, 0x20	; 32
    1c3c:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <LCD_WriteCommand>
	LCD_WriteCommand(0x20);
    1c40:	80 e2       	ldi	r24, 0x20	; 32
    1c42:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <LCD_WriteCommand>
	LCD_WriteCommand(function_set_2Lines);
    1c46:	80 e8       	ldi	r24, 0x80	; 128
    1c48:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <LCD_WriteCommand>
	init_flag =1 ;
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	80 93 6a 02 	sts	0x026A, r24
    1c52:	80 e0       	ldi	r24, 0x00	; 0
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	a0 e8       	ldi	r26, 0x80	; 128
    1c58:	bf e3       	ldi	r27, 0x3F	; 63
    1c5a:	8f a3       	std	Y+39, r24	; 0x27
    1c5c:	98 a7       	std	Y+40, r25	; 0x28
    1c5e:	a9 a7       	std	Y+41, r26	; 0x29
    1c60:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c62:	6f a1       	ldd	r22, Y+39	; 0x27
    1c64:	78 a5       	ldd	r23, Y+40	; 0x28
    1c66:	89 a5       	ldd	r24, Y+41	; 0x29
    1c68:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	4a ef       	ldi	r20, 0xFA	; 250
    1c70:	54 e4       	ldi	r21, 0x44	; 68
    1c72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c76:	dc 01       	movw	r26, r24
    1c78:	cb 01       	movw	r24, r22
    1c7a:	8b a3       	std	Y+35, r24	; 0x23
    1c7c:	9c a3       	std	Y+36, r25	; 0x24
    1c7e:	ad a3       	std	Y+37, r26	; 0x25
    1c80:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c82:	6b a1       	ldd	r22, Y+35	; 0x23
    1c84:	7c a1       	ldd	r23, Y+36	; 0x24
    1c86:	8d a1       	ldd	r24, Y+37	; 0x25
    1c88:	9e a1       	ldd	r25, Y+38	; 0x26
    1c8a:	20 e0       	ldi	r18, 0x00	; 0
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	40 e8       	ldi	r20, 0x80	; 128
    1c90:	5f e3       	ldi	r21, 0x3F	; 63
    1c92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c96:	88 23       	and	r24, r24
    1c98:	2c f4       	brge	.+10     	; 0x1ca4 <LCD_Init+0x188>
		__ticks = 1;
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	9a a3       	std	Y+34, r25	; 0x22
    1ca0:	89 a3       	std	Y+33, r24	; 0x21
    1ca2:	3f c0       	rjmp	.+126    	; 0x1d22 <LCD_Init+0x206>
	else if (__tmp > 65535)
    1ca4:	6b a1       	ldd	r22, Y+35	; 0x23
    1ca6:	7c a1       	ldd	r23, Y+36	; 0x24
    1ca8:	8d a1       	ldd	r24, Y+37	; 0x25
    1caa:	9e a1       	ldd	r25, Y+38	; 0x26
    1cac:	20 e0       	ldi	r18, 0x00	; 0
    1cae:	3f ef       	ldi	r19, 0xFF	; 255
    1cb0:	4f e7       	ldi	r20, 0x7F	; 127
    1cb2:	57 e4       	ldi	r21, 0x47	; 71
    1cb4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cb8:	18 16       	cp	r1, r24
    1cba:	4c f5       	brge	.+82     	; 0x1d0e <LCD_Init+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cbc:	6f a1       	ldd	r22, Y+39	; 0x27
    1cbe:	78 a5       	ldd	r23, Y+40	; 0x28
    1cc0:	89 a5       	ldd	r24, Y+41	; 0x29
    1cc2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	40 e2       	ldi	r20, 0x20	; 32
    1cca:	51 e4       	ldi	r21, 0x41	; 65
    1ccc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd0:	dc 01       	movw	r26, r24
    1cd2:	cb 01       	movw	r24, r22
    1cd4:	bc 01       	movw	r22, r24
    1cd6:	cd 01       	movw	r24, r26
    1cd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cdc:	dc 01       	movw	r26, r24
    1cde:	cb 01       	movw	r24, r22
    1ce0:	9a a3       	std	Y+34, r25	; 0x22
    1ce2:	89 a3       	std	Y+33, r24	; 0x21
    1ce4:	0f c0       	rjmp	.+30     	; 0x1d04 <LCD_Init+0x1e8>
    1ce6:	88 ec       	ldi	r24, 0xC8	; 200
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	98 a3       	std	Y+32, r25	; 0x20
    1cec:	8f 8f       	std	Y+31, r24	; 0x1f
    1cee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1cf0:	98 a1       	ldd	r25, Y+32	; 0x20
    1cf2:	01 97       	sbiw	r24, 0x01	; 1
    1cf4:	f1 f7       	brne	.-4      	; 0x1cf2 <LCD_Init+0x1d6>
    1cf6:	98 a3       	std	Y+32, r25	; 0x20
    1cf8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cfa:	89 a1       	ldd	r24, Y+33	; 0x21
    1cfc:	9a a1       	ldd	r25, Y+34	; 0x22
    1cfe:	01 97       	sbiw	r24, 0x01	; 1
    1d00:	9a a3       	std	Y+34, r25	; 0x22
    1d02:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d04:	89 a1       	ldd	r24, Y+33	; 0x21
    1d06:	9a a1       	ldd	r25, Y+34	; 0x22
    1d08:	00 97       	sbiw	r24, 0x00	; 0
    1d0a:	69 f7       	brne	.-38     	; 0x1ce6 <LCD_Init+0x1ca>
    1d0c:	14 c0       	rjmp	.+40     	; 0x1d36 <LCD_Init+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d0e:	6b a1       	ldd	r22, Y+35	; 0x23
    1d10:	7c a1       	ldd	r23, Y+36	; 0x24
    1d12:	8d a1       	ldd	r24, Y+37	; 0x25
    1d14:	9e a1       	ldd	r25, Y+38	; 0x26
    1d16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d1a:	dc 01       	movw	r26, r24
    1d1c:	cb 01       	movw	r24, r22
    1d1e:	9a a3       	std	Y+34, r25	; 0x22
    1d20:	89 a3       	std	Y+33, r24	; 0x21
    1d22:	89 a1       	ldd	r24, Y+33	; 0x21
    1d24:	9a a1       	ldd	r25, Y+34	; 0x22
    1d26:	9e 8f       	std	Y+30, r25	; 0x1e
    1d28:	8d 8f       	std	Y+29, r24	; 0x1d
    1d2a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d2c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d2e:	01 97       	sbiw	r24, 0x01	; 1
    1d30:	f1 f7       	brne	.-4      	; 0x1d2e <LCD_Init+0x212>
    1d32:	9e 8f       	std	Y+30, r25	; 0x1e
    1d34:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_WriteCommand(dispaly_on);
    1d36:	8f e0       	ldi	r24, 0x0F	; 15
    1d38:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <LCD_WriteCommand>
    1d3c:	80 e0       	ldi	r24, 0x00	; 0
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	a0 e8       	ldi	r26, 0x80	; 128
    1d42:	bf e3       	ldi	r27, 0x3F	; 63
    1d44:	89 8f       	std	Y+25, r24	; 0x19
    1d46:	9a 8f       	std	Y+26, r25	; 0x1a
    1d48:	ab 8f       	std	Y+27, r26	; 0x1b
    1d4a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d4c:	69 8d       	ldd	r22, Y+25	; 0x19
    1d4e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d50:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d52:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d54:	20 e0       	ldi	r18, 0x00	; 0
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	4a ef       	ldi	r20, 0xFA	; 250
    1d5a:	54 e4       	ldi	r21, 0x44	; 68
    1d5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d60:	dc 01       	movw	r26, r24
    1d62:	cb 01       	movw	r24, r22
    1d64:	8d 8b       	std	Y+21, r24	; 0x15
    1d66:	9e 8b       	std	Y+22, r25	; 0x16
    1d68:	af 8b       	std	Y+23, r26	; 0x17
    1d6a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d6c:	6d 89       	ldd	r22, Y+21	; 0x15
    1d6e:	7e 89       	ldd	r23, Y+22	; 0x16
    1d70:	8f 89       	ldd	r24, Y+23	; 0x17
    1d72:	98 8d       	ldd	r25, Y+24	; 0x18
    1d74:	20 e0       	ldi	r18, 0x00	; 0
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	40 e8       	ldi	r20, 0x80	; 128
    1d7a:	5f e3       	ldi	r21, 0x3F	; 63
    1d7c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d80:	88 23       	and	r24, r24
    1d82:	2c f4       	brge	.+10     	; 0x1d8e <LCD_Init+0x272>
		__ticks = 1;
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	9c 8b       	std	Y+20, r25	; 0x14
    1d8a:	8b 8b       	std	Y+19, r24	; 0x13
    1d8c:	3f c0       	rjmp	.+126    	; 0x1e0c <LCD_Init+0x2f0>
	else if (__tmp > 65535)
    1d8e:	6d 89       	ldd	r22, Y+21	; 0x15
    1d90:	7e 89       	ldd	r23, Y+22	; 0x16
    1d92:	8f 89       	ldd	r24, Y+23	; 0x17
    1d94:	98 8d       	ldd	r25, Y+24	; 0x18
    1d96:	20 e0       	ldi	r18, 0x00	; 0
    1d98:	3f ef       	ldi	r19, 0xFF	; 255
    1d9a:	4f e7       	ldi	r20, 0x7F	; 127
    1d9c:	57 e4       	ldi	r21, 0x47	; 71
    1d9e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1da2:	18 16       	cp	r1, r24
    1da4:	4c f5       	brge	.+82     	; 0x1df8 <LCD_Init+0x2dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1da6:	69 8d       	ldd	r22, Y+25	; 0x19
    1da8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1daa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dae:	20 e0       	ldi	r18, 0x00	; 0
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	40 e2       	ldi	r20, 0x20	; 32
    1db4:	51 e4       	ldi	r21, 0x41	; 65
    1db6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dba:	dc 01       	movw	r26, r24
    1dbc:	cb 01       	movw	r24, r22
    1dbe:	bc 01       	movw	r22, r24
    1dc0:	cd 01       	movw	r24, r26
    1dc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dc6:	dc 01       	movw	r26, r24
    1dc8:	cb 01       	movw	r24, r22
    1dca:	9c 8b       	std	Y+20, r25	; 0x14
    1dcc:	8b 8b       	std	Y+19, r24	; 0x13
    1dce:	0f c0       	rjmp	.+30     	; 0x1dee <LCD_Init+0x2d2>
    1dd0:	88 ec       	ldi	r24, 0xC8	; 200
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	9a 8b       	std	Y+18, r25	; 0x12
    1dd6:	89 8b       	std	Y+17, r24	; 0x11
    1dd8:	89 89       	ldd	r24, Y+17	; 0x11
    1dda:	9a 89       	ldd	r25, Y+18	; 0x12
    1ddc:	01 97       	sbiw	r24, 0x01	; 1
    1dde:	f1 f7       	brne	.-4      	; 0x1ddc <LCD_Init+0x2c0>
    1de0:	9a 8b       	std	Y+18, r25	; 0x12
    1de2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1de4:	8b 89       	ldd	r24, Y+19	; 0x13
    1de6:	9c 89       	ldd	r25, Y+20	; 0x14
    1de8:	01 97       	sbiw	r24, 0x01	; 1
    1dea:	9c 8b       	std	Y+20, r25	; 0x14
    1dec:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dee:	8b 89       	ldd	r24, Y+19	; 0x13
    1df0:	9c 89       	ldd	r25, Y+20	; 0x14
    1df2:	00 97       	sbiw	r24, 0x00	; 0
    1df4:	69 f7       	brne	.-38     	; 0x1dd0 <LCD_Init+0x2b4>
    1df6:	14 c0       	rjmp	.+40     	; 0x1e20 <LCD_Init+0x304>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1df8:	6d 89       	ldd	r22, Y+21	; 0x15
    1dfa:	7e 89       	ldd	r23, Y+22	; 0x16
    1dfc:	8f 89       	ldd	r24, Y+23	; 0x17
    1dfe:	98 8d       	ldd	r25, Y+24	; 0x18
    1e00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e04:	dc 01       	movw	r26, r24
    1e06:	cb 01       	movw	r24, r22
    1e08:	9c 8b       	std	Y+20, r25	; 0x14
    1e0a:	8b 8b       	std	Y+19, r24	; 0x13
    1e0c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e0e:	9c 89       	ldd	r25, Y+20	; 0x14
    1e10:	98 8b       	std	Y+16, r25	; 0x10
    1e12:	8f 87       	std	Y+15, r24	; 0x0f
    1e14:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e16:	98 89       	ldd	r25, Y+16	; 0x10
    1e18:	01 97       	sbiw	r24, 0x01	; 1
    1e1a:	f1 f7       	brne	.-4      	; 0x1e18 <LCD_Init+0x2fc>
    1e1c:	98 8b       	std	Y+16, r25	; 0x10
    1e1e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_WriteCommand(clear);
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <LCD_WriteCommand>
    1e26:	80 e0       	ldi	r24, 0x00	; 0
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	a0 e0       	ldi	r26, 0x00	; 0
    1e2c:	b0 e4       	ldi	r27, 0x40	; 64
    1e2e:	8b 87       	std	Y+11, r24	; 0x0b
    1e30:	9c 87       	std	Y+12, r25	; 0x0c
    1e32:	ad 87       	std	Y+13, r26	; 0x0d
    1e34:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e36:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e38:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e3e:	20 e0       	ldi	r18, 0x00	; 0
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	4a ef       	ldi	r20, 0xFA	; 250
    1e44:	54 e4       	ldi	r21, 0x44	; 68
    1e46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e4a:	dc 01       	movw	r26, r24
    1e4c:	cb 01       	movw	r24, r22
    1e4e:	8f 83       	std	Y+7, r24	; 0x07
    1e50:	98 87       	std	Y+8, r25	; 0x08
    1e52:	a9 87       	std	Y+9, r26	; 0x09
    1e54:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e56:	6f 81       	ldd	r22, Y+7	; 0x07
    1e58:	78 85       	ldd	r23, Y+8	; 0x08
    1e5a:	89 85       	ldd	r24, Y+9	; 0x09
    1e5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e5e:	20 e0       	ldi	r18, 0x00	; 0
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	40 e8       	ldi	r20, 0x80	; 128
    1e64:	5f e3       	ldi	r21, 0x3F	; 63
    1e66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e6a:	88 23       	and	r24, r24
    1e6c:	2c f4       	brge	.+10     	; 0x1e78 <LCD_Init+0x35c>
		__ticks = 1;
    1e6e:	81 e0       	ldi	r24, 0x01	; 1
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	9e 83       	std	Y+6, r25	; 0x06
    1e74:	8d 83       	std	Y+5, r24	; 0x05
    1e76:	3f c0       	rjmp	.+126    	; 0x1ef6 <LCD_Init+0x3da>
	else if (__tmp > 65535)
    1e78:	6f 81       	ldd	r22, Y+7	; 0x07
    1e7a:	78 85       	ldd	r23, Y+8	; 0x08
    1e7c:	89 85       	ldd	r24, Y+9	; 0x09
    1e7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e80:	20 e0       	ldi	r18, 0x00	; 0
    1e82:	3f ef       	ldi	r19, 0xFF	; 255
    1e84:	4f e7       	ldi	r20, 0x7F	; 127
    1e86:	57 e4       	ldi	r21, 0x47	; 71
    1e88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e8c:	18 16       	cp	r1, r24
    1e8e:	4c f5       	brge	.+82     	; 0x1ee2 <LCD_Init+0x3c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e90:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e92:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e94:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e96:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e98:	20 e0       	ldi	r18, 0x00	; 0
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	40 e2       	ldi	r20, 0x20	; 32
    1e9e:	51 e4       	ldi	r21, 0x41	; 65
    1ea0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea4:	dc 01       	movw	r26, r24
    1ea6:	cb 01       	movw	r24, r22
    1ea8:	bc 01       	movw	r22, r24
    1eaa:	cd 01       	movw	r24, r26
    1eac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb0:	dc 01       	movw	r26, r24
    1eb2:	cb 01       	movw	r24, r22
    1eb4:	9e 83       	std	Y+6, r25	; 0x06
    1eb6:	8d 83       	std	Y+5, r24	; 0x05
    1eb8:	0f c0       	rjmp	.+30     	; 0x1ed8 <LCD_Init+0x3bc>
    1eba:	88 ec       	ldi	r24, 0xC8	; 200
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	9c 83       	std	Y+4, r25	; 0x04
    1ec0:	8b 83       	std	Y+3, r24	; 0x03
    1ec2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec6:	01 97       	sbiw	r24, 0x01	; 1
    1ec8:	f1 f7       	brne	.-4      	; 0x1ec6 <LCD_Init+0x3aa>
    1eca:	9c 83       	std	Y+4, r25	; 0x04
    1ecc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ece:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ed2:	01 97       	sbiw	r24, 0x01	; 1
    1ed4:	9e 83       	std	Y+6, r25	; 0x06
    1ed6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ed8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eda:	9e 81       	ldd	r25, Y+6	; 0x06
    1edc:	00 97       	sbiw	r24, 0x00	; 0
    1ede:	69 f7       	brne	.-38     	; 0x1eba <LCD_Init+0x39e>
    1ee0:	14 c0       	rjmp	.+40     	; 0x1f0a <LCD_Init+0x3ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ee2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ee4:	78 85       	ldd	r23, Y+8	; 0x08
    1ee6:	89 85       	ldd	r24, Y+9	; 0x09
    1ee8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eee:	dc 01       	movw	r26, r24
    1ef0:	cb 01       	movw	r24, r22
    1ef2:	9e 83       	std	Y+6, r25	; 0x06
    1ef4:	8d 83       	std	Y+5, r24	; 0x05
    1ef6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef8:	9e 81       	ldd	r25, Y+6	; 0x06
    1efa:	9a 83       	std	Y+2, r25	; 0x02
    1efc:	89 83       	std	Y+1, r24	; 0x01
    1efe:	89 81       	ldd	r24, Y+1	; 0x01
    1f00:	9a 81       	ldd	r25, Y+2	; 0x02
    1f02:	01 97       	sbiw	r24, 0x01	; 1
    1f04:	f1 f7       	brne	.-4      	; 0x1f02 <LCD_Init+0x3e6>
    1f06:	9a 83       	std	Y+2, r25	; 0x02
    1f08:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_WriteCommand(entry_mode);
    1f0a:	86 e0       	ldi	r24, 0x06	; 6
    1f0c:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <LCD_WriteCommand>

}
    1f10:	e8 96       	adiw	r28, 0x38	; 56
    1f12:	0f b6       	in	r0, 0x3f	; 63
    1f14:	f8 94       	cli
    1f16:	de bf       	out	0x3e, r29	; 62
    1f18:	0f be       	out	0x3f, r0	; 63
    1f1a:	cd bf       	out	0x3d, r28	; 61
    1f1c:	cf 91       	pop	r28
    1f1e:	df 91       	pop	r29
    1f20:	08 95       	ret

00001f22 <LCD_WriteCommand>:

void LCD_WriteCommand(u8 Command)
{
    1f22:	df 93       	push	r29
    1f24:	cf 93       	push	r28
    1f26:	cd b7       	in	r28, 0x3d	; 61
    1f28:	de b7       	in	r29, 0x3e	; 62
    1f2a:	e9 97       	sbiw	r28, 0x39	; 57
    1f2c:	0f b6       	in	r0, 0x3f	; 63
    1f2e:	f8 94       	cli
    1f30:	de bf       	out	0x3e, r29	; 62
    1f32:	0f be       	out	0x3f, r0	; 63
    1f34:	cd bf       	out	0x3d, r28	; 61
    1f36:	89 af       	std	Y+57, r24	; 0x39
	DIO_SetPinValue(GPORT , RS ,DIO_LOW);  //RS
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	61 e0       	ldi	r22, 0x01	; 1
    1f3c:	40 e0       	ldi	r20, 0x00	; 0
    1f3e:	0e 94 38 0b 	call	0x1670	; 0x1670 <DIO_SetPinValue>
	DIO_SetPinValue(GPORT , RW ,DIO_LOW);  //R/W
    1f42:	81 e0       	ldi	r24, 0x01	; 1
    1f44:	67 e0       	ldi	r22, 0x07	; 7
    1f46:	40 e0       	ldi	r20, 0x00	; 0
    1f48:	0e 94 38 0b 	call	0x1670	; 0x1670 <DIO_SetPinValue>
	DIO_SetPinValue(GPORT , EN ,DIO_HIGH);
    1f4c:	81 e0       	ldi	r24, 0x01	; 1
    1f4e:	62 e0       	ldi	r22, 0x02	; 2
    1f50:	41 e0       	ldi	r20, 0x01	; 1
    1f52:	0e 94 38 0b 	call	0x1670	; 0x1670 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_PORT ,DIO_PIN4 ,GET_BIT(Command,4));
    1f56:	89 ad       	ldd	r24, Y+57	; 0x39
    1f58:	82 95       	swap	r24
    1f5a:	8f 70       	andi	r24, 0x0F	; 15
    1f5c:	98 2f       	mov	r25, r24
    1f5e:	91 70       	andi	r25, 0x01	; 1
    1f60:	80 e0       	ldi	r24, 0x00	; 0
    1f62:	64 e0       	ldi	r22, 0x04	; 4
    1f64:	49 2f       	mov	r20, r25
    1f66:	0e 94 38 0b 	call	0x1670	; 0x1670 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_PORT ,DIO_PIN5 ,GET_BIT(Command,5));
    1f6a:	89 ad       	ldd	r24, Y+57	; 0x39
    1f6c:	82 95       	swap	r24
    1f6e:	86 95       	lsr	r24
    1f70:	87 70       	andi	r24, 0x07	; 7
    1f72:	98 2f       	mov	r25, r24
    1f74:	91 70       	andi	r25, 0x01	; 1
    1f76:	80 e0       	ldi	r24, 0x00	; 0
    1f78:	65 e0       	ldi	r22, 0x05	; 5
    1f7a:	49 2f       	mov	r20, r25
    1f7c:	0e 94 38 0b 	call	0x1670	; 0x1670 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_PORT ,DIO_PIN6 ,GET_BIT(Command,6));
    1f80:	89 ad       	ldd	r24, Y+57	; 0x39
    1f82:	82 95       	swap	r24
    1f84:	86 95       	lsr	r24
    1f86:	86 95       	lsr	r24
    1f88:	83 70       	andi	r24, 0x03	; 3
    1f8a:	98 2f       	mov	r25, r24
    1f8c:	91 70       	andi	r25, 0x01	; 1
    1f8e:	80 e0       	ldi	r24, 0x00	; 0
    1f90:	66 e0       	ldi	r22, 0x06	; 6
    1f92:	49 2f       	mov	r20, r25
    1f94:	0e 94 38 0b 	call	0x1670	; 0x1670 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_PORT ,DIO_PIN7 ,GET_BIT(Command,7));
    1f98:	89 ad       	ldd	r24, Y+57	; 0x39
    1f9a:	98 2f       	mov	r25, r24
    1f9c:	99 1f       	adc	r25, r25
    1f9e:	99 27       	eor	r25, r25
    1fa0:	99 1f       	adc	r25, r25
    1fa2:	80 e0       	ldi	r24, 0x00	; 0
    1fa4:	67 e0       	ldi	r22, 0x07	; 7
    1fa6:	49 2f       	mov	r20, r25
    1fa8:	0e 94 38 0b 	call	0x1670	; 0x1670 <DIO_SetPinValue>
    1fac:	80 e0       	ldi	r24, 0x00	; 0
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	a0 e8       	ldi	r26, 0x80	; 128
    1fb2:	bf e3       	ldi	r27, 0x3F	; 63
    1fb4:	8d ab       	std	Y+53, r24	; 0x35
    1fb6:	9e ab       	std	Y+54, r25	; 0x36
    1fb8:	af ab       	std	Y+55, r26	; 0x37
    1fba:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fbc:	6d a9       	ldd	r22, Y+53	; 0x35
    1fbe:	7e a9       	ldd	r23, Y+54	; 0x36
    1fc0:	8f a9       	ldd	r24, Y+55	; 0x37
    1fc2:	98 ad       	ldd	r25, Y+56	; 0x38
    1fc4:	20 e0       	ldi	r18, 0x00	; 0
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	4a ef       	ldi	r20, 0xFA	; 250
    1fca:	54 e4       	ldi	r21, 0x44	; 68
    1fcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd0:	dc 01       	movw	r26, r24
    1fd2:	cb 01       	movw	r24, r22
    1fd4:	89 ab       	std	Y+49, r24	; 0x31
    1fd6:	9a ab       	std	Y+50, r25	; 0x32
    1fd8:	ab ab       	std	Y+51, r26	; 0x33
    1fda:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1fdc:	69 a9       	ldd	r22, Y+49	; 0x31
    1fde:	7a a9       	ldd	r23, Y+50	; 0x32
    1fe0:	8b a9       	ldd	r24, Y+51	; 0x33
    1fe2:	9c a9       	ldd	r25, Y+52	; 0x34
    1fe4:	20 e0       	ldi	r18, 0x00	; 0
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	40 e8       	ldi	r20, 0x80	; 128
    1fea:	5f e3       	ldi	r21, 0x3F	; 63
    1fec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ff0:	88 23       	and	r24, r24
    1ff2:	2c f4       	brge	.+10     	; 0x1ffe <LCD_WriteCommand+0xdc>
		__ticks = 1;
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	98 ab       	std	Y+48, r25	; 0x30
    1ffa:	8f a7       	std	Y+47, r24	; 0x2f
    1ffc:	3f c0       	rjmp	.+126    	; 0x207c <LCD_WriteCommand+0x15a>
	else if (__tmp > 65535)
    1ffe:	69 a9       	ldd	r22, Y+49	; 0x31
    2000:	7a a9       	ldd	r23, Y+50	; 0x32
    2002:	8b a9       	ldd	r24, Y+51	; 0x33
    2004:	9c a9       	ldd	r25, Y+52	; 0x34
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	3f ef       	ldi	r19, 0xFF	; 255
    200a:	4f e7       	ldi	r20, 0x7F	; 127
    200c:	57 e4       	ldi	r21, 0x47	; 71
    200e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2012:	18 16       	cp	r1, r24
    2014:	4c f5       	brge	.+82     	; 0x2068 <LCD_WriteCommand+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2016:	6d a9       	ldd	r22, Y+53	; 0x35
    2018:	7e a9       	ldd	r23, Y+54	; 0x36
    201a:	8f a9       	ldd	r24, Y+55	; 0x37
    201c:	98 ad       	ldd	r25, Y+56	; 0x38
    201e:	20 e0       	ldi	r18, 0x00	; 0
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	40 e2       	ldi	r20, 0x20	; 32
    2024:	51 e4       	ldi	r21, 0x41	; 65
    2026:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    202a:	dc 01       	movw	r26, r24
    202c:	cb 01       	movw	r24, r22
    202e:	bc 01       	movw	r22, r24
    2030:	cd 01       	movw	r24, r26
    2032:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2036:	dc 01       	movw	r26, r24
    2038:	cb 01       	movw	r24, r22
    203a:	98 ab       	std	Y+48, r25	; 0x30
    203c:	8f a7       	std	Y+47, r24	; 0x2f
    203e:	0f c0       	rjmp	.+30     	; 0x205e <LCD_WriteCommand+0x13c>
    2040:	88 ec       	ldi	r24, 0xC8	; 200
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	9e a7       	std	Y+46, r25	; 0x2e
    2046:	8d a7       	std	Y+45, r24	; 0x2d
    2048:	8d a5       	ldd	r24, Y+45	; 0x2d
    204a:	9e a5       	ldd	r25, Y+46	; 0x2e
    204c:	01 97       	sbiw	r24, 0x01	; 1
    204e:	f1 f7       	brne	.-4      	; 0x204c <LCD_WriteCommand+0x12a>
    2050:	9e a7       	std	Y+46, r25	; 0x2e
    2052:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2054:	8f a5       	ldd	r24, Y+47	; 0x2f
    2056:	98 a9       	ldd	r25, Y+48	; 0x30
    2058:	01 97       	sbiw	r24, 0x01	; 1
    205a:	98 ab       	std	Y+48, r25	; 0x30
    205c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    205e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2060:	98 a9       	ldd	r25, Y+48	; 0x30
    2062:	00 97       	sbiw	r24, 0x00	; 0
    2064:	69 f7       	brne	.-38     	; 0x2040 <LCD_WriteCommand+0x11e>
    2066:	14 c0       	rjmp	.+40     	; 0x2090 <LCD_WriteCommand+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2068:	69 a9       	ldd	r22, Y+49	; 0x31
    206a:	7a a9       	ldd	r23, Y+50	; 0x32
    206c:	8b a9       	ldd	r24, Y+51	; 0x33
    206e:	9c a9       	ldd	r25, Y+52	; 0x34
    2070:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2074:	dc 01       	movw	r26, r24
    2076:	cb 01       	movw	r24, r22
    2078:	98 ab       	std	Y+48, r25	; 0x30
    207a:	8f a7       	std	Y+47, r24	; 0x2f
    207c:	8f a5       	ldd	r24, Y+47	; 0x2f
    207e:	98 a9       	ldd	r25, Y+48	; 0x30
    2080:	9c a7       	std	Y+44, r25	; 0x2c
    2082:	8b a7       	std	Y+43, r24	; 0x2b
    2084:	8b a5       	ldd	r24, Y+43	; 0x2b
    2086:	9c a5       	ldd	r25, Y+44	; 0x2c
    2088:	01 97       	sbiw	r24, 0x01	; 1
    208a:	f1 f7       	brne	.-4      	; 0x2088 <LCD_WriteCommand+0x166>
    208c:	9c a7       	std	Y+44, r25	; 0x2c
    208e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_SetPinValue(GPORT,EN,DIO_LOW);
    2090:	81 e0       	ldi	r24, 0x01	; 1
    2092:	62 e0       	ldi	r22, 0x02	; 2
    2094:	40 e0       	ldi	r20, 0x00	; 0
    2096:	0e 94 38 0b 	call	0x1670	; 0x1670 <DIO_SetPinValue>
	if(init_flag==1)
    209a:	80 91 6a 02 	lds	r24, 0x026A
    209e:	81 30       	cpi	r24, 0x01	; 1
    20a0:	09 f0       	breq	.+2      	; 0x20a4 <LCD_WriteCommand+0x182>
    20a2:	86 c1       	rjmp	.+780    	; 0x23b0 <LCD_WriteCommand+0x48e>
    20a4:	80 e0       	ldi	r24, 0x00	; 0
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	a0 e8       	ldi	r26, 0x80	; 128
    20aa:	bf e3       	ldi	r27, 0x3F	; 63
    20ac:	8f a3       	std	Y+39, r24	; 0x27
    20ae:	98 a7       	std	Y+40, r25	; 0x28
    20b0:	a9 a7       	std	Y+41, r26	; 0x29
    20b2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20b4:	6f a1       	ldd	r22, Y+39	; 0x27
    20b6:	78 a5       	ldd	r23, Y+40	; 0x28
    20b8:	89 a5       	ldd	r24, Y+41	; 0x29
    20ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    20bc:	20 e0       	ldi	r18, 0x00	; 0
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	4a ef       	ldi	r20, 0xFA	; 250
    20c2:	54 e4       	ldi	r21, 0x44	; 68
    20c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c8:	dc 01       	movw	r26, r24
    20ca:	cb 01       	movw	r24, r22
    20cc:	8b a3       	std	Y+35, r24	; 0x23
    20ce:	9c a3       	std	Y+36, r25	; 0x24
    20d0:	ad a3       	std	Y+37, r26	; 0x25
    20d2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    20d4:	6b a1       	ldd	r22, Y+35	; 0x23
    20d6:	7c a1       	ldd	r23, Y+36	; 0x24
    20d8:	8d a1       	ldd	r24, Y+37	; 0x25
    20da:	9e a1       	ldd	r25, Y+38	; 0x26
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	40 e8       	ldi	r20, 0x80	; 128
    20e2:	5f e3       	ldi	r21, 0x3F	; 63
    20e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20e8:	88 23       	and	r24, r24
    20ea:	2c f4       	brge	.+10     	; 0x20f6 <LCD_WriteCommand+0x1d4>
		__ticks = 1;
    20ec:	81 e0       	ldi	r24, 0x01	; 1
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	9a a3       	std	Y+34, r25	; 0x22
    20f2:	89 a3       	std	Y+33, r24	; 0x21
    20f4:	3f c0       	rjmp	.+126    	; 0x2174 <LCD_WriteCommand+0x252>
	else if (__tmp > 65535)
    20f6:	6b a1       	ldd	r22, Y+35	; 0x23
    20f8:	7c a1       	ldd	r23, Y+36	; 0x24
    20fa:	8d a1       	ldd	r24, Y+37	; 0x25
    20fc:	9e a1       	ldd	r25, Y+38	; 0x26
    20fe:	20 e0       	ldi	r18, 0x00	; 0
    2100:	3f ef       	ldi	r19, 0xFF	; 255
    2102:	4f e7       	ldi	r20, 0x7F	; 127
    2104:	57 e4       	ldi	r21, 0x47	; 71
    2106:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    210a:	18 16       	cp	r1, r24
    210c:	4c f5       	brge	.+82     	; 0x2160 <LCD_WriteCommand+0x23e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    210e:	6f a1       	ldd	r22, Y+39	; 0x27
    2110:	78 a5       	ldd	r23, Y+40	; 0x28
    2112:	89 a5       	ldd	r24, Y+41	; 0x29
    2114:	9a a5       	ldd	r25, Y+42	; 0x2a
    2116:	20 e0       	ldi	r18, 0x00	; 0
    2118:	30 e0       	ldi	r19, 0x00	; 0
    211a:	40 e2       	ldi	r20, 0x20	; 32
    211c:	51 e4       	ldi	r21, 0x41	; 65
    211e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2122:	dc 01       	movw	r26, r24
    2124:	cb 01       	movw	r24, r22
    2126:	bc 01       	movw	r22, r24
    2128:	cd 01       	movw	r24, r26
    212a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    212e:	dc 01       	movw	r26, r24
    2130:	cb 01       	movw	r24, r22
    2132:	9a a3       	std	Y+34, r25	; 0x22
    2134:	89 a3       	std	Y+33, r24	; 0x21
    2136:	0f c0       	rjmp	.+30     	; 0x2156 <LCD_WriteCommand+0x234>
    2138:	88 ec       	ldi	r24, 0xC8	; 200
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	98 a3       	std	Y+32, r25	; 0x20
    213e:	8f 8f       	std	Y+31, r24	; 0x1f
    2140:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2142:	98 a1       	ldd	r25, Y+32	; 0x20
    2144:	01 97       	sbiw	r24, 0x01	; 1
    2146:	f1 f7       	brne	.-4      	; 0x2144 <LCD_WriteCommand+0x222>
    2148:	98 a3       	std	Y+32, r25	; 0x20
    214a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    214c:	89 a1       	ldd	r24, Y+33	; 0x21
    214e:	9a a1       	ldd	r25, Y+34	; 0x22
    2150:	01 97       	sbiw	r24, 0x01	; 1
    2152:	9a a3       	std	Y+34, r25	; 0x22
    2154:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2156:	89 a1       	ldd	r24, Y+33	; 0x21
    2158:	9a a1       	ldd	r25, Y+34	; 0x22
    215a:	00 97       	sbiw	r24, 0x00	; 0
    215c:	69 f7       	brne	.-38     	; 0x2138 <LCD_WriteCommand+0x216>
    215e:	14 c0       	rjmp	.+40     	; 0x2188 <LCD_WriteCommand+0x266>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2160:	6b a1       	ldd	r22, Y+35	; 0x23
    2162:	7c a1       	ldd	r23, Y+36	; 0x24
    2164:	8d a1       	ldd	r24, Y+37	; 0x25
    2166:	9e a1       	ldd	r25, Y+38	; 0x26
    2168:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    216c:	dc 01       	movw	r26, r24
    216e:	cb 01       	movw	r24, r22
    2170:	9a a3       	std	Y+34, r25	; 0x22
    2172:	89 a3       	std	Y+33, r24	; 0x21
    2174:	89 a1       	ldd	r24, Y+33	; 0x21
    2176:	9a a1       	ldd	r25, Y+34	; 0x22
    2178:	9e 8f       	std	Y+30, r25	; 0x1e
    217a:	8d 8f       	std	Y+29, r24	; 0x1d
    217c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    217e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2180:	01 97       	sbiw	r24, 0x01	; 1
    2182:	f1 f7       	brne	.-4      	; 0x2180 <LCD_WriteCommand+0x25e>
    2184:	9e 8f       	std	Y+30, r25	; 0x1e
    2186:	8d 8f       	std	Y+29, r24	; 0x1d
	{
	_delay_ms(1);
	DIO_SetPinValue(GPORT , EN ,DIO_HIGH);
    2188:	81 e0       	ldi	r24, 0x01	; 1
    218a:	62 e0       	ldi	r22, 0x02	; 2
    218c:	41 e0       	ldi	r20, 0x01	; 1
    218e:	0e 94 38 0b 	call	0x1670	; 0x1670 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_PORT ,DIO_PIN4 ,GET_BIT(Command,0));
    2192:	89 ad       	ldd	r24, Y+57	; 0x39
    2194:	98 2f       	mov	r25, r24
    2196:	91 70       	andi	r25, 0x01	; 1
    2198:	80 e0       	ldi	r24, 0x00	; 0
    219a:	64 e0       	ldi	r22, 0x04	; 4
    219c:	49 2f       	mov	r20, r25
    219e:	0e 94 38 0b 	call	0x1670	; 0x1670 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_PORT ,DIO_PIN5 ,GET_BIT(Command,1));
    21a2:	89 ad       	ldd	r24, Y+57	; 0x39
    21a4:	86 95       	lsr	r24
    21a6:	98 2f       	mov	r25, r24
    21a8:	91 70       	andi	r25, 0x01	; 1
    21aa:	80 e0       	ldi	r24, 0x00	; 0
    21ac:	65 e0       	ldi	r22, 0x05	; 5
    21ae:	49 2f       	mov	r20, r25
    21b0:	0e 94 38 0b 	call	0x1670	; 0x1670 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_PORT ,DIO_PIN6 ,GET_BIT(Command,2));
    21b4:	89 ad       	ldd	r24, Y+57	; 0x39
    21b6:	86 95       	lsr	r24
    21b8:	86 95       	lsr	r24
    21ba:	98 2f       	mov	r25, r24
    21bc:	91 70       	andi	r25, 0x01	; 1
    21be:	80 e0       	ldi	r24, 0x00	; 0
    21c0:	66 e0       	ldi	r22, 0x06	; 6
    21c2:	49 2f       	mov	r20, r25
    21c4:	0e 94 38 0b 	call	0x1670	; 0x1670 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_PORT ,DIO_PIN7 ,GET_BIT(Command,3));
    21c8:	89 ad       	ldd	r24, Y+57	; 0x39
    21ca:	86 95       	lsr	r24
    21cc:	86 95       	lsr	r24
    21ce:	86 95       	lsr	r24
    21d0:	98 2f       	mov	r25, r24
    21d2:	91 70       	andi	r25, 0x01	; 1
    21d4:	80 e0       	ldi	r24, 0x00	; 0
    21d6:	67 e0       	ldi	r22, 0x07	; 7
    21d8:	49 2f       	mov	r20, r25
    21da:	0e 94 38 0b 	call	0x1670	; 0x1670 <DIO_SetPinValue>
    21de:	80 e0       	ldi	r24, 0x00	; 0
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	a0 e8       	ldi	r26, 0x80	; 128
    21e4:	bf e3       	ldi	r27, 0x3F	; 63
    21e6:	89 8f       	std	Y+25, r24	; 0x19
    21e8:	9a 8f       	std	Y+26, r25	; 0x1a
    21ea:	ab 8f       	std	Y+27, r26	; 0x1b
    21ec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ee:	69 8d       	ldd	r22, Y+25	; 0x19
    21f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21f6:	20 e0       	ldi	r18, 0x00	; 0
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	4a ef       	ldi	r20, 0xFA	; 250
    21fc:	54 e4       	ldi	r21, 0x44	; 68
    21fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2202:	dc 01       	movw	r26, r24
    2204:	cb 01       	movw	r24, r22
    2206:	8d 8b       	std	Y+21, r24	; 0x15
    2208:	9e 8b       	std	Y+22, r25	; 0x16
    220a:	af 8b       	std	Y+23, r26	; 0x17
    220c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    220e:	6d 89       	ldd	r22, Y+21	; 0x15
    2210:	7e 89       	ldd	r23, Y+22	; 0x16
    2212:	8f 89       	ldd	r24, Y+23	; 0x17
    2214:	98 8d       	ldd	r25, Y+24	; 0x18
    2216:	20 e0       	ldi	r18, 0x00	; 0
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	40 e8       	ldi	r20, 0x80	; 128
    221c:	5f e3       	ldi	r21, 0x3F	; 63
    221e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2222:	88 23       	and	r24, r24
    2224:	2c f4       	brge	.+10     	; 0x2230 <LCD_WriteCommand+0x30e>
		__ticks = 1;
    2226:	81 e0       	ldi	r24, 0x01	; 1
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	9c 8b       	std	Y+20, r25	; 0x14
    222c:	8b 8b       	std	Y+19, r24	; 0x13
    222e:	3f c0       	rjmp	.+126    	; 0x22ae <LCD_WriteCommand+0x38c>
	else if (__tmp > 65535)
    2230:	6d 89       	ldd	r22, Y+21	; 0x15
    2232:	7e 89       	ldd	r23, Y+22	; 0x16
    2234:	8f 89       	ldd	r24, Y+23	; 0x17
    2236:	98 8d       	ldd	r25, Y+24	; 0x18
    2238:	20 e0       	ldi	r18, 0x00	; 0
    223a:	3f ef       	ldi	r19, 0xFF	; 255
    223c:	4f e7       	ldi	r20, 0x7F	; 127
    223e:	57 e4       	ldi	r21, 0x47	; 71
    2240:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2244:	18 16       	cp	r1, r24
    2246:	4c f5       	brge	.+82     	; 0x229a <LCD_WriteCommand+0x378>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2248:	69 8d       	ldd	r22, Y+25	; 0x19
    224a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    224c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    224e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2250:	20 e0       	ldi	r18, 0x00	; 0
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	40 e2       	ldi	r20, 0x20	; 32
    2256:	51 e4       	ldi	r21, 0x41	; 65
    2258:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    225c:	dc 01       	movw	r26, r24
    225e:	cb 01       	movw	r24, r22
    2260:	bc 01       	movw	r22, r24
    2262:	cd 01       	movw	r24, r26
    2264:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2268:	dc 01       	movw	r26, r24
    226a:	cb 01       	movw	r24, r22
    226c:	9c 8b       	std	Y+20, r25	; 0x14
    226e:	8b 8b       	std	Y+19, r24	; 0x13
    2270:	0f c0       	rjmp	.+30     	; 0x2290 <LCD_WriteCommand+0x36e>
    2272:	88 ec       	ldi	r24, 0xC8	; 200
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	9a 8b       	std	Y+18, r25	; 0x12
    2278:	89 8b       	std	Y+17, r24	; 0x11
    227a:	89 89       	ldd	r24, Y+17	; 0x11
    227c:	9a 89       	ldd	r25, Y+18	; 0x12
    227e:	01 97       	sbiw	r24, 0x01	; 1
    2280:	f1 f7       	brne	.-4      	; 0x227e <LCD_WriteCommand+0x35c>
    2282:	9a 8b       	std	Y+18, r25	; 0x12
    2284:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2286:	8b 89       	ldd	r24, Y+19	; 0x13
    2288:	9c 89       	ldd	r25, Y+20	; 0x14
    228a:	01 97       	sbiw	r24, 0x01	; 1
    228c:	9c 8b       	std	Y+20, r25	; 0x14
    228e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2290:	8b 89       	ldd	r24, Y+19	; 0x13
    2292:	9c 89       	ldd	r25, Y+20	; 0x14
    2294:	00 97       	sbiw	r24, 0x00	; 0
    2296:	69 f7       	brne	.-38     	; 0x2272 <LCD_WriteCommand+0x350>
    2298:	14 c0       	rjmp	.+40     	; 0x22c2 <LCD_WriteCommand+0x3a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    229a:	6d 89       	ldd	r22, Y+21	; 0x15
    229c:	7e 89       	ldd	r23, Y+22	; 0x16
    229e:	8f 89       	ldd	r24, Y+23	; 0x17
    22a0:	98 8d       	ldd	r25, Y+24	; 0x18
    22a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	9c 8b       	std	Y+20, r25	; 0x14
    22ac:	8b 8b       	std	Y+19, r24	; 0x13
    22ae:	8b 89       	ldd	r24, Y+19	; 0x13
    22b0:	9c 89       	ldd	r25, Y+20	; 0x14
    22b2:	98 8b       	std	Y+16, r25	; 0x10
    22b4:	8f 87       	std	Y+15, r24	; 0x0f
    22b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    22b8:	98 89       	ldd	r25, Y+16	; 0x10
    22ba:	01 97       	sbiw	r24, 0x01	; 1
    22bc:	f1 f7       	brne	.-4      	; 0x22ba <LCD_WriteCommand+0x398>
    22be:	98 8b       	std	Y+16, r25	; 0x10
    22c0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_SetPinValue(GPORT,EN,DIO_LOW);
    22c2:	81 e0       	ldi	r24, 0x01	; 1
    22c4:	62 e0       	ldi	r22, 0x02	; 2
    22c6:	40 e0       	ldi	r20, 0x00	; 0
    22c8:	0e 94 38 0b 	call	0x1670	; 0x1670 <DIO_SetPinValue>
    22cc:	80 e0       	ldi	r24, 0x00	; 0
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	a0 e0       	ldi	r26, 0x00	; 0
    22d2:	b0 e4       	ldi	r27, 0x40	; 64
    22d4:	8b 87       	std	Y+11, r24	; 0x0b
    22d6:	9c 87       	std	Y+12, r25	; 0x0c
    22d8:	ad 87       	std	Y+13, r26	; 0x0d
    22da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    22de:	7c 85       	ldd	r23, Y+12	; 0x0c
    22e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    22e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    22e4:	20 e0       	ldi	r18, 0x00	; 0
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	4a ef       	ldi	r20, 0xFA	; 250
    22ea:	54 e4       	ldi	r21, 0x44	; 68
    22ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f0:	dc 01       	movw	r26, r24
    22f2:	cb 01       	movw	r24, r22
    22f4:	8f 83       	std	Y+7, r24	; 0x07
    22f6:	98 87       	std	Y+8, r25	; 0x08
    22f8:	a9 87       	std	Y+9, r26	; 0x09
    22fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22fc:	6f 81       	ldd	r22, Y+7	; 0x07
    22fe:	78 85       	ldd	r23, Y+8	; 0x08
    2300:	89 85       	ldd	r24, Y+9	; 0x09
    2302:	9a 85       	ldd	r25, Y+10	; 0x0a
    2304:	20 e0       	ldi	r18, 0x00	; 0
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	40 e8       	ldi	r20, 0x80	; 128
    230a:	5f e3       	ldi	r21, 0x3F	; 63
    230c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2310:	88 23       	and	r24, r24
    2312:	2c f4       	brge	.+10     	; 0x231e <LCD_WriteCommand+0x3fc>
		__ticks = 1;
    2314:	81 e0       	ldi	r24, 0x01	; 1
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	9e 83       	std	Y+6, r25	; 0x06
    231a:	8d 83       	std	Y+5, r24	; 0x05
    231c:	3f c0       	rjmp	.+126    	; 0x239c <LCD_WriteCommand+0x47a>
	else if (__tmp > 65535)
    231e:	6f 81       	ldd	r22, Y+7	; 0x07
    2320:	78 85       	ldd	r23, Y+8	; 0x08
    2322:	89 85       	ldd	r24, Y+9	; 0x09
    2324:	9a 85       	ldd	r25, Y+10	; 0x0a
    2326:	20 e0       	ldi	r18, 0x00	; 0
    2328:	3f ef       	ldi	r19, 0xFF	; 255
    232a:	4f e7       	ldi	r20, 0x7F	; 127
    232c:	57 e4       	ldi	r21, 0x47	; 71
    232e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2332:	18 16       	cp	r1, r24
    2334:	4c f5       	brge	.+82     	; 0x2388 <LCD_WriteCommand+0x466>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2336:	6b 85       	ldd	r22, Y+11	; 0x0b
    2338:	7c 85       	ldd	r23, Y+12	; 0x0c
    233a:	8d 85       	ldd	r24, Y+13	; 0x0d
    233c:	9e 85       	ldd	r25, Y+14	; 0x0e
    233e:	20 e0       	ldi	r18, 0x00	; 0
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	40 e2       	ldi	r20, 0x20	; 32
    2344:	51 e4       	ldi	r21, 0x41	; 65
    2346:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    234a:	dc 01       	movw	r26, r24
    234c:	cb 01       	movw	r24, r22
    234e:	bc 01       	movw	r22, r24
    2350:	cd 01       	movw	r24, r26
    2352:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2356:	dc 01       	movw	r26, r24
    2358:	cb 01       	movw	r24, r22
    235a:	9e 83       	std	Y+6, r25	; 0x06
    235c:	8d 83       	std	Y+5, r24	; 0x05
    235e:	0f c0       	rjmp	.+30     	; 0x237e <LCD_WriteCommand+0x45c>
    2360:	88 ec       	ldi	r24, 0xC8	; 200
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	9c 83       	std	Y+4, r25	; 0x04
    2366:	8b 83       	std	Y+3, r24	; 0x03
    2368:	8b 81       	ldd	r24, Y+3	; 0x03
    236a:	9c 81       	ldd	r25, Y+4	; 0x04
    236c:	01 97       	sbiw	r24, 0x01	; 1
    236e:	f1 f7       	brne	.-4      	; 0x236c <LCD_WriteCommand+0x44a>
    2370:	9c 83       	std	Y+4, r25	; 0x04
    2372:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2374:	8d 81       	ldd	r24, Y+5	; 0x05
    2376:	9e 81       	ldd	r25, Y+6	; 0x06
    2378:	01 97       	sbiw	r24, 0x01	; 1
    237a:	9e 83       	std	Y+6, r25	; 0x06
    237c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    237e:	8d 81       	ldd	r24, Y+5	; 0x05
    2380:	9e 81       	ldd	r25, Y+6	; 0x06
    2382:	00 97       	sbiw	r24, 0x00	; 0
    2384:	69 f7       	brne	.-38     	; 0x2360 <LCD_WriteCommand+0x43e>
    2386:	14 c0       	rjmp	.+40     	; 0x23b0 <LCD_WriteCommand+0x48e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2388:	6f 81       	ldd	r22, Y+7	; 0x07
    238a:	78 85       	ldd	r23, Y+8	; 0x08
    238c:	89 85       	ldd	r24, Y+9	; 0x09
    238e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2390:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2394:	dc 01       	movw	r26, r24
    2396:	cb 01       	movw	r24, r22
    2398:	9e 83       	std	Y+6, r25	; 0x06
    239a:	8d 83       	std	Y+5, r24	; 0x05
    239c:	8d 81       	ldd	r24, Y+5	; 0x05
    239e:	9e 81       	ldd	r25, Y+6	; 0x06
    23a0:	9a 83       	std	Y+2, r25	; 0x02
    23a2:	89 83       	std	Y+1, r24	; 0x01
    23a4:	89 81       	ldd	r24, Y+1	; 0x01
    23a6:	9a 81       	ldd	r25, Y+2	; 0x02
    23a8:	01 97       	sbiw	r24, 0x01	; 1
    23aa:	f1 f7       	brne	.-4      	; 0x23a8 <LCD_WriteCommand+0x486>
    23ac:	9a 83       	std	Y+2, r25	; 0x02
    23ae:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(2);
	}
}
    23b0:	e9 96       	adiw	r28, 0x39	; 57
    23b2:	0f b6       	in	r0, 0x3f	; 63
    23b4:	f8 94       	cli
    23b6:	de bf       	out	0x3e, r29	; 62
    23b8:	0f be       	out	0x3f, r0	; 63
    23ba:	cd bf       	out	0x3d, r28	; 61
    23bc:	cf 91       	pop	r28
    23be:	df 91       	pop	r29
    23c0:	08 95       	ret

000023c2 <LCD_WriteData>:

void LCD_WriteData(u8 Data)
{
    23c2:	df 93       	push	r29
    23c4:	cf 93       	push	r28
    23c6:	cd b7       	in	r28, 0x3d	; 61
    23c8:	de b7       	in	r29, 0x3e	; 62
    23ca:	e9 97       	sbiw	r28, 0x39	; 57
    23cc:	0f b6       	in	r0, 0x3f	; 63
    23ce:	f8 94       	cli
    23d0:	de bf       	out	0x3e, r29	; 62
    23d2:	0f be       	out	0x3f, r0	; 63
    23d4:	cd bf       	out	0x3d, r28	; 61
    23d6:	89 af       	std	Y+57, r24	; 0x39
	DIO_SetPinValue(GPORT , RS ,DIO_HIGH);  //RS
    23d8:	81 e0       	ldi	r24, 0x01	; 1
    23da:	61 e0       	ldi	r22, 0x01	; 1
    23dc:	41 e0       	ldi	r20, 0x01	; 1
    23de:	0e 94 38 0b 	call	0x1670	; 0x1670 <DIO_SetPinValue>
	DIO_SetPinValue(GPORT , RW ,DIO_LOW);  //R/W
    23e2:	81 e0       	ldi	r24, 0x01	; 1
    23e4:	67 e0       	ldi	r22, 0x07	; 7
    23e6:	40 e0       	ldi	r20, 0x00	; 0
    23e8:	0e 94 38 0b 	call	0x1670	; 0x1670 <DIO_SetPinValue>
	DIO_SetPinValue(GPORT , EN ,DIO_HIGH);
    23ec:	81 e0       	ldi	r24, 0x01	; 1
    23ee:	62 e0       	ldi	r22, 0x02	; 2
    23f0:	41 e0       	ldi	r20, 0x01	; 1
    23f2:	0e 94 38 0b 	call	0x1670	; 0x1670 <DIO_SetPinValue>
	DIO_SetPinValue (LCD_PORT ,DIO_PIN4 ,GET_BIT(Data,4));
    23f6:	89 ad       	ldd	r24, Y+57	; 0x39
    23f8:	82 95       	swap	r24
    23fa:	8f 70       	andi	r24, 0x0F	; 15
    23fc:	98 2f       	mov	r25, r24
    23fe:	91 70       	andi	r25, 0x01	; 1
    2400:	80 e0       	ldi	r24, 0x00	; 0
    2402:	64 e0       	ldi	r22, 0x04	; 4
    2404:	49 2f       	mov	r20, r25
    2406:	0e 94 38 0b 	call	0x1670	; 0x1670 <DIO_SetPinValue>
	DIO_SetPinValue (LCD_PORT ,DIO_PIN5 ,GET_BIT(Data,5));
    240a:	89 ad       	ldd	r24, Y+57	; 0x39
    240c:	82 95       	swap	r24
    240e:	86 95       	lsr	r24
    2410:	87 70       	andi	r24, 0x07	; 7
    2412:	98 2f       	mov	r25, r24
    2414:	91 70       	andi	r25, 0x01	; 1
    2416:	80 e0       	ldi	r24, 0x00	; 0
    2418:	65 e0       	ldi	r22, 0x05	; 5
    241a:	49 2f       	mov	r20, r25
    241c:	0e 94 38 0b 	call	0x1670	; 0x1670 <DIO_SetPinValue>
	DIO_SetPinValue (LCD_PORT ,DIO_PIN6 ,GET_BIT(Data,6));
    2420:	89 ad       	ldd	r24, Y+57	; 0x39
    2422:	82 95       	swap	r24
    2424:	86 95       	lsr	r24
    2426:	86 95       	lsr	r24
    2428:	83 70       	andi	r24, 0x03	; 3
    242a:	98 2f       	mov	r25, r24
    242c:	91 70       	andi	r25, 0x01	; 1
    242e:	80 e0       	ldi	r24, 0x00	; 0
    2430:	66 e0       	ldi	r22, 0x06	; 6
    2432:	49 2f       	mov	r20, r25
    2434:	0e 94 38 0b 	call	0x1670	; 0x1670 <DIO_SetPinValue>
	DIO_SetPinValue (LCD_PORT ,DIO_PIN7 ,GET_BIT(Data,7));
    2438:	89 ad       	ldd	r24, Y+57	; 0x39
    243a:	98 2f       	mov	r25, r24
    243c:	99 1f       	adc	r25, r25
    243e:	99 27       	eor	r25, r25
    2440:	99 1f       	adc	r25, r25
    2442:	80 e0       	ldi	r24, 0x00	; 0
    2444:	67 e0       	ldi	r22, 0x07	; 7
    2446:	49 2f       	mov	r20, r25
    2448:	0e 94 38 0b 	call	0x1670	; 0x1670 <DIO_SetPinValue>
    244c:	80 e0       	ldi	r24, 0x00	; 0
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	a0 e8       	ldi	r26, 0x80	; 128
    2452:	bf e3       	ldi	r27, 0x3F	; 63
    2454:	8d ab       	std	Y+53, r24	; 0x35
    2456:	9e ab       	std	Y+54, r25	; 0x36
    2458:	af ab       	std	Y+55, r26	; 0x37
    245a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    245c:	6d a9       	ldd	r22, Y+53	; 0x35
    245e:	7e a9       	ldd	r23, Y+54	; 0x36
    2460:	8f a9       	ldd	r24, Y+55	; 0x37
    2462:	98 ad       	ldd	r25, Y+56	; 0x38
    2464:	20 e0       	ldi	r18, 0x00	; 0
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	4a ef       	ldi	r20, 0xFA	; 250
    246a:	54 e4       	ldi	r21, 0x44	; 68
    246c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2470:	dc 01       	movw	r26, r24
    2472:	cb 01       	movw	r24, r22
    2474:	89 ab       	std	Y+49, r24	; 0x31
    2476:	9a ab       	std	Y+50, r25	; 0x32
    2478:	ab ab       	std	Y+51, r26	; 0x33
    247a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    247c:	69 a9       	ldd	r22, Y+49	; 0x31
    247e:	7a a9       	ldd	r23, Y+50	; 0x32
    2480:	8b a9       	ldd	r24, Y+51	; 0x33
    2482:	9c a9       	ldd	r25, Y+52	; 0x34
    2484:	20 e0       	ldi	r18, 0x00	; 0
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	40 e8       	ldi	r20, 0x80	; 128
    248a:	5f e3       	ldi	r21, 0x3F	; 63
    248c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2490:	88 23       	and	r24, r24
    2492:	2c f4       	brge	.+10     	; 0x249e <LCD_WriteData+0xdc>
		__ticks = 1;
    2494:	81 e0       	ldi	r24, 0x01	; 1
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	98 ab       	std	Y+48, r25	; 0x30
    249a:	8f a7       	std	Y+47, r24	; 0x2f
    249c:	3f c0       	rjmp	.+126    	; 0x251c <LCD_WriteData+0x15a>
	else if (__tmp > 65535)
    249e:	69 a9       	ldd	r22, Y+49	; 0x31
    24a0:	7a a9       	ldd	r23, Y+50	; 0x32
    24a2:	8b a9       	ldd	r24, Y+51	; 0x33
    24a4:	9c a9       	ldd	r25, Y+52	; 0x34
    24a6:	20 e0       	ldi	r18, 0x00	; 0
    24a8:	3f ef       	ldi	r19, 0xFF	; 255
    24aa:	4f e7       	ldi	r20, 0x7F	; 127
    24ac:	57 e4       	ldi	r21, 0x47	; 71
    24ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24b2:	18 16       	cp	r1, r24
    24b4:	4c f5       	brge	.+82     	; 0x2508 <LCD_WriteData+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24b6:	6d a9       	ldd	r22, Y+53	; 0x35
    24b8:	7e a9       	ldd	r23, Y+54	; 0x36
    24ba:	8f a9       	ldd	r24, Y+55	; 0x37
    24bc:	98 ad       	ldd	r25, Y+56	; 0x38
    24be:	20 e0       	ldi	r18, 0x00	; 0
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	40 e2       	ldi	r20, 0x20	; 32
    24c4:	51 e4       	ldi	r21, 0x41	; 65
    24c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ca:	dc 01       	movw	r26, r24
    24cc:	cb 01       	movw	r24, r22
    24ce:	bc 01       	movw	r22, r24
    24d0:	cd 01       	movw	r24, r26
    24d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d6:	dc 01       	movw	r26, r24
    24d8:	cb 01       	movw	r24, r22
    24da:	98 ab       	std	Y+48, r25	; 0x30
    24dc:	8f a7       	std	Y+47, r24	; 0x2f
    24de:	0f c0       	rjmp	.+30     	; 0x24fe <LCD_WriteData+0x13c>
    24e0:	88 ec       	ldi	r24, 0xC8	; 200
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	9e a7       	std	Y+46, r25	; 0x2e
    24e6:	8d a7       	std	Y+45, r24	; 0x2d
    24e8:	8d a5       	ldd	r24, Y+45	; 0x2d
    24ea:	9e a5       	ldd	r25, Y+46	; 0x2e
    24ec:	01 97       	sbiw	r24, 0x01	; 1
    24ee:	f1 f7       	brne	.-4      	; 0x24ec <LCD_WriteData+0x12a>
    24f0:	9e a7       	std	Y+46, r25	; 0x2e
    24f2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    24f6:	98 a9       	ldd	r25, Y+48	; 0x30
    24f8:	01 97       	sbiw	r24, 0x01	; 1
    24fa:	98 ab       	std	Y+48, r25	; 0x30
    24fc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    2500:	98 a9       	ldd	r25, Y+48	; 0x30
    2502:	00 97       	sbiw	r24, 0x00	; 0
    2504:	69 f7       	brne	.-38     	; 0x24e0 <LCD_WriteData+0x11e>
    2506:	14 c0       	rjmp	.+40     	; 0x2530 <LCD_WriteData+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2508:	69 a9       	ldd	r22, Y+49	; 0x31
    250a:	7a a9       	ldd	r23, Y+50	; 0x32
    250c:	8b a9       	ldd	r24, Y+51	; 0x33
    250e:	9c a9       	ldd	r25, Y+52	; 0x34
    2510:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2514:	dc 01       	movw	r26, r24
    2516:	cb 01       	movw	r24, r22
    2518:	98 ab       	std	Y+48, r25	; 0x30
    251a:	8f a7       	std	Y+47, r24	; 0x2f
    251c:	8f a5       	ldd	r24, Y+47	; 0x2f
    251e:	98 a9       	ldd	r25, Y+48	; 0x30
    2520:	9c a7       	std	Y+44, r25	; 0x2c
    2522:	8b a7       	std	Y+43, r24	; 0x2b
    2524:	8b a5       	ldd	r24, Y+43	; 0x2b
    2526:	9c a5       	ldd	r25, Y+44	; 0x2c
    2528:	01 97       	sbiw	r24, 0x01	; 1
    252a:	f1 f7       	brne	.-4      	; 0x2528 <LCD_WriteData+0x166>
    252c:	9c a7       	std	Y+44, r25	; 0x2c
    252e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_SetPinValue(GPORT,EN,DIO_LOW);
    2530:	81 e0       	ldi	r24, 0x01	; 1
    2532:	62 e0       	ldi	r22, 0x02	; 2
    2534:	40 e0       	ldi	r20, 0x00	; 0
    2536:	0e 94 38 0b 	call	0x1670	; 0x1670 <DIO_SetPinValue>
    253a:	80 e0       	ldi	r24, 0x00	; 0
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	a0 e8       	ldi	r26, 0x80	; 128
    2540:	bf e3       	ldi	r27, 0x3F	; 63
    2542:	8f a3       	std	Y+39, r24	; 0x27
    2544:	98 a7       	std	Y+40, r25	; 0x28
    2546:	a9 a7       	std	Y+41, r26	; 0x29
    2548:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    254a:	6f a1       	ldd	r22, Y+39	; 0x27
    254c:	78 a5       	ldd	r23, Y+40	; 0x28
    254e:	89 a5       	ldd	r24, Y+41	; 0x29
    2550:	9a a5       	ldd	r25, Y+42	; 0x2a
    2552:	20 e0       	ldi	r18, 0x00	; 0
    2554:	30 e0       	ldi	r19, 0x00	; 0
    2556:	4a ef       	ldi	r20, 0xFA	; 250
    2558:	54 e4       	ldi	r21, 0x44	; 68
    255a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    255e:	dc 01       	movw	r26, r24
    2560:	cb 01       	movw	r24, r22
    2562:	8b a3       	std	Y+35, r24	; 0x23
    2564:	9c a3       	std	Y+36, r25	; 0x24
    2566:	ad a3       	std	Y+37, r26	; 0x25
    2568:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    256a:	6b a1       	ldd	r22, Y+35	; 0x23
    256c:	7c a1       	ldd	r23, Y+36	; 0x24
    256e:	8d a1       	ldd	r24, Y+37	; 0x25
    2570:	9e a1       	ldd	r25, Y+38	; 0x26
    2572:	20 e0       	ldi	r18, 0x00	; 0
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	40 e8       	ldi	r20, 0x80	; 128
    2578:	5f e3       	ldi	r21, 0x3F	; 63
    257a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    257e:	88 23       	and	r24, r24
    2580:	2c f4       	brge	.+10     	; 0x258c <LCD_WriteData+0x1ca>
		__ticks = 1;
    2582:	81 e0       	ldi	r24, 0x01	; 1
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	9a a3       	std	Y+34, r25	; 0x22
    2588:	89 a3       	std	Y+33, r24	; 0x21
    258a:	3f c0       	rjmp	.+126    	; 0x260a <LCD_WriteData+0x248>
	else if (__tmp > 65535)
    258c:	6b a1       	ldd	r22, Y+35	; 0x23
    258e:	7c a1       	ldd	r23, Y+36	; 0x24
    2590:	8d a1       	ldd	r24, Y+37	; 0x25
    2592:	9e a1       	ldd	r25, Y+38	; 0x26
    2594:	20 e0       	ldi	r18, 0x00	; 0
    2596:	3f ef       	ldi	r19, 0xFF	; 255
    2598:	4f e7       	ldi	r20, 0x7F	; 127
    259a:	57 e4       	ldi	r21, 0x47	; 71
    259c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25a0:	18 16       	cp	r1, r24
    25a2:	4c f5       	brge	.+82     	; 0x25f6 <LCD_WriteData+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25a4:	6f a1       	ldd	r22, Y+39	; 0x27
    25a6:	78 a5       	ldd	r23, Y+40	; 0x28
    25a8:	89 a5       	ldd	r24, Y+41	; 0x29
    25aa:	9a a5       	ldd	r25, Y+42	; 0x2a
    25ac:	20 e0       	ldi	r18, 0x00	; 0
    25ae:	30 e0       	ldi	r19, 0x00	; 0
    25b0:	40 e2       	ldi	r20, 0x20	; 32
    25b2:	51 e4       	ldi	r21, 0x41	; 65
    25b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b8:	dc 01       	movw	r26, r24
    25ba:	cb 01       	movw	r24, r22
    25bc:	bc 01       	movw	r22, r24
    25be:	cd 01       	movw	r24, r26
    25c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c4:	dc 01       	movw	r26, r24
    25c6:	cb 01       	movw	r24, r22
    25c8:	9a a3       	std	Y+34, r25	; 0x22
    25ca:	89 a3       	std	Y+33, r24	; 0x21
    25cc:	0f c0       	rjmp	.+30     	; 0x25ec <LCD_WriteData+0x22a>
    25ce:	88 ec       	ldi	r24, 0xC8	; 200
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	98 a3       	std	Y+32, r25	; 0x20
    25d4:	8f 8f       	std	Y+31, r24	; 0x1f
    25d6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25d8:	98 a1       	ldd	r25, Y+32	; 0x20
    25da:	01 97       	sbiw	r24, 0x01	; 1
    25dc:	f1 f7       	brne	.-4      	; 0x25da <LCD_WriteData+0x218>
    25de:	98 a3       	std	Y+32, r25	; 0x20
    25e0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25e2:	89 a1       	ldd	r24, Y+33	; 0x21
    25e4:	9a a1       	ldd	r25, Y+34	; 0x22
    25e6:	01 97       	sbiw	r24, 0x01	; 1
    25e8:	9a a3       	std	Y+34, r25	; 0x22
    25ea:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ec:	89 a1       	ldd	r24, Y+33	; 0x21
    25ee:	9a a1       	ldd	r25, Y+34	; 0x22
    25f0:	00 97       	sbiw	r24, 0x00	; 0
    25f2:	69 f7       	brne	.-38     	; 0x25ce <LCD_WriteData+0x20c>
    25f4:	14 c0       	rjmp	.+40     	; 0x261e <LCD_WriteData+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25f6:	6b a1       	ldd	r22, Y+35	; 0x23
    25f8:	7c a1       	ldd	r23, Y+36	; 0x24
    25fa:	8d a1       	ldd	r24, Y+37	; 0x25
    25fc:	9e a1       	ldd	r25, Y+38	; 0x26
    25fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2602:	dc 01       	movw	r26, r24
    2604:	cb 01       	movw	r24, r22
    2606:	9a a3       	std	Y+34, r25	; 0x22
    2608:	89 a3       	std	Y+33, r24	; 0x21
    260a:	89 a1       	ldd	r24, Y+33	; 0x21
    260c:	9a a1       	ldd	r25, Y+34	; 0x22
    260e:	9e 8f       	std	Y+30, r25	; 0x1e
    2610:	8d 8f       	std	Y+29, r24	; 0x1d
    2612:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2614:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2616:	01 97       	sbiw	r24, 0x01	; 1
    2618:	f1 f7       	brne	.-4      	; 0x2616 <LCD_WriteData+0x254>
    261a:	9e 8f       	std	Y+30, r25	; 0x1e
    261c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	DIO_SetPinValue(GPORT , EN ,DIO_HIGH);
    261e:	81 e0       	ldi	r24, 0x01	; 1
    2620:	62 e0       	ldi	r22, 0x02	; 2
    2622:	41 e0       	ldi	r20, 0x01	; 1
    2624:	0e 94 38 0b 	call	0x1670	; 0x1670 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_PORT ,DIO_PIN4 ,GET_BIT(Data,0));
    2628:	89 ad       	ldd	r24, Y+57	; 0x39
    262a:	98 2f       	mov	r25, r24
    262c:	91 70       	andi	r25, 0x01	; 1
    262e:	80 e0       	ldi	r24, 0x00	; 0
    2630:	64 e0       	ldi	r22, 0x04	; 4
    2632:	49 2f       	mov	r20, r25
    2634:	0e 94 38 0b 	call	0x1670	; 0x1670 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_PORT ,DIO_PIN5 ,GET_BIT(Data,1));
    2638:	89 ad       	ldd	r24, Y+57	; 0x39
    263a:	86 95       	lsr	r24
    263c:	98 2f       	mov	r25, r24
    263e:	91 70       	andi	r25, 0x01	; 1
    2640:	80 e0       	ldi	r24, 0x00	; 0
    2642:	65 e0       	ldi	r22, 0x05	; 5
    2644:	49 2f       	mov	r20, r25
    2646:	0e 94 38 0b 	call	0x1670	; 0x1670 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_PORT ,DIO_PIN6 ,GET_BIT(Data,2));
    264a:	89 ad       	ldd	r24, Y+57	; 0x39
    264c:	86 95       	lsr	r24
    264e:	86 95       	lsr	r24
    2650:	98 2f       	mov	r25, r24
    2652:	91 70       	andi	r25, 0x01	; 1
    2654:	80 e0       	ldi	r24, 0x00	; 0
    2656:	66 e0       	ldi	r22, 0x06	; 6
    2658:	49 2f       	mov	r20, r25
    265a:	0e 94 38 0b 	call	0x1670	; 0x1670 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_PORT ,DIO_PIN7 ,GET_BIT(Data,3));
    265e:	89 ad       	ldd	r24, Y+57	; 0x39
    2660:	86 95       	lsr	r24
    2662:	86 95       	lsr	r24
    2664:	86 95       	lsr	r24
    2666:	98 2f       	mov	r25, r24
    2668:	91 70       	andi	r25, 0x01	; 1
    266a:	80 e0       	ldi	r24, 0x00	; 0
    266c:	67 e0       	ldi	r22, 0x07	; 7
    266e:	49 2f       	mov	r20, r25
    2670:	0e 94 38 0b 	call	0x1670	; 0x1670 <DIO_SetPinValue>
    2674:	80 e0       	ldi	r24, 0x00	; 0
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	a0 e8       	ldi	r26, 0x80	; 128
    267a:	bf e3       	ldi	r27, 0x3F	; 63
    267c:	89 8f       	std	Y+25, r24	; 0x19
    267e:	9a 8f       	std	Y+26, r25	; 0x1a
    2680:	ab 8f       	std	Y+27, r26	; 0x1b
    2682:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2684:	69 8d       	ldd	r22, Y+25	; 0x19
    2686:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2688:	8b 8d       	ldd	r24, Y+27	; 0x1b
    268a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    268c:	20 e0       	ldi	r18, 0x00	; 0
    268e:	30 e0       	ldi	r19, 0x00	; 0
    2690:	4a ef       	ldi	r20, 0xFA	; 250
    2692:	54 e4       	ldi	r21, 0x44	; 68
    2694:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2698:	dc 01       	movw	r26, r24
    269a:	cb 01       	movw	r24, r22
    269c:	8d 8b       	std	Y+21, r24	; 0x15
    269e:	9e 8b       	std	Y+22, r25	; 0x16
    26a0:	af 8b       	std	Y+23, r26	; 0x17
    26a2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26a4:	6d 89       	ldd	r22, Y+21	; 0x15
    26a6:	7e 89       	ldd	r23, Y+22	; 0x16
    26a8:	8f 89       	ldd	r24, Y+23	; 0x17
    26aa:	98 8d       	ldd	r25, Y+24	; 0x18
    26ac:	20 e0       	ldi	r18, 0x00	; 0
    26ae:	30 e0       	ldi	r19, 0x00	; 0
    26b0:	40 e8       	ldi	r20, 0x80	; 128
    26b2:	5f e3       	ldi	r21, 0x3F	; 63
    26b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26b8:	88 23       	and	r24, r24
    26ba:	2c f4       	brge	.+10     	; 0x26c6 <LCD_WriteData+0x304>
		__ticks = 1;
    26bc:	81 e0       	ldi	r24, 0x01	; 1
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	9c 8b       	std	Y+20, r25	; 0x14
    26c2:	8b 8b       	std	Y+19, r24	; 0x13
    26c4:	3f c0       	rjmp	.+126    	; 0x2744 <LCD_WriteData+0x382>
	else if (__tmp > 65535)
    26c6:	6d 89       	ldd	r22, Y+21	; 0x15
    26c8:	7e 89       	ldd	r23, Y+22	; 0x16
    26ca:	8f 89       	ldd	r24, Y+23	; 0x17
    26cc:	98 8d       	ldd	r25, Y+24	; 0x18
    26ce:	20 e0       	ldi	r18, 0x00	; 0
    26d0:	3f ef       	ldi	r19, 0xFF	; 255
    26d2:	4f e7       	ldi	r20, 0x7F	; 127
    26d4:	57 e4       	ldi	r21, 0x47	; 71
    26d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26da:	18 16       	cp	r1, r24
    26dc:	4c f5       	brge	.+82     	; 0x2730 <LCD_WriteData+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26de:	69 8d       	ldd	r22, Y+25	; 0x19
    26e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26e6:	20 e0       	ldi	r18, 0x00	; 0
    26e8:	30 e0       	ldi	r19, 0x00	; 0
    26ea:	40 e2       	ldi	r20, 0x20	; 32
    26ec:	51 e4       	ldi	r21, 0x41	; 65
    26ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26f2:	dc 01       	movw	r26, r24
    26f4:	cb 01       	movw	r24, r22
    26f6:	bc 01       	movw	r22, r24
    26f8:	cd 01       	movw	r24, r26
    26fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26fe:	dc 01       	movw	r26, r24
    2700:	cb 01       	movw	r24, r22
    2702:	9c 8b       	std	Y+20, r25	; 0x14
    2704:	8b 8b       	std	Y+19, r24	; 0x13
    2706:	0f c0       	rjmp	.+30     	; 0x2726 <LCD_WriteData+0x364>
    2708:	88 ec       	ldi	r24, 0xC8	; 200
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	9a 8b       	std	Y+18, r25	; 0x12
    270e:	89 8b       	std	Y+17, r24	; 0x11
    2710:	89 89       	ldd	r24, Y+17	; 0x11
    2712:	9a 89       	ldd	r25, Y+18	; 0x12
    2714:	01 97       	sbiw	r24, 0x01	; 1
    2716:	f1 f7       	brne	.-4      	; 0x2714 <LCD_WriteData+0x352>
    2718:	9a 8b       	std	Y+18, r25	; 0x12
    271a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    271c:	8b 89       	ldd	r24, Y+19	; 0x13
    271e:	9c 89       	ldd	r25, Y+20	; 0x14
    2720:	01 97       	sbiw	r24, 0x01	; 1
    2722:	9c 8b       	std	Y+20, r25	; 0x14
    2724:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2726:	8b 89       	ldd	r24, Y+19	; 0x13
    2728:	9c 89       	ldd	r25, Y+20	; 0x14
    272a:	00 97       	sbiw	r24, 0x00	; 0
    272c:	69 f7       	brne	.-38     	; 0x2708 <LCD_WriteData+0x346>
    272e:	14 c0       	rjmp	.+40     	; 0x2758 <LCD_WriteData+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2730:	6d 89       	ldd	r22, Y+21	; 0x15
    2732:	7e 89       	ldd	r23, Y+22	; 0x16
    2734:	8f 89       	ldd	r24, Y+23	; 0x17
    2736:	98 8d       	ldd	r25, Y+24	; 0x18
    2738:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    273c:	dc 01       	movw	r26, r24
    273e:	cb 01       	movw	r24, r22
    2740:	9c 8b       	std	Y+20, r25	; 0x14
    2742:	8b 8b       	std	Y+19, r24	; 0x13
    2744:	8b 89       	ldd	r24, Y+19	; 0x13
    2746:	9c 89       	ldd	r25, Y+20	; 0x14
    2748:	98 8b       	std	Y+16, r25	; 0x10
    274a:	8f 87       	std	Y+15, r24	; 0x0f
    274c:	8f 85       	ldd	r24, Y+15	; 0x0f
    274e:	98 89       	ldd	r25, Y+16	; 0x10
    2750:	01 97       	sbiw	r24, 0x01	; 1
    2752:	f1 f7       	brne	.-4      	; 0x2750 <LCD_WriteData+0x38e>
    2754:	98 8b       	std	Y+16, r25	; 0x10
    2756:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_SetPinValue(GPORT,EN,DIO_LOW);
    2758:	81 e0       	ldi	r24, 0x01	; 1
    275a:	62 e0       	ldi	r22, 0x02	; 2
    275c:	40 e0       	ldi	r20, 0x00	; 0
    275e:	0e 94 38 0b 	call	0x1670	; 0x1670 <DIO_SetPinValue>
    2762:	80 e0       	ldi	r24, 0x00	; 0
    2764:	90 e0       	ldi	r25, 0x00	; 0
    2766:	a0 e0       	ldi	r26, 0x00	; 0
    2768:	b0 e4       	ldi	r27, 0x40	; 64
    276a:	8b 87       	std	Y+11, r24	; 0x0b
    276c:	9c 87       	std	Y+12, r25	; 0x0c
    276e:	ad 87       	std	Y+13, r26	; 0x0d
    2770:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2772:	6b 85       	ldd	r22, Y+11	; 0x0b
    2774:	7c 85       	ldd	r23, Y+12	; 0x0c
    2776:	8d 85       	ldd	r24, Y+13	; 0x0d
    2778:	9e 85       	ldd	r25, Y+14	; 0x0e
    277a:	20 e0       	ldi	r18, 0x00	; 0
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	4a ef       	ldi	r20, 0xFA	; 250
    2780:	54 e4       	ldi	r21, 0x44	; 68
    2782:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2786:	dc 01       	movw	r26, r24
    2788:	cb 01       	movw	r24, r22
    278a:	8f 83       	std	Y+7, r24	; 0x07
    278c:	98 87       	std	Y+8, r25	; 0x08
    278e:	a9 87       	std	Y+9, r26	; 0x09
    2790:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2792:	6f 81       	ldd	r22, Y+7	; 0x07
    2794:	78 85       	ldd	r23, Y+8	; 0x08
    2796:	89 85       	ldd	r24, Y+9	; 0x09
    2798:	9a 85       	ldd	r25, Y+10	; 0x0a
    279a:	20 e0       	ldi	r18, 0x00	; 0
    279c:	30 e0       	ldi	r19, 0x00	; 0
    279e:	40 e8       	ldi	r20, 0x80	; 128
    27a0:	5f e3       	ldi	r21, 0x3F	; 63
    27a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27a6:	88 23       	and	r24, r24
    27a8:	2c f4       	brge	.+10     	; 0x27b4 <LCD_WriteData+0x3f2>
		__ticks = 1;
    27aa:	81 e0       	ldi	r24, 0x01	; 1
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	9e 83       	std	Y+6, r25	; 0x06
    27b0:	8d 83       	std	Y+5, r24	; 0x05
    27b2:	3f c0       	rjmp	.+126    	; 0x2832 <LCD_WriteData+0x470>
	else if (__tmp > 65535)
    27b4:	6f 81       	ldd	r22, Y+7	; 0x07
    27b6:	78 85       	ldd	r23, Y+8	; 0x08
    27b8:	89 85       	ldd	r24, Y+9	; 0x09
    27ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    27bc:	20 e0       	ldi	r18, 0x00	; 0
    27be:	3f ef       	ldi	r19, 0xFF	; 255
    27c0:	4f e7       	ldi	r20, 0x7F	; 127
    27c2:	57 e4       	ldi	r21, 0x47	; 71
    27c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27c8:	18 16       	cp	r1, r24
    27ca:	4c f5       	brge	.+82     	; 0x281e <LCD_WriteData+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    27ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    27d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    27d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    27d4:	20 e0       	ldi	r18, 0x00	; 0
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	40 e2       	ldi	r20, 0x20	; 32
    27da:	51 e4       	ldi	r21, 0x41	; 65
    27dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e0:	dc 01       	movw	r26, r24
    27e2:	cb 01       	movw	r24, r22
    27e4:	bc 01       	movw	r22, r24
    27e6:	cd 01       	movw	r24, r26
    27e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ec:	dc 01       	movw	r26, r24
    27ee:	cb 01       	movw	r24, r22
    27f0:	9e 83       	std	Y+6, r25	; 0x06
    27f2:	8d 83       	std	Y+5, r24	; 0x05
    27f4:	0f c0       	rjmp	.+30     	; 0x2814 <LCD_WriteData+0x452>
    27f6:	88 ec       	ldi	r24, 0xC8	; 200
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	9c 83       	std	Y+4, r25	; 0x04
    27fc:	8b 83       	std	Y+3, r24	; 0x03
    27fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2800:	9c 81       	ldd	r25, Y+4	; 0x04
    2802:	01 97       	sbiw	r24, 0x01	; 1
    2804:	f1 f7       	brne	.-4      	; 0x2802 <LCD_WriteData+0x440>
    2806:	9c 83       	std	Y+4, r25	; 0x04
    2808:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    280a:	8d 81       	ldd	r24, Y+5	; 0x05
    280c:	9e 81       	ldd	r25, Y+6	; 0x06
    280e:	01 97       	sbiw	r24, 0x01	; 1
    2810:	9e 83       	std	Y+6, r25	; 0x06
    2812:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2814:	8d 81       	ldd	r24, Y+5	; 0x05
    2816:	9e 81       	ldd	r25, Y+6	; 0x06
    2818:	00 97       	sbiw	r24, 0x00	; 0
    281a:	69 f7       	brne	.-38     	; 0x27f6 <LCD_WriteData+0x434>
    281c:	14 c0       	rjmp	.+40     	; 0x2846 <LCD_WriteData+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    281e:	6f 81       	ldd	r22, Y+7	; 0x07
    2820:	78 85       	ldd	r23, Y+8	; 0x08
    2822:	89 85       	ldd	r24, Y+9	; 0x09
    2824:	9a 85       	ldd	r25, Y+10	; 0x0a
    2826:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    282a:	dc 01       	movw	r26, r24
    282c:	cb 01       	movw	r24, r22
    282e:	9e 83       	std	Y+6, r25	; 0x06
    2830:	8d 83       	std	Y+5, r24	; 0x05
    2832:	8d 81       	ldd	r24, Y+5	; 0x05
    2834:	9e 81       	ldd	r25, Y+6	; 0x06
    2836:	9a 83       	std	Y+2, r25	; 0x02
    2838:	89 83       	std	Y+1, r24	; 0x01
    283a:	89 81       	ldd	r24, Y+1	; 0x01
    283c:	9a 81       	ldd	r25, Y+2	; 0x02
    283e:	01 97       	sbiw	r24, 0x01	; 1
    2840:	f1 f7       	brne	.-4      	; 0x283e <LCD_WriteData+0x47c>
    2842:	9a 83       	std	Y+2, r25	; 0x02
    2844:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(2);
}
    2846:	e9 96       	adiw	r28, 0x39	; 57
    2848:	0f b6       	in	r0, 0x3f	; 63
    284a:	f8 94       	cli
    284c:	de bf       	out	0x3e, r29	; 62
    284e:	0f be       	out	0x3f, r0	; 63
    2850:	cd bf       	out	0x3d, r28	; 61
    2852:	cf 91       	pop	r28
    2854:	df 91       	pop	r29
    2856:	08 95       	ret

00002858 <LCD_WriteString>:
#else 
       #error   "WRONG CONNECTION"

#endif
void LCD_WriteString(char *String)
{
    2858:	df 93       	push	r29
    285a:	cf 93       	push	r28
    285c:	00 d0       	rcall	.+0      	; 0x285e <LCD_WriteString+0x6>
    285e:	0f 92       	push	r0
    2860:	cd b7       	in	r28, 0x3d	; 61
    2862:	de b7       	in	r29, 0x3e	; 62
    2864:	9b 83       	std	Y+3, r25	; 0x03
    2866:	8a 83       	std	Y+2, r24	; 0x02
	u8 i =0;
    2868:	19 82       	std	Y+1, r1	; 0x01
    286a:	0e c0       	rjmp	.+28     	; 0x2888 <LCD_WriteString+0x30>
	while(String[i] != '\0')
	{
		LCD_WriteData(String[i]);
    286c:	89 81       	ldd	r24, Y+1	; 0x01
    286e:	28 2f       	mov	r18, r24
    2870:	30 e0       	ldi	r19, 0x00	; 0
    2872:	8a 81       	ldd	r24, Y+2	; 0x02
    2874:	9b 81       	ldd	r25, Y+3	; 0x03
    2876:	fc 01       	movw	r30, r24
    2878:	e2 0f       	add	r30, r18
    287a:	f3 1f       	adc	r31, r19
    287c:	80 81       	ld	r24, Z
    287e:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <LCD_WriteData>
		i++;
    2882:	89 81       	ldd	r24, Y+1	; 0x01
    2884:	8f 5f       	subi	r24, 0xFF	; 255
    2886:	89 83       	std	Y+1, r24	; 0x01

#endif
void LCD_WriteString(char *String)
{
	u8 i =0;
	while(String[i] != '\0')
    2888:	89 81       	ldd	r24, Y+1	; 0x01
    288a:	28 2f       	mov	r18, r24
    288c:	30 e0       	ldi	r19, 0x00	; 0
    288e:	8a 81       	ldd	r24, Y+2	; 0x02
    2890:	9b 81       	ldd	r25, Y+3	; 0x03
    2892:	fc 01       	movw	r30, r24
    2894:	e2 0f       	add	r30, r18
    2896:	f3 1f       	adc	r31, r19
    2898:	80 81       	ld	r24, Z
    289a:	88 23       	and	r24, r24
    289c:	39 f7       	brne	.-50     	; 0x286c <LCD_WriteString+0x14>
	{
		LCD_WriteData(String[i]);
		i++;
	}
}
    289e:	0f 90       	pop	r0
    28a0:	0f 90       	pop	r0
    28a2:	0f 90       	pop	r0
    28a4:	cf 91       	pop	r28
    28a6:	df 91       	pop	r29
    28a8:	08 95       	ret

000028aa <LCD_GoToXY>:

void LCD_GoToXY(u8 X_Pos,u8 Y_Pos)
{
    28aa:	df 93       	push	r29
    28ac:	cf 93       	push	r28
    28ae:	00 d0       	rcall	.+0      	; 0x28b0 <LCD_GoToXY+0x6>
    28b0:	0f 92       	push	r0
    28b2:	cd b7       	in	r28, 0x3d	; 61
    28b4:	de b7       	in	r29, 0x3e	; 62
    28b6:	8a 83       	std	Y+2, r24	; 0x02
    28b8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_Adress ;
	if(X_Pos == 0 )
    28ba:	8a 81       	ldd	r24, Y+2	; 0x02
    28bc:	88 23       	and	r24, r24
    28be:	19 f4       	brne	.+6      	; 0x28c6 <LCD_GoToXY+0x1c>
	{
		Local_Adress = Y_Pos ;
    28c0:	8b 81       	ldd	r24, Y+3	; 0x03
    28c2:	89 83       	std	Y+1, r24	; 0x01
    28c4:	06 c0       	rjmp	.+12     	; 0x28d2 <LCD_GoToXY+0x28>
	}
	else if (X_Pos == 1)
    28c6:	8a 81       	ldd	r24, Y+2	; 0x02
    28c8:	81 30       	cpi	r24, 0x01	; 1
    28ca:	19 f4       	brne	.+6      	; 0x28d2 <LCD_GoToXY+0x28>
	{
		Local_Adress = Y_Pos + 0x40 ;
    28cc:	8b 81       	ldd	r24, Y+3	; 0x03
    28ce:	80 5c       	subi	r24, 0xC0	; 192
    28d0:	89 83       	std	Y+1, r24	; 0x01
	}
	LCD_WriteCommand(Local_Adress+128);   // + 0x80
    28d2:	89 81       	ldd	r24, Y+1	; 0x01
    28d4:	80 58       	subi	r24, 0x80	; 128
    28d6:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <LCD_WriteCommand>
}
    28da:	0f 90       	pop	r0
    28dc:	0f 90       	pop	r0
    28de:	0f 90       	pop	r0
    28e0:	cf 91       	pop	r28
    28e2:	df 91       	pop	r29
    28e4:	08 95       	ret

000028e6 <LCD_WriteDigits>:

void LCD_WriteDigits(s32 Number)
{
    28e6:	df 93       	push	r29
    28e8:	cf 93       	push	r28
    28ea:	cd b7       	in	r28, 0x3d	; 61
    28ec:	de b7       	in	r29, 0x3e	; 62
    28ee:	63 97       	sbiw	r28, 0x13	; 19
    28f0:	0f b6       	in	r0, 0x3f	; 63
    28f2:	f8 94       	cli
    28f4:	de bf       	out	0x3e, r29	; 62
    28f6:	0f be       	out	0x3f, r0	; 63
    28f8:	cd bf       	out	0x3d, r28	; 61
    28fa:	68 8b       	std	Y+16, r22	; 0x10
    28fc:	79 8b       	std	Y+17, r23	; 0x11
    28fe:	8a 8b       	std	Y+18, r24	; 0x12
    2900:	9b 8b       	std	Y+19, r25	; 0x13
	u32 remainder;
	u8 LocalArrOfDigits[10]={0};
    2902:	8a e0       	ldi	r24, 0x0A	; 10
    2904:	fe 01       	movw	r30, r28
    2906:	36 96       	adiw	r30, 0x06	; 6
    2908:	df 01       	movw	r26, r30
    290a:	98 2f       	mov	r25, r24
    290c:	1d 92       	st	X+, r1
    290e:	9a 95       	dec	r25
    2910:	e9 f7       	brne	.-6      	; 0x290c <LCD_WriteDigits+0x26>
	u8 index =0 ;
    2912:	19 82       	std	Y+1, r1	; 0x01
	if(Number == 0)
    2914:	88 89       	ldd	r24, Y+16	; 0x10
    2916:	99 89       	ldd	r25, Y+17	; 0x11
    2918:	aa 89       	ldd	r26, Y+18	; 0x12
    291a:	bb 89       	ldd	r27, Y+19	; 0x13
    291c:	00 97       	sbiw	r24, 0x00	; 0
    291e:	a1 05       	cpc	r26, r1
    2920:	b1 05       	cpc	r27, r1
    2922:	21 f4       	brne	.+8      	; 0x292c <LCD_WriteDigits+0x46>
	{
		LCD_WriteData('0');
    2924:	80 e3       	ldi	r24, 0x30	; 48
    2926:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <LCD_WriteData>
    292a:	77 c0       	rjmp	.+238    	; 0x2a1a <LCD_WriteDigits+0x134>
	}
	else if(Number>0)
    292c:	88 89       	ldd	r24, Y+16	; 0x10
    292e:	99 89       	ldd	r25, Y+17	; 0x11
    2930:	aa 89       	ldd	r26, Y+18	; 0x12
    2932:	bb 89       	ldd	r27, Y+19	; 0x13
    2934:	18 16       	cp	r1, r24
    2936:	19 06       	cpc	r1, r25
    2938:	1a 06       	cpc	r1, r26
    293a:	1b 06       	cpc	r1, r27
    293c:	0c f0       	brlt	.+2      	; 0x2940 <LCD_WriteDigits+0x5a>
    293e:	55 c0       	rjmp	.+170    	; 0x29ea <LCD_WriteDigits+0x104>
    2940:	31 c0       	rjmp	.+98     	; 0x29a4 <LCD_WriteDigits+0xbe>
	{
		while(Number!=0)
		{
			remainder = Number % 10 ;
    2942:	88 89       	ldd	r24, Y+16	; 0x10
    2944:	99 89       	ldd	r25, Y+17	; 0x11
    2946:	aa 89       	ldd	r26, Y+18	; 0x12
    2948:	bb 89       	ldd	r27, Y+19	; 0x13
    294a:	2a e0       	ldi	r18, 0x0A	; 10
    294c:	30 e0       	ldi	r19, 0x00	; 0
    294e:	40 e0       	ldi	r20, 0x00	; 0
    2950:	50 e0       	ldi	r21, 0x00	; 0
    2952:	bc 01       	movw	r22, r24
    2954:	cd 01       	movw	r24, r26
    2956:	0e 94 b0 26 	call	0x4d60	; 0x4d60 <__divmodsi4>
    295a:	dc 01       	movw	r26, r24
    295c:	cb 01       	movw	r24, r22
    295e:	8a 83       	std	Y+2, r24	; 0x02
    2960:	9b 83       	std	Y+3, r25	; 0x03
    2962:	ac 83       	std	Y+4, r26	; 0x04
    2964:	bd 83       	std	Y+5, r27	; 0x05
			LocalArrOfDigits[index]=remainder ;
    2966:	89 81       	ldd	r24, Y+1	; 0x01
    2968:	28 2f       	mov	r18, r24
    296a:	30 e0       	ldi	r19, 0x00	; 0
    296c:	4a 81       	ldd	r20, Y+2	; 0x02
    296e:	ce 01       	movw	r24, r28
    2970:	06 96       	adiw	r24, 0x06	; 6
    2972:	fc 01       	movw	r30, r24
    2974:	e2 0f       	add	r30, r18
    2976:	f3 1f       	adc	r31, r19
    2978:	40 83       	st	Z, r20
			Number =Number/ 10 ;
    297a:	88 89       	ldd	r24, Y+16	; 0x10
    297c:	99 89       	ldd	r25, Y+17	; 0x11
    297e:	aa 89       	ldd	r26, Y+18	; 0x12
    2980:	bb 89       	ldd	r27, Y+19	; 0x13
    2982:	2a e0       	ldi	r18, 0x0A	; 10
    2984:	30 e0       	ldi	r19, 0x00	; 0
    2986:	40 e0       	ldi	r20, 0x00	; 0
    2988:	50 e0       	ldi	r21, 0x00	; 0
    298a:	bc 01       	movw	r22, r24
    298c:	cd 01       	movw	r24, r26
    298e:	0e 94 b0 26 	call	0x4d60	; 0x4d60 <__divmodsi4>
    2992:	da 01       	movw	r26, r20
    2994:	c9 01       	movw	r24, r18
    2996:	88 8b       	std	Y+16, r24	; 0x10
    2998:	99 8b       	std	Y+17, r25	; 0x11
    299a:	aa 8b       	std	Y+18, r26	; 0x12
    299c:	bb 8b       	std	Y+19, r27	; 0x13
			index++;
    299e:	89 81       	ldd	r24, Y+1	; 0x01
    29a0:	8f 5f       	subi	r24, 0xFF	; 255
    29a2:	89 83       	std	Y+1, r24	; 0x01
	{
		LCD_WriteData('0');
	}
	else if(Number>0)
	{
		while(Number!=0)
    29a4:	88 89       	ldd	r24, Y+16	; 0x10
    29a6:	99 89       	ldd	r25, Y+17	; 0x11
    29a8:	aa 89       	ldd	r26, Y+18	; 0x12
    29aa:	bb 89       	ldd	r27, Y+19	; 0x13
    29ac:	00 97       	sbiw	r24, 0x00	; 0
    29ae:	a1 05       	cpc	r26, r1
    29b0:	b1 05       	cpc	r27, r1
    29b2:	39 f6       	brne	.-114    	; 0x2942 <LCD_WriteDigits+0x5c>
			remainder = Number % 10 ;
			LocalArrOfDigits[index]=remainder ;
			Number =Number/ 10 ;
			index++;
		}
		index -- ;
    29b4:	89 81       	ldd	r24, Y+1	; 0x01
    29b6:	81 50       	subi	r24, 0x01	; 1
    29b8:	89 83       	std	Y+1, r24	; 0x01
    29ba:	0f c0       	rjmp	.+30     	; 0x29da <LCD_WriteDigits+0xf4>
		while(index>0)
		{
			LCD_WriteData(LocalArrOfDigits[index]+'0');
    29bc:	89 81       	ldd	r24, Y+1	; 0x01
    29be:	28 2f       	mov	r18, r24
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	ce 01       	movw	r24, r28
    29c4:	06 96       	adiw	r24, 0x06	; 6
    29c6:	fc 01       	movw	r30, r24
    29c8:	e2 0f       	add	r30, r18
    29ca:	f3 1f       	adc	r31, r19
    29cc:	80 81       	ld	r24, Z
    29ce:	80 5d       	subi	r24, 0xD0	; 208
    29d0:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <LCD_WriteData>
			index--;
    29d4:	89 81       	ldd	r24, Y+1	; 0x01
    29d6:	81 50       	subi	r24, 0x01	; 1
    29d8:	89 83       	std	Y+1, r24	; 0x01
			LocalArrOfDigits[index]=remainder ;
			Number =Number/ 10 ;
			index++;
		}
		index -- ;
		while(index>0)
    29da:	89 81       	ldd	r24, Y+1	; 0x01
    29dc:	88 23       	and	r24, r24
    29de:	71 f7       	brne	.-36     	; 0x29bc <LCD_WriteDigits+0xd6>
		{
			LCD_WriteData(LocalArrOfDigits[index]+'0');
			index--;
		}
		LCD_WriteData(LocalArrOfDigits[0]+'0');
    29e0:	8e 81       	ldd	r24, Y+6	; 0x06
    29e2:	80 5d       	subi	r24, 0xD0	; 208
    29e4:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <LCD_WriteData>
    29e8:	18 c0       	rjmp	.+48     	; 0x2a1a <LCD_WriteDigits+0x134>
	}
	else if (Number<0)
    29ea:	88 89       	ldd	r24, Y+16	; 0x10
    29ec:	99 89       	ldd	r25, Y+17	; 0x11
    29ee:	aa 89       	ldd	r26, Y+18	; 0x12
    29f0:	bb 89       	ldd	r27, Y+19	; 0x13
    29f2:	bb 23       	and	r27, r27
    29f4:	94 f4       	brge	.+36     	; 0x2a1a <LCD_WriteDigits+0x134>
	{
		LCD_WriteData('-');
    29f6:	8d e2       	ldi	r24, 0x2D	; 45
    29f8:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <LCD_WriteData>
		LCD_WriteDigits(-Number);
    29fc:	88 89       	ldd	r24, Y+16	; 0x10
    29fe:	99 89       	ldd	r25, Y+17	; 0x11
    2a00:	aa 89       	ldd	r26, Y+18	; 0x12
    2a02:	bb 89       	ldd	r27, Y+19	; 0x13
    2a04:	b0 95       	com	r27
    2a06:	a0 95       	com	r26
    2a08:	90 95       	com	r25
    2a0a:	81 95       	neg	r24
    2a0c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a0e:	af 4f       	sbci	r26, 0xFF	; 255
    2a10:	bf 4f       	sbci	r27, 0xFF	; 255
    2a12:	bc 01       	movw	r22, r24
    2a14:	cd 01       	movw	r24, r26
    2a16:	0e 94 73 14 	call	0x28e6	; 0x28e6 <LCD_WriteDigits>
	}

}
    2a1a:	63 96       	adiw	r28, 0x13	; 19
    2a1c:	0f b6       	in	r0, 0x3f	; 63
    2a1e:	f8 94       	cli
    2a20:	de bf       	out	0x3e, r29	; 62
    2a22:	0f be       	out	0x3f, r0	; 63
    2a24:	cd bf       	out	0x3d, r28	; 61
    2a26:	cf 91       	pop	r28
    2a28:	df 91       	pop	r29
    2a2a:	08 95       	ret

00002a2c <LCD_WriteSpecial>:
void LCD_WriteSpecial(u8 * Special_Character,u8 CGROM_Index,u8 X_Pos ,u8 Y_Pos )
{
    2a2c:	df 93       	push	r29
    2a2e:	cf 93       	push	r28
    2a30:	cd b7       	in	r28, 0x3d	; 61
    2a32:	de b7       	in	r29, 0x3e	; 62
    2a34:	27 97       	sbiw	r28, 0x07	; 7
    2a36:	0f b6       	in	r0, 0x3f	; 63
    2a38:	f8 94       	cli
    2a3a:	de bf       	out	0x3e, r29	; 62
    2a3c:	0f be       	out	0x3f, r0	; 63
    2a3e:	cd bf       	out	0x3d, r28	; 61
    2a40:	9c 83       	std	Y+4, r25	; 0x04
    2a42:	8b 83       	std	Y+3, r24	; 0x03
    2a44:	6d 83       	std	Y+5, r22	; 0x05
    2a46:	4e 83       	std	Y+6, r20	; 0x06
    2a48:	2f 83       	std	Y+7, r18	; 0x07
	LCD_GoToXY(X_Pos, Y_Pos);
    2a4a:	8e 81       	ldd	r24, Y+6	; 0x06
    2a4c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a4e:	0e 94 55 14 	call	0x28aa	; 0x28aa <LCD_GoToXY>
	LCD_WriteData(CGROM_Index);
    2a52:	8d 81       	ldd	r24, Y+5	; 0x05
    2a54:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <LCD_WriteData>
	u8 Local_Adress= CGROM_Index*8  ;
    2a58:	8d 81       	ldd	r24, Y+5	; 0x05
    2a5a:	88 2f       	mov	r24, r24
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	88 0f       	add	r24, r24
    2a60:	99 1f       	adc	r25, r25
    2a62:	88 0f       	add	r24, r24
    2a64:	99 1f       	adc	r25, r25
    2a66:	88 0f       	add	r24, r24
    2a68:	99 1f       	adc	r25, r25
    2a6a:	8a 83       	std	Y+2, r24	; 0x02
        SET_BIT(Local_Adress,6); //from data sheet
    2a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a6e:	80 64       	ori	r24, 0x40	; 64
    2a70:	8a 83       	std	Y+2, r24	; 0x02
	LCD_WriteCommand(Local_Adress); //start writting in CGROM
    2a72:	8a 81       	ldd	r24, Y+2	; 0x02
    2a74:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <LCD_WriteCommand>
	for (u8 Local_Index = 0; Local_Index < 8; Local_Index++) {
    2a78:	19 82       	std	Y+1, r1	; 0x01
    2a7a:	0e c0       	rjmp	.+28     	; 0x2a98 <LCD_WriteSpecial+0x6c>
		LCD_WriteData(Special_Character[Local_Index]);
    2a7c:	89 81       	ldd	r24, Y+1	; 0x01
    2a7e:	28 2f       	mov	r18, r24
    2a80:	30 e0       	ldi	r19, 0x00	; 0
    2a82:	8b 81       	ldd	r24, Y+3	; 0x03
    2a84:	9c 81       	ldd	r25, Y+4	; 0x04
    2a86:	fc 01       	movw	r30, r24
    2a88:	e2 0f       	add	r30, r18
    2a8a:	f3 1f       	adc	r31, r19
    2a8c:	80 81       	ld	r24, Z
    2a8e:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <LCD_WriteData>
	LCD_GoToXY(X_Pos, Y_Pos);
	LCD_WriteData(CGROM_Index);
	u8 Local_Adress= CGROM_Index*8  ;
        SET_BIT(Local_Adress,6); //from data sheet
	LCD_WriteCommand(Local_Adress); //start writting in CGROM
	for (u8 Local_Index = 0; Local_Index < 8; Local_Index++) {
    2a92:	89 81       	ldd	r24, Y+1	; 0x01
    2a94:	8f 5f       	subi	r24, 0xFF	; 255
    2a96:	89 83       	std	Y+1, r24	; 0x01
    2a98:	89 81       	ldd	r24, Y+1	; 0x01
    2a9a:	88 30       	cpi	r24, 0x08	; 8
    2a9c:	78 f3       	brcs	.-34     	; 0x2a7c <LCD_WriteSpecial+0x50>
		LCD_WriteData(Special_Character[Local_Index]);
	}
	LCD_WriteCommand(return_to_0x00_in_DDRAM);
    2a9e:	82 e0       	ldi	r24, 0x02	; 2
    2aa0:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <LCD_WriteCommand>
}
    2aa4:	27 96       	adiw	r28, 0x07	; 7
    2aa6:	0f b6       	in	r0, 0x3f	; 63
    2aa8:	f8 94       	cli
    2aaa:	de bf       	out	0x3e, r29	; 62
    2aac:	0f be       	out	0x3f, r0	; 63
    2aae:	cd bf       	out	0x3d, r28	; 61
    2ab0:	cf 91       	pop	r28
    2ab2:	df 91       	pop	r29
    2ab4:	08 95       	ret

00002ab6 <KPD_GetPressedKey>:
#include "../../MCAL/DIO/DIO_INTERFACE.h"
#include "KPD_INTERFACE.h"
#include "KPD_CONFIG.h"
#include "KPD_PRIVATE.h"
u8 KPD_GetPressedKey(void)
{
    2ab6:	df 93       	push	r29
    2ab8:	cf 93       	push	r28
    2aba:	cd b7       	in	r28, 0x3d	; 61
    2abc:	de b7       	in	r29, 0x3e	; 62
    2abe:	a2 97       	sbiw	r28, 0x22	; 34
    2ac0:	0f b6       	in	r0, 0x3f	; 63
    2ac2:	f8 94       	cli
    2ac4:	de bf       	out	0x3e, r29	; 62
    2ac6:	0f be       	out	0x3f, r0	; 63
    2ac8:	cd bf       	out	0x3d, r28	; 61
		u8 Local_PressedKey = KPD_NOT_PRESSED ; //indication value for not pressing
    2aca:	8f ef       	ldi	r24, 0xFF	; 255
    2acc:	8c 83       	std	Y+4, r24	; 0x04
		u8 row_index , col_index ;   //for iteration
		u8 Local_ColPinsArr[KPD_COLUMNS]={ KPD_COLUMN0_PIN , KPD_COLUMN1_PIN , KPD_COLUMN2_PIN , KPD_COLUMN3_PIN };
    2ace:	1d 82       	std	Y+5, r1	; 0x05
    2ad0:	81 e0       	ldi	r24, 0x01	; 1
    2ad2:	8e 83       	std	Y+6, r24	; 0x06
    2ad4:	82 e0       	ldi	r24, 0x02	; 2
    2ad6:	8f 83       	std	Y+7, r24	; 0x07
    2ad8:	83 e0       	ldi	r24, 0x03	; 3
    2ada:	88 87       	std	Y+8, r24	; 0x08
	    u8 Local_RowPinsArr[KPD_ROWS]={ KPD_ROW0_PIN , KPD_ROW1_PIN , KPD_ROW2_PIN , KPD_ROW3_PIN };
    2adc:	84 e0       	ldi	r24, 0x04	; 4
    2ade:	89 87       	std	Y+9, r24	; 0x09
    2ae0:	85 e0       	ldi	r24, 0x05	; 5
    2ae2:	8a 87       	std	Y+10, r24	; 0x0a
    2ae4:	86 e0       	ldi	r24, 0x06	; 6
    2ae6:	8b 87       	std	Y+11, r24	; 0x0b
    2ae8:	87 e0       	ldi	r24, 0x07	; 7
    2aea:	8c 87       	std	Y+12, r24	; 0x0c
		u8 Local_KPDArr[KPD_ROWS][KPD_COLUMNS] = KPD_VALUES ;
    2aec:	ce 01       	movw	r24, r28
    2aee:	0d 96       	adiw	r24, 0x0d	; 13
    2af0:	9f 8f       	std	Y+31, r25	; 0x1f
    2af2:	8e 8f       	std	Y+30, r24	; 0x1e
    2af4:	e0 e5       	ldi	r30, 0x50	; 80
    2af6:	f2 e0       	ldi	r31, 0x02	; 2
    2af8:	f9 a3       	std	Y+33, r31	; 0x21
    2afa:	e8 a3       	std	Y+32, r30	; 0x20
    2afc:	f0 e1       	ldi	r31, 0x10	; 16
    2afe:	fa a3       	std	Y+34, r31	; 0x22
    2b00:	e8 a1       	ldd	r30, Y+32	; 0x20
    2b02:	f9 a1       	ldd	r31, Y+33	; 0x21
    2b04:	00 80       	ld	r0, Z
    2b06:	88 a1       	ldd	r24, Y+32	; 0x20
    2b08:	99 a1       	ldd	r25, Y+33	; 0x21
    2b0a:	01 96       	adiw	r24, 0x01	; 1
    2b0c:	99 a3       	std	Y+33, r25	; 0x21
    2b0e:	88 a3       	std	Y+32, r24	; 0x20
    2b10:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2b12:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2b14:	00 82       	st	Z, r0
    2b16:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b18:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2b1a:	01 96       	adiw	r24, 0x01	; 1
    2b1c:	9f 8f       	std	Y+31, r25	; 0x1f
    2b1e:	8e 8f       	std	Y+30, r24	; 0x1e
    2b20:	9a a1       	ldd	r25, Y+34	; 0x22
    2b22:	91 50       	subi	r25, 0x01	; 1
    2b24:	9a a3       	std	Y+34, r25	; 0x22
    2b26:	ea a1       	ldd	r30, Y+34	; 0x22
    2b28:	ee 23       	and	r30, r30
    2b2a:	51 f7       	brne	.-44     	; 0x2b00 <KPD_GetPressedKey+0x4a>
		for(col_index =0;col_index<KPD_COLUMNS;col_index ++)
    2b2c:	1a 82       	std	Y+2, r1	; 0x02
    2b2e:	62 c0       	rjmp	.+196    	; 0x2bf4 <KPD_GetPressedKey+0x13e>
		{
			// activate current column with low
			DIO_SetPinValue(KPD_PORT, Local_ColPinsArr[col_index], DIO_LOW);
    2b30:	8a 81       	ldd	r24, Y+2	; 0x02
    2b32:	28 2f       	mov	r18, r24
    2b34:	30 e0       	ldi	r19, 0x00	; 0
    2b36:	ce 01       	movw	r24, r28
    2b38:	05 96       	adiw	r24, 0x05	; 5
    2b3a:	fc 01       	movw	r30, r24
    2b3c:	e2 0f       	add	r30, r18
    2b3e:	f3 1f       	adc	r31, r19
    2b40:	90 81       	ld	r25, Z
    2b42:	82 e0       	ldi	r24, 0x02	; 2
    2b44:	69 2f       	mov	r22, r25
    2b46:	40 e0       	ldi	r20, 0x00	; 0
    2b48:	0e 94 38 0b 	call	0x1670	; 0x1670 <DIO_SetPinValue>

			for(row_index=0 ; row_index<KPD_ROWS;row_index ++)
    2b4c:	1b 82       	std	Y+3, r1	; 0x03
    2b4e:	3d c0       	rjmp	.+122    	; 0x2bca <KPD_GetPressedKey+0x114>
			{
				// read the value of current row (current switch)
				u8 value = DIO_GetPinValue(KPD_PORT, Local_RowPinsArr[row_index]);
    2b50:	8b 81       	ldd	r24, Y+3	; 0x03
    2b52:	28 2f       	mov	r18, r24
    2b54:	30 e0       	ldi	r19, 0x00	; 0
    2b56:	ce 01       	movw	r24, r28
    2b58:	09 96       	adiw	r24, 0x09	; 9
    2b5a:	fc 01       	movw	r30, r24
    2b5c:	e2 0f       	add	r30, r18
    2b5e:	f3 1f       	adc	r31, r19
    2b60:	90 81       	ld	r25, Z
    2b62:	82 e0       	ldi	r24, 0x02	; 2
    2b64:	69 2f       	mov	r22, r25
    2b66:	0e 94 2a 0c 	call	0x1854	; 0x1854 <DIO_GetPinValue>
    2b6a:	89 83       	std	Y+1, r24	; 0x01
				// check if current switch is pressed (low value)
				if(value == DIO_LOW)
    2b6c:	89 81       	ldd	r24, Y+1	; 0x01
    2b6e:	88 23       	and	r24, r24
    2b70:	49 f5       	brne	.+82     	; 0x2bc4 <KPD_GetPressedKey+0x10e>
				{
					Local_PressedKey = Local_KPDArr[row_index][col_index] ;  //pressed value
    2b72:	8b 81       	ldd	r24, Y+3	; 0x03
    2b74:	28 2f       	mov	r18, r24
    2b76:	30 e0       	ldi	r19, 0x00	; 0
    2b78:	8a 81       	ldd	r24, Y+2	; 0x02
    2b7a:	48 2f       	mov	r20, r24
    2b7c:	50 e0       	ldi	r21, 0x00	; 0
    2b7e:	22 0f       	add	r18, r18
    2b80:	33 1f       	adc	r19, r19
    2b82:	22 0f       	add	r18, r18
    2b84:	33 1f       	adc	r19, r19
    2b86:	ce 01       	movw	r24, r28
    2b88:	01 96       	adiw	r24, 0x01	; 1
    2b8a:	82 0f       	add	r24, r18
    2b8c:	93 1f       	adc	r25, r19
    2b8e:	84 0f       	add	r24, r20
    2b90:	95 1f       	adc	r25, r21
    2b92:	fc 01       	movw	r30, r24
    2b94:	3c 96       	adiw	r30, 0x0c	; 12
    2b96:	80 81       	ld	r24, Z
    2b98:	8c 83       	std	Y+4, r24	; 0x04
    2b9a:	0e c0       	rjmp	.+28     	; 0x2bb8 <KPD_GetPressedKey+0x102>

					// busy waiting until switch is released     human takes 250ms to press the switch
					while (value == DIO_LOW )
					{
						value =  DIO_GetPinValue(KPD_PORT, Local_RowPinsArr[row_index]);   //refreshing the value
    2b9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b9e:	28 2f       	mov	r18, r24
    2ba0:	30 e0       	ldi	r19, 0x00	; 0
    2ba2:	ce 01       	movw	r24, r28
    2ba4:	09 96       	adiw	r24, 0x09	; 9
    2ba6:	fc 01       	movw	r30, r24
    2ba8:	e2 0f       	add	r30, r18
    2baa:	f3 1f       	adc	r31, r19
    2bac:	90 81       	ld	r25, Z
    2bae:	82 e0       	ldi	r24, 0x02	; 2
    2bb0:	69 2f       	mov	r22, r25
    2bb2:	0e 94 2a 0c 	call	0x1854	; 0x1854 <DIO_GetPinValue>
    2bb6:	89 83       	std	Y+1, r24	; 0x01
				if(value == DIO_LOW)
				{
					Local_PressedKey = Local_KPDArr[row_index][col_index] ;  //pressed value

					// busy waiting until switch is released     human takes 250ms to press the switch
					while (value == DIO_LOW )
    2bb8:	89 81       	ldd	r24, Y+1	; 0x01
    2bba:	88 23       	and	r24, r24
    2bbc:	79 f3       	breq	.-34     	; 0x2b9c <KPD_GetPressedKey+0xe6>
					{
						value =  DIO_GetPinValue(KPD_PORT, Local_RowPinsArr[row_index]);   //refreshing the value
					}
					return Local_PressedKey ;
    2bbe:	fc 81       	ldd	r31, Y+4	; 0x04
    2bc0:	fd 8f       	std	Y+29, r31	; 0x1d
    2bc2:	1e c0       	rjmp	.+60     	; 0x2c00 <KPD_GetPressedKey+0x14a>
		for(col_index =0;col_index<KPD_COLUMNS;col_index ++)
		{
			// activate current column with low
			DIO_SetPinValue(KPD_PORT, Local_ColPinsArr[col_index], DIO_LOW);

			for(row_index=0 ; row_index<KPD_ROWS;row_index ++)
    2bc4:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc6:	8f 5f       	subi	r24, 0xFF	; 255
    2bc8:	8b 83       	std	Y+3, r24	; 0x03
    2bca:	8b 81       	ldd	r24, Y+3	; 0x03
    2bcc:	84 30       	cpi	r24, 0x04	; 4
    2bce:	08 f4       	brcc	.+2      	; 0x2bd2 <KPD_GetPressedKey+0x11c>
    2bd0:	bf cf       	rjmp	.-130    	; 0x2b50 <KPD_GetPressedKey+0x9a>
					}
					return Local_PressedKey ;
				}
			}
			// deactivate the current column with high
			DIO_SetPinValue(KPD_PORT, Local_ColPinsArr[col_index], DIO_HIGH);
    2bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd4:	28 2f       	mov	r18, r24
    2bd6:	30 e0       	ldi	r19, 0x00	; 0
    2bd8:	ce 01       	movw	r24, r28
    2bda:	05 96       	adiw	r24, 0x05	; 5
    2bdc:	fc 01       	movw	r30, r24
    2bde:	e2 0f       	add	r30, r18
    2be0:	f3 1f       	adc	r31, r19
    2be2:	90 81       	ld	r25, Z
    2be4:	82 e0       	ldi	r24, 0x02	; 2
    2be6:	69 2f       	mov	r22, r25
    2be8:	41 e0       	ldi	r20, 0x01	; 1
    2bea:	0e 94 38 0b 	call	0x1670	; 0x1670 <DIO_SetPinValue>
		u8 Local_PressedKey = KPD_NOT_PRESSED ; //indication value for not pressing
		u8 row_index , col_index ;   //for iteration
		u8 Local_ColPinsArr[KPD_COLUMNS]={ KPD_COLUMN0_PIN , KPD_COLUMN1_PIN , KPD_COLUMN2_PIN , KPD_COLUMN3_PIN };
	    u8 Local_RowPinsArr[KPD_ROWS]={ KPD_ROW0_PIN , KPD_ROW1_PIN , KPD_ROW2_PIN , KPD_ROW3_PIN };
		u8 Local_KPDArr[KPD_ROWS][KPD_COLUMNS] = KPD_VALUES ;
		for(col_index =0;col_index<KPD_COLUMNS;col_index ++)
    2bee:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf0:	8f 5f       	subi	r24, 0xFF	; 255
    2bf2:	8a 83       	std	Y+2, r24	; 0x02
    2bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf6:	84 30       	cpi	r24, 0x04	; 4
    2bf8:	08 f4       	brcc	.+2      	; 0x2bfc <KPD_GetPressedKey+0x146>
    2bfa:	9a cf       	rjmp	.-204    	; 0x2b30 <KPD_GetPressedKey+0x7a>
			}
			// deactivate the current column with high
			DIO_SetPinValue(KPD_PORT, Local_ColPinsArr[col_index], DIO_HIGH);

		}
	return Local_PressedKey;
    2bfc:	8c 81       	ldd	r24, Y+4	; 0x04
    2bfe:	8d 8f       	std	Y+29, r24	; 0x1d
    2c00:	8d 8d       	ldd	r24, Y+29	; 0x1d
} 
    2c02:	a2 96       	adiw	r28, 0x22	; 34
    2c04:	0f b6       	in	r0, 0x3f	; 63
    2c06:	f8 94       	cli
    2c08:	de bf       	out	0x3e, r29	; 62
    2c0a:	0f be       	out	0x3f, r0	; 63
    2c0c:	cd bf       	out	0x3d, r28	; 61
    2c0e:	cf 91       	pop	r28
    2c10:	df 91       	pop	r29
    2c12:	08 95       	ret

00002c14 <openDoor>:
u32 savedpass1 = 1111;
u32 savedpass2 = 2222;
u32 savedpass3 = 0000;
static u8 state = 1;
void openDoor(void)
{
    2c14:	df 93       	push	r29
    2c16:	cf 93       	push	r28
    2c18:	cd b7       	in	r28, 0x3d	; 61
    2c1a:	de b7       	in	r29, 0x3e	; 62


	DIO_SetPinDirection(PORTD,5,DIO_OUTPUT);
    2c1c:	83 e0       	ldi	r24, 0x03	; 3
    2c1e:	65 e0       	ldi	r22, 0x05	; 5
    2c20:	41 e0       	ldi	r20, 0x01	; 1
    2c22:	0e 94 46 0a 	call	0x148c	; 0x148c <DIO_SetPinDirection>
	TIMER1_INT();
    2c26:	0e 94 0b 07 	call	0xe16	; 0xe16 <TIMER1_INT>
	Timer1SetAngle_A(180);
    2c2a:	84 eb       	ldi	r24, 0xB4	; 180
    2c2c:	90 e0       	ldi	r25, 0x00	; 0
    2c2e:	0e 94 5d 07 	call	0xeba	; 0xeba <Timer1SetAngle_A>
}
    2c32:	cf 91       	pop	r28
    2c34:	df 91       	pop	r29
    2c36:	08 95       	ret

00002c38 <closeDoor>:


void closeDoor(void)
{
    2c38:	df 93       	push	r29
    2c3a:	cf 93       	push	r28
    2c3c:	cd b7       	in	r28, 0x3d	; 61
    2c3e:	de b7       	in	r29, 0x3e	; 62

	DIO_SetPinDirection(PORTD,5,DIO_OUTPUT);
    2c40:	83 e0       	ldi	r24, 0x03	; 3
    2c42:	65 e0       	ldi	r22, 0x05	; 5
    2c44:	41 e0       	ldi	r20, 0x01	; 1
    2c46:	0e 94 46 0a 	call	0x148c	; 0x148c <DIO_SetPinDirection>
	PWM_INIT_FAST();
    2c4a:	0e 94 99 07 	call	0xf32	; 0xf32 <PWM_INIT_FAST>
	Timer1SetAngle_A(90);
    2c4e:	8a e5       	ldi	r24, 0x5A	; 90
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	0e 94 5d 07 	call	0xeba	; 0xeba <Timer1SetAngle_A>
}
    2c56:	cf 91       	pop	r28
    2c58:	df 91       	pop	r29
    2c5a:	08 95       	ret

00002c5c <openFan>:



void openFan(void)
{
    2c5c:	df 93       	push	r29
    2c5e:	cf 93       	push	r28
    2c60:	cd b7       	in	r28, 0x3d	; 61
    2c62:	de b7       	in	r29, 0x3e	; 62
    2c64:	62 97       	sbiw	r28, 0x12	; 18
    2c66:	0f b6       	in	r0, 0x3f	; 63
    2c68:	f8 94       	cli
    2c6a:	de bf       	out	0x3e, r29	; 62
    2c6c:	0f be       	out	0x3f, r0	; 63
    2c6e:	cd bf       	out	0x3d, r28	; 61

	state = 1;
    2c70:	81 e0       	ldi	r24, 0x01	; 1
    2c72:	80 93 4f 02 	sts	0x024F, r24
	u16 Local_AnaloglValue,Local_DigitalValue;
	DIO_SetPinDirection(PORTA,0,DIO_INPUT);
    2c76:	80 e0       	ldi	r24, 0x00	; 0
    2c78:	60 e0       	ldi	r22, 0x00	; 0
    2c7a:	40 e0       	ldi	r20, 0x00	; 0
    2c7c:	0e 94 46 0a 	call	0x148c	; 0x148c <DIO_SetPinDirection>
	MADC_voidInit();
    2c80:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <MADC_voidInit>
	DIO_SetPinDirection(PORTB,3,DIO_OUTPUT);
    2c84:	81 e0       	ldi	r24, 0x01	; 1
    2c86:	63 e0       	ldi	r22, 0x03	; 3
    2c88:	41 e0       	ldi	r20, 0x01	; 1
    2c8a:	0e 94 46 0a 	call	0x148c	; 0x148c <DIO_SetPinDirection>



	Local_DigitalValue = MADC_u8StartConversion(0);
    2c8e:	80 e0       	ldi	r24, 0x00	; 0
    2c90:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <MADC_u8StartConversion>
    2c94:	98 8b       	std	Y+16, r25	; 0x10
    2c96:	8f 87       	std	Y+15, r24	; 0x0f
	Local_AnaloglValue = (Local_DigitalValue * 5000UL)/1024;
    2c98:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c9a:	98 89       	ldd	r25, Y+16	; 0x10
    2c9c:	cc 01       	movw	r24, r24
    2c9e:	a0 e0       	ldi	r26, 0x00	; 0
    2ca0:	b0 e0       	ldi	r27, 0x00	; 0
    2ca2:	28 e8       	ldi	r18, 0x88	; 136
    2ca4:	33 e1       	ldi	r19, 0x13	; 19
    2ca6:	40 e0       	ldi	r20, 0x00	; 0
    2ca8:	50 e0       	ldi	r21, 0x00	; 0
    2caa:	bc 01       	movw	r22, r24
    2cac:	cd 01       	movw	r24, r26
    2cae:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <__mulsi3>
    2cb2:	dc 01       	movw	r26, r24
    2cb4:	cb 01       	movw	r24, r22
    2cb6:	07 2e       	mov	r0, r23
    2cb8:	7a e0       	ldi	r23, 0x0A	; 10
    2cba:	b6 95       	lsr	r27
    2cbc:	a7 95       	ror	r26
    2cbe:	97 95       	ror	r25
    2cc0:	87 95       	ror	r24
    2cc2:	7a 95       	dec	r23
    2cc4:	d1 f7       	brne	.-12     	; 0x2cba <openFan+0x5e>
    2cc6:	70 2d       	mov	r23, r0
    2cc8:	9a 8b       	std	Y+18, r25	; 0x12
    2cca:	89 8b       	std	Y+17, r24	; 0x11

	if(Local_AnaloglValue>270)
    2ccc:	89 89       	ldd	r24, Y+17	; 0x11
    2cce:	9a 89       	ldd	r25, Y+18	; 0x12
    2cd0:	21 e0       	ldi	r18, 0x01	; 1
    2cd2:	8f 30       	cpi	r24, 0x0F	; 15
    2cd4:	92 07       	cpc	r25, r18
    2cd6:	08 f4       	brcc	.+2      	; 0x2cda <openFan+0x7e>
    2cd8:	84 c0       	rjmp	.+264    	; 0x2de2 <openFan+0x186>
	{
		TIMER1_INT();
    2cda:	0e 94 0b 07 	call	0xe16	; 0xe16 <TIMER1_INT>
		PWM_INIT_FAST();
    2cde:	0e 94 99 07 	call	0xf32	; 0xf32 <PWM_INIT_FAST>
		PWM_CTC_VALUE(Local_DigitalValue*10);
    2ce2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ce4:	98 89       	ldd	r25, Y+16	; 0x10
    2ce6:	9c 01       	movw	r18, r24
    2ce8:	22 0f       	add	r18, r18
    2cea:	33 1f       	adc	r19, r19
    2cec:	c9 01       	movw	r24, r18
    2cee:	88 0f       	add	r24, r24
    2cf0:	99 1f       	adc	r25, r25
    2cf2:	88 0f       	add	r24, r24
    2cf4:	99 1f       	adc	r25, r25
    2cf6:	82 0f       	add	r24, r18
    2cf8:	93 1f       	adc	r25, r19
    2cfa:	0e 94 09 08 	call	0x1012	; 0x1012 <PWM_CTC_VALUE>
    2cfe:	80 e0       	ldi	r24, 0x00	; 0
    2d00:	90 e0       	ldi	r25, 0x00	; 0
    2d02:	a8 ec       	ldi	r26, 0xC8	; 200
    2d04:	b2 e4       	ldi	r27, 0x42	; 66
    2d06:	8b 87       	std	Y+11, r24	; 0x0b
    2d08:	9c 87       	std	Y+12, r25	; 0x0c
    2d0a:	ad 87       	std	Y+13, r26	; 0x0d
    2d0c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d10:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d12:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d14:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d16:	20 e0       	ldi	r18, 0x00	; 0
    2d18:	30 e0       	ldi	r19, 0x00	; 0
    2d1a:	4a ef       	ldi	r20, 0xFA	; 250
    2d1c:	54 e4       	ldi	r21, 0x44	; 68
    2d1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d22:	dc 01       	movw	r26, r24
    2d24:	cb 01       	movw	r24, r22
    2d26:	8f 83       	std	Y+7, r24	; 0x07
    2d28:	98 87       	std	Y+8, r25	; 0x08
    2d2a:	a9 87       	std	Y+9, r26	; 0x09
    2d2c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d2e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d30:	78 85       	ldd	r23, Y+8	; 0x08
    2d32:	89 85       	ldd	r24, Y+9	; 0x09
    2d34:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d36:	20 e0       	ldi	r18, 0x00	; 0
    2d38:	30 e0       	ldi	r19, 0x00	; 0
    2d3a:	40 e8       	ldi	r20, 0x80	; 128
    2d3c:	5f e3       	ldi	r21, 0x3F	; 63
    2d3e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d42:	88 23       	and	r24, r24
    2d44:	2c f4       	brge	.+10     	; 0x2d50 <openFan+0xf4>
		__ticks = 1;
    2d46:	81 e0       	ldi	r24, 0x01	; 1
    2d48:	90 e0       	ldi	r25, 0x00	; 0
    2d4a:	9e 83       	std	Y+6, r25	; 0x06
    2d4c:	8d 83       	std	Y+5, r24	; 0x05
    2d4e:	3f c0       	rjmp	.+126    	; 0x2dce <openFan+0x172>
	else if (__tmp > 65535)
    2d50:	6f 81       	ldd	r22, Y+7	; 0x07
    2d52:	78 85       	ldd	r23, Y+8	; 0x08
    2d54:	89 85       	ldd	r24, Y+9	; 0x09
    2d56:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d58:	20 e0       	ldi	r18, 0x00	; 0
    2d5a:	3f ef       	ldi	r19, 0xFF	; 255
    2d5c:	4f e7       	ldi	r20, 0x7F	; 127
    2d5e:	57 e4       	ldi	r21, 0x47	; 71
    2d60:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d64:	18 16       	cp	r1, r24
    2d66:	4c f5       	brge	.+82     	; 0x2dba <openFan+0x15e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d68:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d70:	20 e0       	ldi	r18, 0x00	; 0
    2d72:	30 e0       	ldi	r19, 0x00	; 0
    2d74:	40 e2       	ldi	r20, 0x20	; 32
    2d76:	51 e4       	ldi	r21, 0x41	; 65
    2d78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d7c:	dc 01       	movw	r26, r24
    2d7e:	cb 01       	movw	r24, r22
    2d80:	bc 01       	movw	r22, r24
    2d82:	cd 01       	movw	r24, r26
    2d84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d88:	dc 01       	movw	r26, r24
    2d8a:	cb 01       	movw	r24, r22
    2d8c:	9e 83       	std	Y+6, r25	; 0x06
    2d8e:	8d 83       	std	Y+5, r24	; 0x05
    2d90:	0f c0       	rjmp	.+30     	; 0x2db0 <openFan+0x154>
    2d92:	88 ec       	ldi	r24, 0xC8	; 200
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	9c 83       	std	Y+4, r25	; 0x04
    2d98:	8b 83       	std	Y+3, r24	; 0x03
    2d9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d9c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d9e:	01 97       	sbiw	r24, 0x01	; 1
    2da0:	f1 f7       	brne	.-4      	; 0x2d9e <openFan+0x142>
    2da2:	9c 83       	std	Y+4, r25	; 0x04
    2da4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2da6:	8d 81       	ldd	r24, Y+5	; 0x05
    2da8:	9e 81       	ldd	r25, Y+6	; 0x06
    2daa:	01 97       	sbiw	r24, 0x01	; 1
    2dac:	9e 83       	std	Y+6, r25	; 0x06
    2dae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2db0:	8d 81       	ldd	r24, Y+5	; 0x05
    2db2:	9e 81       	ldd	r25, Y+6	; 0x06
    2db4:	00 97       	sbiw	r24, 0x00	; 0
    2db6:	69 f7       	brne	.-38     	; 0x2d92 <openFan+0x136>
    2db8:	14 c0       	rjmp	.+40     	; 0x2de2 <openFan+0x186>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dba:	6f 81       	ldd	r22, Y+7	; 0x07
    2dbc:	78 85       	ldd	r23, Y+8	; 0x08
    2dbe:	89 85       	ldd	r24, Y+9	; 0x09
    2dc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dc6:	dc 01       	movw	r26, r24
    2dc8:	cb 01       	movw	r24, r22
    2dca:	9e 83       	std	Y+6, r25	; 0x06
    2dcc:	8d 83       	std	Y+5, r24	; 0x05
    2dce:	8d 81       	ldd	r24, Y+5	; 0x05
    2dd0:	9e 81       	ldd	r25, Y+6	; 0x06
    2dd2:	9a 83       	std	Y+2, r25	; 0x02
    2dd4:	89 83       	std	Y+1, r24	; 0x01
    2dd6:	89 81       	ldd	r24, Y+1	; 0x01
    2dd8:	9a 81       	ldd	r25, Y+2	; 0x02
    2dda:	01 97       	sbiw	r24, 0x01	; 1
    2ddc:	f1 f7       	brne	.-4      	; 0x2dda <openFan+0x17e>
    2dde:	9a 83       	std	Y+2, r25	; 0x02
    2de0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
	}


}
    2de2:	62 96       	adiw	r28, 0x12	; 18
    2de4:	0f b6       	in	r0, 0x3f	; 63
    2de6:	f8 94       	cli
    2de8:	de bf       	out	0x3e, r29	; 62
    2dea:	0f be       	out	0x3f, r0	; 63
    2dec:	cd bf       	out	0x3d, r28	; 61
    2dee:	cf 91       	pop	r28
    2df0:	df 91       	pop	r29
    2df2:	08 95       	ret

00002df4 <closeFan>:
void closeFan(void)
{
    2df4:	df 93       	push	r29
    2df6:	cf 93       	push	r28
    2df8:	cd b7       	in	r28, 0x3d	; 61
    2dfa:	de b7       	in	r29, 0x3e	; 62
	state = 0;
    2dfc:	10 92 4f 02 	sts	0x024F, r1
	PWM_CTC_VALUE(0);
    2e00:	80 e0       	ldi	r24, 0x00	; 0
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	0e 94 09 08 	call	0x1012	; 0x1012 <PWM_CTC_VALUE>
}
    2e08:	cf 91       	pop	r28
    2e0a:	df 91       	pop	r29
    2e0c:	08 95       	ret

00002e0e <Login>:

u8 Login(void)
{
    2e0e:	0f 93       	push	r16
    2e10:	1f 93       	push	r17
    2e12:	df 93       	push	r29
    2e14:	cf 93       	push	r28
    2e16:	cd b7       	in	r28, 0x3d	; 61
    2e18:	de b7       	in	r29, 0x3e	; 62
    2e1a:	c6 56       	subi	r28, 0x66	; 102
    2e1c:	d0 40       	sbci	r29, 0x00	; 0
    2e1e:	0f b6       	in	r0, 0x3f	; 63
    2e20:	f8 94       	cli
    2e22:	de bf       	out	0x3e, r29	; 62
    2e24:	0f be       	out	0x3f, r0	; 63
    2e26:	cd bf       	out	0x3d, r28	; 61
	loginInit();
    2e28:	0e 94 80 1b 	call	0x3700	; 0x3700 <loginInit>

	u8 user = getOption();  //get user from keypad
    2e2c:	0e 94 28 22 	call	0x4450	; 0x4450 <getOption>
    2e30:	fe 01       	movw	r30, r28
    2e32:	ed 59       	subi	r30, 0x9D	; 157
    2e34:	ff 4f       	sbci	r31, 0xFF	; 255
    2e36:	80 83       	st	Z, r24
	LCD_WriteCommand(clear);
    2e38:	81 e0       	ldi	r24, 0x01	; 1
    2e3a:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <LCD_WriteCommand>
	LCD_GoToXY(0, 0);
    2e3e:	80 e0       	ldi	r24, 0x00	; 0
    2e40:	60 e0       	ldi	r22, 0x00	; 0
    2e42:	0e 94 55 14 	call	0x28aa	; 0x28aa <LCD_GoToXY>
	switch (user)
    2e46:	fe 01       	movw	r30, r28
    2e48:	ed 59       	subi	r30, 0x9D	; 157
    2e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4c:	80 81       	ld	r24, Z
    2e4e:	28 2f       	mov	r18, r24
    2e50:	30 e0       	ldi	r19, 0x00	; 0
    2e52:	a7 96       	adiw	r28, 0x27	; 39
    2e54:	3f af       	std	Y+63, r19	; 0x3f
    2e56:	2e af       	std	Y+62, r18	; 0x3e
    2e58:	a7 97       	sbiw	r28, 0x27	; 39
    2e5a:	a7 96       	adiw	r28, 0x27	; 39
    2e5c:	8e ad       	ldd	r24, Y+62	; 0x3e
    2e5e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2e60:	a7 97       	sbiw	r28, 0x27	; 39
    2e62:	82 30       	cpi	r24, 0x02	; 2
    2e64:	91 05       	cpc	r25, r1
    2e66:	09 f4       	brne	.+2      	; 0x2e6a <Login+0x5c>
    2e68:	9c c1       	rjmp	.+824    	; 0x31a2 <Login+0x394>
    2e6a:	a7 96       	adiw	r28, 0x27	; 39
    2e6c:	ee ad       	ldd	r30, Y+62	; 0x3e
    2e6e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2e70:	a7 97       	sbiw	r28, 0x27	; 39
    2e72:	e3 30       	cpi	r30, 0x03	; 3
    2e74:	f1 05       	cpc	r31, r1
    2e76:	09 f4       	brne	.+2      	; 0x2e7a <Login+0x6c>
    2e78:	b1 c2       	rjmp	.+1378   	; 0x33dc <Login+0x5ce>
    2e7a:	a7 96       	adiw	r28, 0x27	; 39
    2e7c:	2e ad       	ldd	r18, Y+62	; 0x3e
    2e7e:	3f ad       	ldd	r19, Y+63	; 0x3f
    2e80:	a7 97       	sbiw	r28, 0x27	; 39
    2e82:	21 30       	cpi	r18, 0x01	; 1
    2e84:	31 05       	cpc	r19, r1
    2e86:	09 f0       	breq	.+2      	; 0x2e8a <Login+0x7c>
    2e88:	b3 c3       	rjmp	.+1894   	; 0x35f0 <Login+0x7e2>
	{
	case user1:
	{
		if (checkUser1Pass() == 1)
    2e8a:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <checkUser1Pass>
    2e8e:	81 30       	cpi	r24, 0x01	; 1
    2e90:	41 f4       	brne	.+16     	; 0x2ea2 <Login+0x94>
		{
			rigthPass();
    2e92:	0e 94 b9 23 	call	0x4772	; 0x4772 <rigthPass>
			options();
    2e96:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <options>
			return 0 ;
    2e9a:	a5 96       	adiw	r28, 0x25	; 37
    2e9c:	1f ae       	std	Y+63, r1	; 0x3f
    2e9e:	a5 97       	sbiw	r28, 0x25	; 37
    2ea0:	20 c4       	rjmp	.+2112   	; 0x36e2 <Login+0x8d4>
		}
		else
		{
			LCD_WriteString("no tries left");
    2ea2:	80 e6       	ldi	r24, 0x60	; 96
    2ea4:	90 e0       	ldi	r25, 0x00	; 0
    2ea6:	0e 94 2c 14 	call	0x2858	; 0x2858 <LCD_WriteString>
    2eaa:	fe 01       	movw	r30, r28
    2eac:	e1 5a       	subi	r30, 0xA1	; 161
    2eae:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb0:	80 e0       	ldi	r24, 0x00	; 0
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    2eb4:	a8 ec       	ldi	r26, 0xC8	; 200
    2eb6:	b2 e4       	ldi	r27, 0x42	; 66
    2eb8:	80 83       	st	Z, r24
    2eba:	91 83       	std	Z+1, r25	; 0x01
    2ebc:	a2 83       	std	Z+2, r26	; 0x02
    2ebe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ec0:	8e 01       	movw	r16, r28
    2ec2:	05 5a       	subi	r16, 0xA5	; 165
    2ec4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ec6:	fe 01       	movw	r30, r28
    2ec8:	e1 5a       	subi	r30, 0xA1	; 161
    2eca:	ff 4f       	sbci	r31, 0xFF	; 255
    2ecc:	60 81       	ld	r22, Z
    2ece:	71 81       	ldd	r23, Z+1	; 0x01
    2ed0:	82 81       	ldd	r24, Z+2	; 0x02
    2ed2:	93 81       	ldd	r25, Z+3	; 0x03
    2ed4:	20 e0       	ldi	r18, 0x00	; 0
    2ed6:	30 e0       	ldi	r19, 0x00	; 0
    2ed8:	4a ef       	ldi	r20, 0xFA	; 250
    2eda:	54 e4       	ldi	r21, 0x44	; 68
    2edc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ee0:	dc 01       	movw	r26, r24
    2ee2:	cb 01       	movw	r24, r22
    2ee4:	f8 01       	movw	r30, r16
    2ee6:	80 83       	st	Z, r24
    2ee8:	91 83       	std	Z+1, r25	; 0x01
    2eea:	a2 83       	std	Z+2, r26	; 0x02
    2eec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2eee:	fe 01       	movw	r30, r28
    2ef0:	e5 5a       	subi	r30, 0xA5	; 165
    2ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef4:	60 81       	ld	r22, Z
    2ef6:	71 81       	ldd	r23, Z+1	; 0x01
    2ef8:	82 81       	ldd	r24, Z+2	; 0x02
    2efa:	93 81       	ldd	r25, Z+3	; 0x03
    2efc:	20 e0       	ldi	r18, 0x00	; 0
    2efe:	30 e0       	ldi	r19, 0x00	; 0
    2f00:	40 e8       	ldi	r20, 0x80	; 128
    2f02:	5f e3       	ldi	r21, 0x3F	; 63
    2f04:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f08:	88 23       	and	r24, r24
    2f0a:	44 f4       	brge	.+16     	; 0x2f1c <Login+0x10e>
		__ticks = 1;
    2f0c:	fe 01       	movw	r30, r28
    2f0e:	e7 5a       	subi	r30, 0xA7	; 167
    2f10:	ff 4f       	sbci	r31, 0xFF	; 255
    2f12:	81 e0       	ldi	r24, 0x01	; 1
    2f14:	90 e0       	ldi	r25, 0x00	; 0
    2f16:	91 83       	std	Z+1, r25	; 0x01
    2f18:	80 83       	st	Z, r24
    2f1a:	64 c0       	rjmp	.+200    	; 0x2fe4 <Login+0x1d6>
	else if (__tmp > 65535)
    2f1c:	fe 01       	movw	r30, r28
    2f1e:	e5 5a       	subi	r30, 0xA5	; 165
    2f20:	ff 4f       	sbci	r31, 0xFF	; 255
    2f22:	60 81       	ld	r22, Z
    2f24:	71 81       	ldd	r23, Z+1	; 0x01
    2f26:	82 81       	ldd	r24, Z+2	; 0x02
    2f28:	93 81       	ldd	r25, Z+3	; 0x03
    2f2a:	20 e0       	ldi	r18, 0x00	; 0
    2f2c:	3f ef       	ldi	r19, 0xFF	; 255
    2f2e:	4f e7       	ldi	r20, 0x7F	; 127
    2f30:	57 e4       	ldi	r21, 0x47	; 71
    2f32:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f36:	18 16       	cp	r1, r24
    2f38:	0c f0       	brlt	.+2      	; 0x2f3c <Login+0x12e>
    2f3a:	43 c0       	rjmp	.+134    	; 0x2fc2 <Login+0x1b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f3c:	fe 01       	movw	r30, r28
    2f3e:	e1 5a       	subi	r30, 0xA1	; 161
    2f40:	ff 4f       	sbci	r31, 0xFF	; 255
    2f42:	60 81       	ld	r22, Z
    2f44:	71 81       	ldd	r23, Z+1	; 0x01
    2f46:	82 81       	ldd	r24, Z+2	; 0x02
    2f48:	93 81       	ldd	r25, Z+3	; 0x03
    2f4a:	20 e0       	ldi	r18, 0x00	; 0
    2f4c:	30 e0       	ldi	r19, 0x00	; 0
    2f4e:	40 e2       	ldi	r20, 0x20	; 32
    2f50:	51 e4       	ldi	r21, 0x41	; 65
    2f52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f56:	dc 01       	movw	r26, r24
    2f58:	cb 01       	movw	r24, r22
    2f5a:	8e 01       	movw	r16, r28
    2f5c:	07 5a       	subi	r16, 0xA7	; 167
    2f5e:	1f 4f       	sbci	r17, 0xFF	; 255
    2f60:	bc 01       	movw	r22, r24
    2f62:	cd 01       	movw	r24, r26
    2f64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f68:	dc 01       	movw	r26, r24
    2f6a:	cb 01       	movw	r24, r22
    2f6c:	f8 01       	movw	r30, r16
    2f6e:	91 83       	std	Z+1, r25	; 0x01
    2f70:	80 83       	st	Z, r24
    2f72:	1f c0       	rjmp	.+62     	; 0x2fb2 <Login+0x1a4>
    2f74:	fe 01       	movw	r30, r28
    2f76:	e9 5a       	subi	r30, 0xA9	; 169
    2f78:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7a:	88 ec       	ldi	r24, 0xC8	; 200
    2f7c:	90 e0       	ldi	r25, 0x00	; 0
    2f7e:	91 83       	std	Z+1, r25	; 0x01
    2f80:	80 83       	st	Z, r24
    2f82:	fe 01       	movw	r30, r28
    2f84:	e9 5a       	subi	r30, 0xA9	; 169
    2f86:	ff 4f       	sbci	r31, 0xFF	; 255
    2f88:	80 81       	ld	r24, Z
    2f8a:	91 81       	ldd	r25, Z+1	; 0x01
    2f8c:	01 97       	sbiw	r24, 0x01	; 1
    2f8e:	f1 f7       	brne	.-4      	; 0x2f8c <Login+0x17e>
    2f90:	fe 01       	movw	r30, r28
    2f92:	e9 5a       	subi	r30, 0xA9	; 169
    2f94:	ff 4f       	sbci	r31, 0xFF	; 255
    2f96:	91 83       	std	Z+1, r25	; 0x01
    2f98:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f9a:	de 01       	movw	r26, r28
    2f9c:	a7 5a       	subi	r26, 0xA7	; 167
    2f9e:	bf 4f       	sbci	r27, 0xFF	; 255
    2fa0:	fe 01       	movw	r30, r28
    2fa2:	e7 5a       	subi	r30, 0xA7	; 167
    2fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa6:	80 81       	ld	r24, Z
    2fa8:	91 81       	ldd	r25, Z+1	; 0x01
    2faa:	01 97       	sbiw	r24, 0x01	; 1
    2fac:	11 96       	adiw	r26, 0x01	; 1
    2fae:	9c 93       	st	X, r25
    2fb0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fb2:	fe 01       	movw	r30, r28
    2fb4:	e7 5a       	subi	r30, 0xA7	; 167
    2fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb8:	80 81       	ld	r24, Z
    2fba:	91 81       	ldd	r25, Z+1	; 0x01
    2fbc:	00 97       	sbiw	r24, 0x00	; 0
    2fbe:	d1 f6       	brne	.-76     	; 0x2f74 <Login+0x166>
    2fc0:	27 c0       	rjmp	.+78     	; 0x3010 <Login+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fc2:	8e 01       	movw	r16, r28
    2fc4:	07 5a       	subi	r16, 0xA7	; 167
    2fc6:	1f 4f       	sbci	r17, 0xFF	; 255
    2fc8:	fe 01       	movw	r30, r28
    2fca:	e5 5a       	subi	r30, 0xA5	; 165
    2fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fce:	60 81       	ld	r22, Z
    2fd0:	71 81       	ldd	r23, Z+1	; 0x01
    2fd2:	82 81       	ldd	r24, Z+2	; 0x02
    2fd4:	93 81       	ldd	r25, Z+3	; 0x03
    2fd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fda:	dc 01       	movw	r26, r24
    2fdc:	cb 01       	movw	r24, r22
    2fde:	f8 01       	movw	r30, r16
    2fe0:	91 83       	std	Z+1, r25	; 0x01
    2fe2:	80 83       	st	Z, r24
    2fe4:	de 01       	movw	r26, r28
    2fe6:	ab 5a       	subi	r26, 0xAB	; 171
    2fe8:	bf 4f       	sbci	r27, 0xFF	; 255
    2fea:	fe 01       	movw	r30, r28
    2fec:	e7 5a       	subi	r30, 0xA7	; 167
    2fee:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff0:	80 81       	ld	r24, Z
    2ff2:	91 81       	ldd	r25, Z+1	; 0x01
    2ff4:	8d 93       	st	X+, r24
    2ff6:	9c 93       	st	X, r25
    2ff8:	fe 01       	movw	r30, r28
    2ffa:	eb 5a       	subi	r30, 0xAB	; 171
    2ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffe:	80 81       	ld	r24, Z
    3000:	91 81       	ldd	r25, Z+1	; 0x01
    3002:	01 97       	sbiw	r24, 0x01	; 1
    3004:	f1 f7       	brne	.-4      	; 0x3002 <Login+0x1f4>
    3006:	fe 01       	movw	r30, r28
    3008:	eb 5a       	subi	r30, 0xAB	; 171
    300a:	ff 4f       	sbci	r31, 0xFF	; 255
    300c:	91 83       	std	Z+1, r25	; 0x01
    300e:	80 83       	st	Z, r24
			_delay_ms(100);
			LCD_WriteCommand(clear);
    3010:	81 e0       	ldi	r24, 0x01	; 1
    3012:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <LCD_WriteCommand>
			LCD_WriteString("try again after");
    3016:	8e e6       	ldi	r24, 0x6E	; 110
    3018:	90 e0       	ldi	r25, 0x00	; 0
    301a:	0e 94 2c 14 	call	0x2858	; 0x2858 <LCD_WriteString>
			LCD_GoToXY(1, 6);
    301e:	81 e0       	ldi	r24, 0x01	; 1
    3020:	66 e0       	ldi	r22, 0x06	; 6
    3022:	0e 94 55 14 	call	0x28aa	; 0x28aa <LCD_GoToXY>
			LCD_WriteString("20 sec");
    3026:	8e e7       	ldi	r24, 0x7E	; 126
    3028:	90 e0       	ldi	r25, 0x00	; 0
    302a:	0e 94 2c 14 	call	0x2858	; 0x2858 <LCD_WriteString>
    302e:	fe 01       	movw	r30, r28
    3030:	ef 5a       	subi	r30, 0xAF	; 175
    3032:	ff 4f       	sbci	r31, 0xFF	; 255
    3034:	80 e0       	ldi	r24, 0x00	; 0
    3036:	90 e0       	ldi	r25, 0x00	; 0
    3038:	aa e7       	ldi	r26, 0x7A	; 122
    303a:	b4 e4       	ldi	r27, 0x44	; 68
    303c:	80 83       	st	Z, r24
    303e:	91 83       	std	Z+1, r25	; 0x01
    3040:	a2 83       	std	Z+2, r26	; 0x02
    3042:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3044:	8e 01       	movw	r16, r28
    3046:	03 5b       	subi	r16, 0xB3	; 179
    3048:	1f 4f       	sbci	r17, 0xFF	; 255
    304a:	fe 01       	movw	r30, r28
    304c:	ef 5a       	subi	r30, 0xAF	; 175
    304e:	ff 4f       	sbci	r31, 0xFF	; 255
    3050:	60 81       	ld	r22, Z
    3052:	71 81       	ldd	r23, Z+1	; 0x01
    3054:	82 81       	ldd	r24, Z+2	; 0x02
    3056:	93 81       	ldd	r25, Z+3	; 0x03
    3058:	20 e0       	ldi	r18, 0x00	; 0
    305a:	30 e0       	ldi	r19, 0x00	; 0
    305c:	4a ef       	ldi	r20, 0xFA	; 250
    305e:	54 e4       	ldi	r21, 0x44	; 68
    3060:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3064:	dc 01       	movw	r26, r24
    3066:	cb 01       	movw	r24, r22
    3068:	f8 01       	movw	r30, r16
    306a:	80 83       	st	Z, r24
    306c:	91 83       	std	Z+1, r25	; 0x01
    306e:	a2 83       	std	Z+2, r26	; 0x02
    3070:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3072:	fe 01       	movw	r30, r28
    3074:	e3 5b       	subi	r30, 0xB3	; 179
    3076:	ff 4f       	sbci	r31, 0xFF	; 255
    3078:	60 81       	ld	r22, Z
    307a:	71 81       	ldd	r23, Z+1	; 0x01
    307c:	82 81       	ldd	r24, Z+2	; 0x02
    307e:	93 81       	ldd	r25, Z+3	; 0x03
    3080:	20 e0       	ldi	r18, 0x00	; 0
    3082:	30 e0       	ldi	r19, 0x00	; 0
    3084:	40 e8       	ldi	r20, 0x80	; 128
    3086:	5f e3       	ldi	r21, 0x3F	; 63
    3088:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    308c:	88 23       	and	r24, r24
    308e:	44 f4       	brge	.+16     	; 0x30a0 <Login+0x292>
		__ticks = 1;
    3090:	fe 01       	movw	r30, r28
    3092:	e5 5b       	subi	r30, 0xB5	; 181
    3094:	ff 4f       	sbci	r31, 0xFF	; 255
    3096:	81 e0       	ldi	r24, 0x01	; 1
    3098:	90 e0       	ldi	r25, 0x00	; 0
    309a:	91 83       	std	Z+1, r25	; 0x01
    309c:	80 83       	st	Z, r24
    309e:	64 c0       	rjmp	.+200    	; 0x3168 <Login+0x35a>
	else if (__tmp > 65535)
    30a0:	fe 01       	movw	r30, r28
    30a2:	e3 5b       	subi	r30, 0xB3	; 179
    30a4:	ff 4f       	sbci	r31, 0xFF	; 255
    30a6:	60 81       	ld	r22, Z
    30a8:	71 81       	ldd	r23, Z+1	; 0x01
    30aa:	82 81       	ldd	r24, Z+2	; 0x02
    30ac:	93 81       	ldd	r25, Z+3	; 0x03
    30ae:	20 e0       	ldi	r18, 0x00	; 0
    30b0:	3f ef       	ldi	r19, 0xFF	; 255
    30b2:	4f e7       	ldi	r20, 0x7F	; 127
    30b4:	57 e4       	ldi	r21, 0x47	; 71
    30b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30ba:	18 16       	cp	r1, r24
    30bc:	0c f0       	brlt	.+2      	; 0x30c0 <Login+0x2b2>
    30be:	43 c0       	rjmp	.+134    	; 0x3146 <Login+0x338>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30c0:	fe 01       	movw	r30, r28
    30c2:	ef 5a       	subi	r30, 0xAF	; 175
    30c4:	ff 4f       	sbci	r31, 0xFF	; 255
    30c6:	60 81       	ld	r22, Z
    30c8:	71 81       	ldd	r23, Z+1	; 0x01
    30ca:	82 81       	ldd	r24, Z+2	; 0x02
    30cc:	93 81       	ldd	r25, Z+3	; 0x03
    30ce:	20 e0       	ldi	r18, 0x00	; 0
    30d0:	30 e0       	ldi	r19, 0x00	; 0
    30d2:	40 e2       	ldi	r20, 0x20	; 32
    30d4:	51 e4       	ldi	r21, 0x41	; 65
    30d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30da:	dc 01       	movw	r26, r24
    30dc:	cb 01       	movw	r24, r22
    30de:	8e 01       	movw	r16, r28
    30e0:	05 5b       	subi	r16, 0xB5	; 181
    30e2:	1f 4f       	sbci	r17, 0xFF	; 255
    30e4:	bc 01       	movw	r22, r24
    30e6:	cd 01       	movw	r24, r26
    30e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ec:	dc 01       	movw	r26, r24
    30ee:	cb 01       	movw	r24, r22
    30f0:	f8 01       	movw	r30, r16
    30f2:	91 83       	std	Z+1, r25	; 0x01
    30f4:	80 83       	st	Z, r24
    30f6:	1f c0       	rjmp	.+62     	; 0x3136 <Login+0x328>
    30f8:	fe 01       	movw	r30, r28
    30fa:	e7 5b       	subi	r30, 0xB7	; 183
    30fc:	ff 4f       	sbci	r31, 0xFF	; 255
    30fe:	88 ec       	ldi	r24, 0xC8	; 200
    3100:	90 e0       	ldi	r25, 0x00	; 0
    3102:	91 83       	std	Z+1, r25	; 0x01
    3104:	80 83       	st	Z, r24
    3106:	fe 01       	movw	r30, r28
    3108:	e7 5b       	subi	r30, 0xB7	; 183
    310a:	ff 4f       	sbci	r31, 0xFF	; 255
    310c:	80 81       	ld	r24, Z
    310e:	91 81       	ldd	r25, Z+1	; 0x01
    3110:	01 97       	sbiw	r24, 0x01	; 1
    3112:	f1 f7       	brne	.-4      	; 0x3110 <Login+0x302>
    3114:	fe 01       	movw	r30, r28
    3116:	e7 5b       	subi	r30, 0xB7	; 183
    3118:	ff 4f       	sbci	r31, 0xFF	; 255
    311a:	91 83       	std	Z+1, r25	; 0x01
    311c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    311e:	de 01       	movw	r26, r28
    3120:	a5 5b       	subi	r26, 0xB5	; 181
    3122:	bf 4f       	sbci	r27, 0xFF	; 255
    3124:	fe 01       	movw	r30, r28
    3126:	e5 5b       	subi	r30, 0xB5	; 181
    3128:	ff 4f       	sbci	r31, 0xFF	; 255
    312a:	80 81       	ld	r24, Z
    312c:	91 81       	ldd	r25, Z+1	; 0x01
    312e:	01 97       	sbiw	r24, 0x01	; 1
    3130:	11 96       	adiw	r26, 0x01	; 1
    3132:	9c 93       	st	X, r25
    3134:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3136:	fe 01       	movw	r30, r28
    3138:	e5 5b       	subi	r30, 0xB5	; 181
    313a:	ff 4f       	sbci	r31, 0xFF	; 255
    313c:	80 81       	ld	r24, Z
    313e:	91 81       	ldd	r25, Z+1	; 0x01
    3140:	00 97       	sbiw	r24, 0x00	; 0
    3142:	d1 f6       	brne	.-76     	; 0x30f8 <Login+0x2ea>
    3144:	27 c0       	rjmp	.+78     	; 0x3194 <Login+0x386>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3146:	8e 01       	movw	r16, r28
    3148:	05 5b       	subi	r16, 0xB5	; 181
    314a:	1f 4f       	sbci	r17, 0xFF	; 255
    314c:	fe 01       	movw	r30, r28
    314e:	e3 5b       	subi	r30, 0xB3	; 179
    3150:	ff 4f       	sbci	r31, 0xFF	; 255
    3152:	60 81       	ld	r22, Z
    3154:	71 81       	ldd	r23, Z+1	; 0x01
    3156:	82 81       	ldd	r24, Z+2	; 0x02
    3158:	93 81       	ldd	r25, Z+3	; 0x03
    315a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    315e:	dc 01       	movw	r26, r24
    3160:	cb 01       	movw	r24, r22
    3162:	f8 01       	movw	r30, r16
    3164:	91 83       	std	Z+1, r25	; 0x01
    3166:	80 83       	st	Z, r24
    3168:	de 01       	movw	r26, r28
    316a:	a9 5b       	subi	r26, 0xB9	; 185
    316c:	bf 4f       	sbci	r27, 0xFF	; 255
    316e:	fe 01       	movw	r30, r28
    3170:	e5 5b       	subi	r30, 0xB5	; 181
    3172:	ff 4f       	sbci	r31, 0xFF	; 255
    3174:	80 81       	ld	r24, Z
    3176:	91 81       	ldd	r25, Z+1	; 0x01
    3178:	8d 93       	st	X+, r24
    317a:	9c 93       	st	X, r25
    317c:	fe 01       	movw	r30, r28
    317e:	e9 5b       	subi	r30, 0xB9	; 185
    3180:	ff 4f       	sbci	r31, 0xFF	; 255
    3182:	80 81       	ld	r24, Z
    3184:	91 81       	ldd	r25, Z+1	; 0x01
    3186:	01 97       	sbiw	r24, 0x01	; 1
    3188:	f1 f7       	brne	.-4      	; 0x3186 <Login+0x378>
    318a:	fe 01       	movw	r30, r28
    318c:	e9 5b       	subi	r30, 0xB9	; 185
    318e:	ff 4f       	sbci	r31, 0xFF	; 255
    3190:	91 83       	std	Z+1, r25	; 0x01
    3192:	80 83       	st	Z, r24
			_delay_ms(1000);
			LCD_WriteCommand(clear);
    3194:	81 e0       	ldi	r24, 0x01	; 1
    3196:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <LCD_WriteCommand>
			return 0 ;
    319a:	a5 96       	adiw	r28, 0x25	; 37
    319c:	1f ae       	std	Y+63, r1	; 0x3f
    319e:	a5 97       	sbiw	r28, 0x25	; 37
    31a0:	a0 c2       	rjmp	.+1344   	; 0x36e2 <Login+0x8d4>
		break;

	}
	case user2:
	{
		if (checkUser2Pass() == 1)
    31a2:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <checkUser2Pass>
    31a6:	81 30       	cpi	r24, 0x01	; 1
    31a8:	41 f4       	brne	.+16     	; 0x31ba <Login+0x3ac>
		{
			rigthPass();
    31aa:	0e 94 b9 23 	call	0x4772	; 0x4772 <rigthPass>
			options();
    31ae:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <options>
			return 0 ;
    31b2:	a5 96       	adiw	r28, 0x25	; 37
    31b4:	1f ae       	std	Y+63, r1	; 0x3f
    31b6:	a5 97       	sbiw	r28, 0x25	; 37
    31b8:	94 c2       	rjmp	.+1320   	; 0x36e2 <Login+0x8d4>

		}
		else
		{
			LCD_WriteString("no tries left");
    31ba:	80 e6       	ldi	r24, 0x60	; 96
    31bc:	90 e0       	ldi	r25, 0x00	; 0
    31be:	0e 94 2c 14 	call	0x2858	; 0x2858 <LCD_WriteString>
    31c2:	fe 01       	movw	r30, r28
    31c4:	ed 5b       	subi	r30, 0xBD	; 189
    31c6:	ff 4f       	sbci	r31, 0xFF	; 255
    31c8:	80 e0       	ldi	r24, 0x00	; 0
    31ca:	90 e0       	ldi	r25, 0x00	; 0
    31cc:	a6 e9       	ldi	r26, 0x96	; 150
    31ce:	b3 e4       	ldi	r27, 0x43	; 67
    31d0:	80 83       	st	Z, r24
    31d2:	91 83       	std	Z+1, r25	; 0x01
    31d4:	a2 83       	std	Z+2, r26	; 0x02
    31d6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31d8:	8e 01       	movw	r16, r28
    31da:	01 5c       	subi	r16, 0xC1	; 193
    31dc:	1f 4f       	sbci	r17, 0xFF	; 255
    31de:	fe 01       	movw	r30, r28
    31e0:	ed 5b       	subi	r30, 0xBD	; 189
    31e2:	ff 4f       	sbci	r31, 0xFF	; 255
    31e4:	60 81       	ld	r22, Z
    31e6:	71 81       	ldd	r23, Z+1	; 0x01
    31e8:	82 81       	ldd	r24, Z+2	; 0x02
    31ea:	93 81       	ldd	r25, Z+3	; 0x03
    31ec:	20 e0       	ldi	r18, 0x00	; 0
    31ee:	30 e0       	ldi	r19, 0x00	; 0
    31f0:	4a ef       	ldi	r20, 0xFA	; 250
    31f2:	54 e4       	ldi	r21, 0x44	; 68
    31f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31f8:	dc 01       	movw	r26, r24
    31fa:	cb 01       	movw	r24, r22
    31fc:	f8 01       	movw	r30, r16
    31fe:	80 83       	st	Z, r24
    3200:	91 83       	std	Z+1, r25	; 0x01
    3202:	a2 83       	std	Z+2, r26	; 0x02
    3204:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3206:	fe 01       	movw	r30, r28
    3208:	ff 96       	adiw	r30, 0x3f	; 63
    320a:	60 81       	ld	r22, Z
    320c:	71 81       	ldd	r23, Z+1	; 0x01
    320e:	82 81       	ldd	r24, Z+2	; 0x02
    3210:	93 81       	ldd	r25, Z+3	; 0x03
    3212:	20 e0       	ldi	r18, 0x00	; 0
    3214:	30 e0       	ldi	r19, 0x00	; 0
    3216:	40 e8       	ldi	r20, 0x80	; 128
    3218:	5f e3       	ldi	r21, 0x3F	; 63
    321a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    321e:	88 23       	and	r24, r24
    3220:	2c f4       	brge	.+10     	; 0x322c <Login+0x41e>
		__ticks = 1;
    3222:	81 e0       	ldi	r24, 0x01	; 1
    3224:	90 e0       	ldi	r25, 0x00	; 0
    3226:	9e af       	std	Y+62, r25	; 0x3e
    3228:	8d af       	std	Y+61, r24	; 0x3d
    322a:	46 c0       	rjmp	.+140    	; 0x32b8 <Login+0x4aa>
	else if (__tmp > 65535)
    322c:	fe 01       	movw	r30, r28
    322e:	ff 96       	adiw	r30, 0x3f	; 63
    3230:	60 81       	ld	r22, Z
    3232:	71 81       	ldd	r23, Z+1	; 0x01
    3234:	82 81       	ldd	r24, Z+2	; 0x02
    3236:	93 81       	ldd	r25, Z+3	; 0x03
    3238:	20 e0       	ldi	r18, 0x00	; 0
    323a:	3f ef       	ldi	r19, 0xFF	; 255
    323c:	4f e7       	ldi	r20, 0x7F	; 127
    323e:	57 e4       	ldi	r21, 0x47	; 71
    3240:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3244:	18 16       	cp	r1, r24
    3246:	64 f5       	brge	.+88     	; 0x32a0 <Login+0x492>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3248:	fe 01       	movw	r30, r28
    324a:	ed 5b       	subi	r30, 0xBD	; 189
    324c:	ff 4f       	sbci	r31, 0xFF	; 255
    324e:	60 81       	ld	r22, Z
    3250:	71 81       	ldd	r23, Z+1	; 0x01
    3252:	82 81       	ldd	r24, Z+2	; 0x02
    3254:	93 81       	ldd	r25, Z+3	; 0x03
    3256:	20 e0       	ldi	r18, 0x00	; 0
    3258:	30 e0       	ldi	r19, 0x00	; 0
    325a:	40 e2       	ldi	r20, 0x20	; 32
    325c:	51 e4       	ldi	r21, 0x41	; 65
    325e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3262:	dc 01       	movw	r26, r24
    3264:	cb 01       	movw	r24, r22
    3266:	bc 01       	movw	r22, r24
    3268:	cd 01       	movw	r24, r26
    326a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    326e:	dc 01       	movw	r26, r24
    3270:	cb 01       	movw	r24, r22
    3272:	9e af       	std	Y+62, r25	; 0x3e
    3274:	8d af       	std	Y+61, r24	; 0x3d
    3276:	0f c0       	rjmp	.+30     	; 0x3296 <Login+0x488>
    3278:	88 ec       	ldi	r24, 0xC8	; 200
    327a:	90 e0       	ldi	r25, 0x00	; 0
    327c:	9c af       	std	Y+60, r25	; 0x3c
    327e:	8b af       	std	Y+59, r24	; 0x3b
    3280:	8b ad       	ldd	r24, Y+59	; 0x3b
    3282:	9c ad       	ldd	r25, Y+60	; 0x3c
    3284:	01 97       	sbiw	r24, 0x01	; 1
    3286:	f1 f7       	brne	.-4      	; 0x3284 <Login+0x476>
    3288:	9c af       	std	Y+60, r25	; 0x3c
    328a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    328c:	8d ad       	ldd	r24, Y+61	; 0x3d
    328e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3290:	01 97       	sbiw	r24, 0x01	; 1
    3292:	9e af       	std	Y+62, r25	; 0x3e
    3294:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3296:	8d ad       	ldd	r24, Y+61	; 0x3d
    3298:	9e ad       	ldd	r25, Y+62	; 0x3e
    329a:	00 97       	sbiw	r24, 0x00	; 0
    329c:	69 f7       	brne	.-38     	; 0x3278 <Login+0x46a>
    329e:	16 c0       	rjmp	.+44     	; 0x32cc <Login+0x4be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32a0:	fe 01       	movw	r30, r28
    32a2:	ff 96       	adiw	r30, 0x3f	; 63
    32a4:	60 81       	ld	r22, Z
    32a6:	71 81       	ldd	r23, Z+1	; 0x01
    32a8:	82 81       	ldd	r24, Z+2	; 0x02
    32aa:	93 81       	ldd	r25, Z+3	; 0x03
    32ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32b0:	dc 01       	movw	r26, r24
    32b2:	cb 01       	movw	r24, r22
    32b4:	9e af       	std	Y+62, r25	; 0x3e
    32b6:	8d af       	std	Y+61, r24	; 0x3d
    32b8:	8d ad       	ldd	r24, Y+61	; 0x3d
    32ba:	9e ad       	ldd	r25, Y+62	; 0x3e
    32bc:	9a af       	std	Y+58, r25	; 0x3a
    32be:	89 af       	std	Y+57, r24	; 0x39
    32c0:	89 ad       	ldd	r24, Y+57	; 0x39
    32c2:	9a ad       	ldd	r25, Y+58	; 0x3a
    32c4:	01 97       	sbiw	r24, 0x01	; 1
    32c6:	f1 f7       	brne	.-4      	; 0x32c4 <Login+0x4b6>
    32c8:	9a af       	std	Y+58, r25	; 0x3a
    32ca:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(300);
			LCD_WriteCommand(clear);
    32cc:	81 e0       	ldi	r24, 0x01	; 1
    32ce:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <LCD_WriteCommand>
			LCD_WriteString("try again after");
    32d2:	8e e6       	ldi	r24, 0x6E	; 110
    32d4:	90 e0       	ldi	r25, 0x00	; 0
    32d6:	0e 94 2c 14 	call	0x2858	; 0x2858 <LCD_WriteString>
			LCD_GoToXY(1, 6);
    32da:	81 e0       	ldi	r24, 0x01	; 1
    32dc:	66 e0       	ldi	r22, 0x06	; 6
    32de:	0e 94 55 14 	call	0x28aa	; 0x28aa <LCD_GoToXY>
			LCD_WriteString("20 sec");
    32e2:	8e e7       	ldi	r24, 0x7E	; 126
    32e4:	90 e0       	ldi	r25, 0x00	; 0
    32e6:	0e 94 2c 14 	call	0x2858	; 0x2858 <LCD_WriteString>
    32ea:	80 e0       	ldi	r24, 0x00	; 0
    32ec:	90 e0       	ldi	r25, 0x00	; 0
    32ee:	aa e7       	ldi	r26, 0x7A	; 122
    32f0:	b5 e4       	ldi	r27, 0x45	; 69
    32f2:	8d ab       	std	Y+53, r24	; 0x35
    32f4:	9e ab       	std	Y+54, r25	; 0x36
    32f6:	af ab       	std	Y+55, r26	; 0x37
    32f8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32fa:	6d a9       	ldd	r22, Y+53	; 0x35
    32fc:	7e a9       	ldd	r23, Y+54	; 0x36
    32fe:	8f a9       	ldd	r24, Y+55	; 0x37
    3300:	98 ad       	ldd	r25, Y+56	; 0x38
    3302:	20 e0       	ldi	r18, 0x00	; 0
    3304:	30 e0       	ldi	r19, 0x00	; 0
    3306:	4a ef       	ldi	r20, 0xFA	; 250
    3308:	54 e4       	ldi	r21, 0x44	; 68
    330a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    330e:	dc 01       	movw	r26, r24
    3310:	cb 01       	movw	r24, r22
    3312:	89 ab       	std	Y+49, r24	; 0x31
    3314:	9a ab       	std	Y+50, r25	; 0x32
    3316:	ab ab       	std	Y+51, r26	; 0x33
    3318:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    331a:	69 a9       	ldd	r22, Y+49	; 0x31
    331c:	7a a9       	ldd	r23, Y+50	; 0x32
    331e:	8b a9       	ldd	r24, Y+51	; 0x33
    3320:	9c a9       	ldd	r25, Y+52	; 0x34
    3322:	20 e0       	ldi	r18, 0x00	; 0
    3324:	30 e0       	ldi	r19, 0x00	; 0
    3326:	40 e8       	ldi	r20, 0x80	; 128
    3328:	5f e3       	ldi	r21, 0x3F	; 63
    332a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    332e:	88 23       	and	r24, r24
    3330:	2c f4       	brge	.+10     	; 0x333c <Login+0x52e>
		__ticks = 1;
    3332:	81 e0       	ldi	r24, 0x01	; 1
    3334:	90 e0       	ldi	r25, 0x00	; 0
    3336:	98 ab       	std	Y+48, r25	; 0x30
    3338:	8f a7       	std	Y+47, r24	; 0x2f
    333a:	3f c0       	rjmp	.+126    	; 0x33ba <Login+0x5ac>
	else if (__tmp > 65535)
    333c:	69 a9       	ldd	r22, Y+49	; 0x31
    333e:	7a a9       	ldd	r23, Y+50	; 0x32
    3340:	8b a9       	ldd	r24, Y+51	; 0x33
    3342:	9c a9       	ldd	r25, Y+52	; 0x34
    3344:	20 e0       	ldi	r18, 0x00	; 0
    3346:	3f ef       	ldi	r19, 0xFF	; 255
    3348:	4f e7       	ldi	r20, 0x7F	; 127
    334a:	57 e4       	ldi	r21, 0x47	; 71
    334c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3350:	18 16       	cp	r1, r24
    3352:	4c f5       	brge	.+82     	; 0x33a6 <Login+0x598>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3354:	6d a9       	ldd	r22, Y+53	; 0x35
    3356:	7e a9       	ldd	r23, Y+54	; 0x36
    3358:	8f a9       	ldd	r24, Y+55	; 0x37
    335a:	98 ad       	ldd	r25, Y+56	; 0x38
    335c:	20 e0       	ldi	r18, 0x00	; 0
    335e:	30 e0       	ldi	r19, 0x00	; 0
    3360:	40 e2       	ldi	r20, 0x20	; 32
    3362:	51 e4       	ldi	r21, 0x41	; 65
    3364:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3368:	dc 01       	movw	r26, r24
    336a:	cb 01       	movw	r24, r22
    336c:	bc 01       	movw	r22, r24
    336e:	cd 01       	movw	r24, r26
    3370:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3374:	dc 01       	movw	r26, r24
    3376:	cb 01       	movw	r24, r22
    3378:	98 ab       	std	Y+48, r25	; 0x30
    337a:	8f a7       	std	Y+47, r24	; 0x2f
    337c:	0f c0       	rjmp	.+30     	; 0x339c <Login+0x58e>
    337e:	88 ec       	ldi	r24, 0xC8	; 200
    3380:	90 e0       	ldi	r25, 0x00	; 0
    3382:	9e a7       	std	Y+46, r25	; 0x2e
    3384:	8d a7       	std	Y+45, r24	; 0x2d
    3386:	8d a5       	ldd	r24, Y+45	; 0x2d
    3388:	9e a5       	ldd	r25, Y+46	; 0x2e
    338a:	01 97       	sbiw	r24, 0x01	; 1
    338c:	f1 f7       	brne	.-4      	; 0x338a <Login+0x57c>
    338e:	9e a7       	std	Y+46, r25	; 0x2e
    3390:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3392:	8f a5       	ldd	r24, Y+47	; 0x2f
    3394:	98 a9       	ldd	r25, Y+48	; 0x30
    3396:	01 97       	sbiw	r24, 0x01	; 1
    3398:	98 ab       	std	Y+48, r25	; 0x30
    339a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    339c:	8f a5       	ldd	r24, Y+47	; 0x2f
    339e:	98 a9       	ldd	r25, Y+48	; 0x30
    33a0:	00 97       	sbiw	r24, 0x00	; 0
    33a2:	69 f7       	brne	.-38     	; 0x337e <Login+0x570>
    33a4:	14 c0       	rjmp	.+40     	; 0x33ce <Login+0x5c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33a6:	69 a9       	ldd	r22, Y+49	; 0x31
    33a8:	7a a9       	ldd	r23, Y+50	; 0x32
    33aa:	8b a9       	ldd	r24, Y+51	; 0x33
    33ac:	9c a9       	ldd	r25, Y+52	; 0x34
    33ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33b2:	dc 01       	movw	r26, r24
    33b4:	cb 01       	movw	r24, r22
    33b6:	98 ab       	std	Y+48, r25	; 0x30
    33b8:	8f a7       	std	Y+47, r24	; 0x2f
    33ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    33bc:	98 a9       	ldd	r25, Y+48	; 0x30
    33be:	9c a7       	std	Y+44, r25	; 0x2c
    33c0:	8b a7       	std	Y+43, r24	; 0x2b
    33c2:	8b a5       	ldd	r24, Y+43	; 0x2b
    33c4:	9c a5       	ldd	r25, Y+44	; 0x2c
    33c6:	01 97       	sbiw	r24, 0x01	; 1
    33c8:	f1 f7       	brne	.-4      	; 0x33c6 <Login+0x5b8>
    33ca:	9c a7       	std	Y+44, r25	; 0x2c
    33cc:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(4000);
			LCD_WriteCommand(clear);
    33ce:	81 e0       	ldi	r24, 0x01	; 1
    33d0:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <LCD_WriteCommand>
			return 0 ;
    33d4:	a5 96       	adiw	r28, 0x25	; 37
    33d6:	1f ae       	std	Y+63, r1	; 0x3f
    33d8:	a5 97       	sbiw	r28, 0x25	; 37
    33da:	83 c1       	rjmp	.+774    	; 0x36e2 <Login+0x8d4>
		break;

	}
	case user3:
	{
		if (checkUser3Pass() == 1)
    33dc:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <checkUser3Pass>
    33e0:	81 30       	cpi	r24, 0x01	; 1
    33e2:	41 f4       	brne	.+16     	; 0x33f4 <Login+0x5e6>
		{
			rigthPass();
    33e4:	0e 94 b9 23 	call	0x4772	; 0x4772 <rigthPass>
			options();
    33e8:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <options>

			return 0 ;
    33ec:	a5 96       	adiw	r28, 0x25	; 37
    33ee:	1f ae       	std	Y+63, r1	; 0x3f
    33f0:	a5 97       	sbiw	r28, 0x25	; 37
    33f2:	77 c1       	rjmp	.+750    	; 0x36e2 <Login+0x8d4>

		}
		else
		{
			LCD_WriteString("no tries left");
    33f4:	80 e6       	ldi	r24, 0x60	; 96
    33f6:	90 e0       	ldi	r25, 0x00	; 0
    33f8:	0e 94 2c 14 	call	0x2858	; 0x2858 <LCD_WriteString>
    33fc:	80 e0       	ldi	r24, 0x00	; 0
    33fe:	90 e0       	ldi	r25, 0x00	; 0
    3400:	a8 ec       	ldi	r26, 0xC8	; 200
    3402:	b2 e4       	ldi	r27, 0x42	; 66
    3404:	8f a3       	std	Y+39, r24	; 0x27
    3406:	98 a7       	std	Y+40, r25	; 0x28
    3408:	a9 a7       	std	Y+41, r26	; 0x29
    340a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    340c:	6f a1       	ldd	r22, Y+39	; 0x27
    340e:	78 a5       	ldd	r23, Y+40	; 0x28
    3410:	89 a5       	ldd	r24, Y+41	; 0x29
    3412:	9a a5       	ldd	r25, Y+42	; 0x2a
    3414:	20 e0       	ldi	r18, 0x00	; 0
    3416:	30 e0       	ldi	r19, 0x00	; 0
    3418:	4a ef       	ldi	r20, 0xFA	; 250
    341a:	54 e4       	ldi	r21, 0x44	; 68
    341c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3420:	dc 01       	movw	r26, r24
    3422:	cb 01       	movw	r24, r22
    3424:	8b a3       	std	Y+35, r24	; 0x23
    3426:	9c a3       	std	Y+36, r25	; 0x24
    3428:	ad a3       	std	Y+37, r26	; 0x25
    342a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    342c:	6b a1       	ldd	r22, Y+35	; 0x23
    342e:	7c a1       	ldd	r23, Y+36	; 0x24
    3430:	8d a1       	ldd	r24, Y+37	; 0x25
    3432:	9e a1       	ldd	r25, Y+38	; 0x26
    3434:	20 e0       	ldi	r18, 0x00	; 0
    3436:	30 e0       	ldi	r19, 0x00	; 0
    3438:	40 e8       	ldi	r20, 0x80	; 128
    343a:	5f e3       	ldi	r21, 0x3F	; 63
    343c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3440:	88 23       	and	r24, r24
    3442:	2c f4       	brge	.+10     	; 0x344e <Login+0x640>
		__ticks = 1;
    3444:	81 e0       	ldi	r24, 0x01	; 1
    3446:	90 e0       	ldi	r25, 0x00	; 0
    3448:	9a a3       	std	Y+34, r25	; 0x22
    344a:	89 a3       	std	Y+33, r24	; 0x21
    344c:	3f c0       	rjmp	.+126    	; 0x34cc <Login+0x6be>
	else if (__tmp > 65535)
    344e:	6b a1       	ldd	r22, Y+35	; 0x23
    3450:	7c a1       	ldd	r23, Y+36	; 0x24
    3452:	8d a1       	ldd	r24, Y+37	; 0x25
    3454:	9e a1       	ldd	r25, Y+38	; 0x26
    3456:	20 e0       	ldi	r18, 0x00	; 0
    3458:	3f ef       	ldi	r19, 0xFF	; 255
    345a:	4f e7       	ldi	r20, 0x7F	; 127
    345c:	57 e4       	ldi	r21, 0x47	; 71
    345e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3462:	18 16       	cp	r1, r24
    3464:	4c f5       	brge	.+82     	; 0x34b8 <Login+0x6aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3466:	6f a1       	ldd	r22, Y+39	; 0x27
    3468:	78 a5       	ldd	r23, Y+40	; 0x28
    346a:	89 a5       	ldd	r24, Y+41	; 0x29
    346c:	9a a5       	ldd	r25, Y+42	; 0x2a
    346e:	20 e0       	ldi	r18, 0x00	; 0
    3470:	30 e0       	ldi	r19, 0x00	; 0
    3472:	40 e2       	ldi	r20, 0x20	; 32
    3474:	51 e4       	ldi	r21, 0x41	; 65
    3476:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    347a:	dc 01       	movw	r26, r24
    347c:	cb 01       	movw	r24, r22
    347e:	bc 01       	movw	r22, r24
    3480:	cd 01       	movw	r24, r26
    3482:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3486:	dc 01       	movw	r26, r24
    3488:	cb 01       	movw	r24, r22
    348a:	9a a3       	std	Y+34, r25	; 0x22
    348c:	89 a3       	std	Y+33, r24	; 0x21
    348e:	0f c0       	rjmp	.+30     	; 0x34ae <Login+0x6a0>
    3490:	88 ec       	ldi	r24, 0xC8	; 200
    3492:	90 e0       	ldi	r25, 0x00	; 0
    3494:	98 a3       	std	Y+32, r25	; 0x20
    3496:	8f 8f       	std	Y+31, r24	; 0x1f
    3498:	8f 8d       	ldd	r24, Y+31	; 0x1f
    349a:	98 a1       	ldd	r25, Y+32	; 0x20
    349c:	01 97       	sbiw	r24, 0x01	; 1
    349e:	f1 f7       	brne	.-4      	; 0x349c <Login+0x68e>
    34a0:	98 a3       	std	Y+32, r25	; 0x20
    34a2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34a4:	89 a1       	ldd	r24, Y+33	; 0x21
    34a6:	9a a1       	ldd	r25, Y+34	; 0x22
    34a8:	01 97       	sbiw	r24, 0x01	; 1
    34aa:	9a a3       	std	Y+34, r25	; 0x22
    34ac:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34ae:	89 a1       	ldd	r24, Y+33	; 0x21
    34b0:	9a a1       	ldd	r25, Y+34	; 0x22
    34b2:	00 97       	sbiw	r24, 0x00	; 0
    34b4:	69 f7       	brne	.-38     	; 0x3490 <Login+0x682>
    34b6:	14 c0       	rjmp	.+40     	; 0x34e0 <Login+0x6d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34b8:	6b a1       	ldd	r22, Y+35	; 0x23
    34ba:	7c a1       	ldd	r23, Y+36	; 0x24
    34bc:	8d a1       	ldd	r24, Y+37	; 0x25
    34be:	9e a1       	ldd	r25, Y+38	; 0x26
    34c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34c4:	dc 01       	movw	r26, r24
    34c6:	cb 01       	movw	r24, r22
    34c8:	9a a3       	std	Y+34, r25	; 0x22
    34ca:	89 a3       	std	Y+33, r24	; 0x21
    34cc:	89 a1       	ldd	r24, Y+33	; 0x21
    34ce:	9a a1       	ldd	r25, Y+34	; 0x22
    34d0:	9e 8f       	std	Y+30, r25	; 0x1e
    34d2:	8d 8f       	std	Y+29, r24	; 0x1d
    34d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    34d6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    34d8:	01 97       	sbiw	r24, 0x01	; 1
    34da:	f1 f7       	brne	.-4      	; 0x34d8 <Login+0x6ca>
    34dc:	9e 8f       	std	Y+30, r25	; 0x1e
    34de:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(100);
			LCD_WriteCommand(clear);
    34e0:	81 e0       	ldi	r24, 0x01	; 1
    34e2:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <LCD_WriteCommand>
			LCD_WriteString("try again after");
    34e6:	8e e6       	ldi	r24, 0x6E	; 110
    34e8:	90 e0       	ldi	r25, 0x00	; 0
    34ea:	0e 94 2c 14 	call	0x2858	; 0x2858 <LCD_WriteString>
			LCD_GoToXY(1, 6);
    34ee:	81 e0       	ldi	r24, 0x01	; 1
    34f0:	66 e0       	ldi	r22, 0x06	; 6
    34f2:	0e 94 55 14 	call	0x28aa	; 0x28aa <LCD_GoToXY>
			LCD_WriteString("20 sec");
    34f6:	8e e7       	ldi	r24, 0x7E	; 126
    34f8:	90 e0       	ldi	r25, 0x00	; 0
    34fa:	0e 94 2c 14 	call	0x2858	; 0x2858 <LCD_WriteString>
    34fe:	80 e0       	ldi	r24, 0x00	; 0
    3500:	90 e0       	ldi	r25, 0x00	; 0
    3502:	aa e7       	ldi	r26, 0x7A	; 122
    3504:	b5 e4       	ldi	r27, 0x45	; 69
    3506:	89 8f       	std	Y+25, r24	; 0x19
    3508:	9a 8f       	std	Y+26, r25	; 0x1a
    350a:	ab 8f       	std	Y+27, r26	; 0x1b
    350c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    350e:	69 8d       	ldd	r22, Y+25	; 0x19
    3510:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3512:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3514:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3516:	20 e0       	ldi	r18, 0x00	; 0
    3518:	30 e0       	ldi	r19, 0x00	; 0
    351a:	4a ef       	ldi	r20, 0xFA	; 250
    351c:	54 e4       	ldi	r21, 0x44	; 68
    351e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3522:	dc 01       	movw	r26, r24
    3524:	cb 01       	movw	r24, r22
    3526:	8d 8b       	std	Y+21, r24	; 0x15
    3528:	9e 8b       	std	Y+22, r25	; 0x16
    352a:	af 8b       	std	Y+23, r26	; 0x17
    352c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    352e:	6d 89       	ldd	r22, Y+21	; 0x15
    3530:	7e 89       	ldd	r23, Y+22	; 0x16
    3532:	8f 89       	ldd	r24, Y+23	; 0x17
    3534:	98 8d       	ldd	r25, Y+24	; 0x18
    3536:	20 e0       	ldi	r18, 0x00	; 0
    3538:	30 e0       	ldi	r19, 0x00	; 0
    353a:	40 e8       	ldi	r20, 0x80	; 128
    353c:	5f e3       	ldi	r21, 0x3F	; 63
    353e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3542:	88 23       	and	r24, r24
    3544:	2c f4       	brge	.+10     	; 0x3550 <Login+0x742>
		__ticks = 1;
    3546:	81 e0       	ldi	r24, 0x01	; 1
    3548:	90 e0       	ldi	r25, 0x00	; 0
    354a:	9c 8b       	std	Y+20, r25	; 0x14
    354c:	8b 8b       	std	Y+19, r24	; 0x13
    354e:	3f c0       	rjmp	.+126    	; 0x35ce <Login+0x7c0>
	else if (__tmp > 65535)
    3550:	6d 89       	ldd	r22, Y+21	; 0x15
    3552:	7e 89       	ldd	r23, Y+22	; 0x16
    3554:	8f 89       	ldd	r24, Y+23	; 0x17
    3556:	98 8d       	ldd	r25, Y+24	; 0x18
    3558:	20 e0       	ldi	r18, 0x00	; 0
    355a:	3f ef       	ldi	r19, 0xFF	; 255
    355c:	4f e7       	ldi	r20, 0x7F	; 127
    355e:	57 e4       	ldi	r21, 0x47	; 71
    3560:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3564:	18 16       	cp	r1, r24
    3566:	4c f5       	brge	.+82     	; 0x35ba <Login+0x7ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3568:	69 8d       	ldd	r22, Y+25	; 0x19
    356a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    356c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    356e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3570:	20 e0       	ldi	r18, 0x00	; 0
    3572:	30 e0       	ldi	r19, 0x00	; 0
    3574:	40 e2       	ldi	r20, 0x20	; 32
    3576:	51 e4       	ldi	r21, 0x41	; 65
    3578:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    357c:	dc 01       	movw	r26, r24
    357e:	cb 01       	movw	r24, r22
    3580:	bc 01       	movw	r22, r24
    3582:	cd 01       	movw	r24, r26
    3584:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3588:	dc 01       	movw	r26, r24
    358a:	cb 01       	movw	r24, r22
    358c:	9c 8b       	std	Y+20, r25	; 0x14
    358e:	8b 8b       	std	Y+19, r24	; 0x13
    3590:	0f c0       	rjmp	.+30     	; 0x35b0 <Login+0x7a2>
    3592:	88 ec       	ldi	r24, 0xC8	; 200
    3594:	90 e0       	ldi	r25, 0x00	; 0
    3596:	9a 8b       	std	Y+18, r25	; 0x12
    3598:	89 8b       	std	Y+17, r24	; 0x11
    359a:	89 89       	ldd	r24, Y+17	; 0x11
    359c:	9a 89       	ldd	r25, Y+18	; 0x12
    359e:	01 97       	sbiw	r24, 0x01	; 1
    35a0:	f1 f7       	brne	.-4      	; 0x359e <Login+0x790>
    35a2:	9a 8b       	std	Y+18, r25	; 0x12
    35a4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35a6:	8b 89       	ldd	r24, Y+19	; 0x13
    35a8:	9c 89       	ldd	r25, Y+20	; 0x14
    35aa:	01 97       	sbiw	r24, 0x01	; 1
    35ac:	9c 8b       	std	Y+20, r25	; 0x14
    35ae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35b0:	8b 89       	ldd	r24, Y+19	; 0x13
    35b2:	9c 89       	ldd	r25, Y+20	; 0x14
    35b4:	00 97       	sbiw	r24, 0x00	; 0
    35b6:	69 f7       	brne	.-38     	; 0x3592 <Login+0x784>
    35b8:	14 c0       	rjmp	.+40     	; 0x35e2 <Login+0x7d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35ba:	6d 89       	ldd	r22, Y+21	; 0x15
    35bc:	7e 89       	ldd	r23, Y+22	; 0x16
    35be:	8f 89       	ldd	r24, Y+23	; 0x17
    35c0:	98 8d       	ldd	r25, Y+24	; 0x18
    35c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35c6:	dc 01       	movw	r26, r24
    35c8:	cb 01       	movw	r24, r22
    35ca:	9c 8b       	std	Y+20, r25	; 0x14
    35cc:	8b 8b       	std	Y+19, r24	; 0x13
    35ce:	8b 89       	ldd	r24, Y+19	; 0x13
    35d0:	9c 89       	ldd	r25, Y+20	; 0x14
    35d2:	98 8b       	std	Y+16, r25	; 0x10
    35d4:	8f 87       	std	Y+15, r24	; 0x0f
    35d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    35d8:	98 89       	ldd	r25, Y+16	; 0x10
    35da:	01 97       	sbiw	r24, 0x01	; 1
    35dc:	f1 f7       	brne	.-4      	; 0x35da <Login+0x7cc>
    35de:	98 8b       	std	Y+16, r25	; 0x10
    35e0:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(4000);
			LCD_WriteCommand(clear);
    35e2:	81 e0       	ldi	r24, 0x01	; 1
    35e4:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <LCD_WriteCommand>
			return 0 ;
    35e8:	a5 96       	adiw	r28, 0x25	; 37
    35ea:	1f ae       	std	Y+63, r1	; 0x3f
    35ec:	a5 97       	sbiw	r28, 0x25	; 37
    35ee:	79 c0       	rjmp	.+242    	; 0x36e2 <Login+0x8d4>
		}
		break;

	}
	default :
		LCD_WriteString("Wrong Option");
    35f0:	85 e8       	ldi	r24, 0x85	; 133
    35f2:	90 e0       	ldi	r25, 0x00	; 0
    35f4:	0e 94 2c 14 	call	0x2858	; 0x2858 <LCD_WriteString>
    35f8:	80 e0       	ldi	r24, 0x00	; 0
    35fa:	90 e0       	ldi	r25, 0x00	; 0
    35fc:	af e2       	ldi	r26, 0x2F	; 47
    35fe:	b4 e4       	ldi	r27, 0x44	; 68
    3600:	8b 87       	std	Y+11, r24	; 0x0b
    3602:	9c 87       	std	Y+12, r25	; 0x0c
    3604:	ad 87       	std	Y+13, r26	; 0x0d
    3606:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3608:	6b 85       	ldd	r22, Y+11	; 0x0b
    360a:	7c 85       	ldd	r23, Y+12	; 0x0c
    360c:	8d 85       	ldd	r24, Y+13	; 0x0d
    360e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3610:	20 e0       	ldi	r18, 0x00	; 0
    3612:	30 e0       	ldi	r19, 0x00	; 0
    3614:	4a ef       	ldi	r20, 0xFA	; 250
    3616:	54 e4       	ldi	r21, 0x44	; 68
    3618:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    361c:	dc 01       	movw	r26, r24
    361e:	cb 01       	movw	r24, r22
    3620:	8f 83       	std	Y+7, r24	; 0x07
    3622:	98 87       	std	Y+8, r25	; 0x08
    3624:	a9 87       	std	Y+9, r26	; 0x09
    3626:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3628:	6f 81       	ldd	r22, Y+7	; 0x07
    362a:	78 85       	ldd	r23, Y+8	; 0x08
    362c:	89 85       	ldd	r24, Y+9	; 0x09
    362e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3630:	20 e0       	ldi	r18, 0x00	; 0
    3632:	30 e0       	ldi	r19, 0x00	; 0
    3634:	40 e8       	ldi	r20, 0x80	; 128
    3636:	5f e3       	ldi	r21, 0x3F	; 63
    3638:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    363c:	88 23       	and	r24, r24
    363e:	2c f4       	brge	.+10     	; 0x364a <Login+0x83c>
		__ticks = 1;
    3640:	81 e0       	ldi	r24, 0x01	; 1
    3642:	90 e0       	ldi	r25, 0x00	; 0
    3644:	9e 83       	std	Y+6, r25	; 0x06
    3646:	8d 83       	std	Y+5, r24	; 0x05
    3648:	3f c0       	rjmp	.+126    	; 0x36c8 <Login+0x8ba>
	else if (__tmp > 65535)
    364a:	6f 81       	ldd	r22, Y+7	; 0x07
    364c:	78 85       	ldd	r23, Y+8	; 0x08
    364e:	89 85       	ldd	r24, Y+9	; 0x09
    3650:	9a 85       	ldd	r25, Y+10	; 0x0a
    3652:	20 e0       	ldi	r18, 0x00	; 0
    3654:	3f ef       	ldi	r19, 0xFF	; 255
    3656:	4f e7       	ldi	r20, 0x7F	; 127
    3658:	57 e4       	ldi	r21, 0x47	; 71
    365a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    365e:	18 16       	cp	r1, r24
    3660:	4c f5       	brge	.+82     	; 0x36b4 <Login+0x8a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3662:	6b 85       	ldd	r22, Y+11	; 0x0b
    3664:	7c 85       	ldd	r23, Y+12	; 0x0c
    3666:	8d 85       	ldd	r24, Y+13	; 0x0d
    3668:	9e 85       	ldd	r25, Y+14	; 0x0e
    366a:	20 e0       	ldi	r18, 0x00	; 0
    366c:	30 e0       	ldi	r19, 0x00	; 0
    366e:	40 e2       	ldi	r20, 0x20	; 32
    3670:	51 e4       	ldi	r21, 0x41	; 65
    3672:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3676:	dc 01       	movw	r26, r24
    3678:	cb 01       	movw	r24, r22
    367a:	bc 01       	movw	r22, r24
    367c:	cd 01       	movw	r24, r26
    367e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3682:	dc 01       	movw	r26, r24
    3684:	cb 01       	movw	r24, r22
    3686:	9e 83       	std	Y+6, r25	; 0x06
    3688:	8d 83       	std	Y+5, r24	; 0x05
    368a:	0f c0       	rjmp	.+30     	; 0x36aa <Login+0x89c>
    368c:	88 ec       	ldi	r24, 0xC8	; 200
    368e:	90 e0       	ldi	r25, 0x00	; 0
    3690:	9c 83       	std	Y+4, r25	; 0x04
    3692:	8b 83       	std	Y+3, r24	; 0x03
    3694:	8b 81       	ldd	r24, Y+3	; 0x03
    3696:	9c 81       	ldd	r25, Y+4	; 0x04
    3698:	01 97       	sbiw	r24, 0x01	; 1
    369a:	f1 f7       	brne	.-4      	; 0x3698 <Login+0x88a>
    369c:	9c 83       	std	Y+4, r25	; 0x04
    369e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36a0:	8d 81       	ldd	r24, Y+5	; 0x05
    36a2:	9e 81       	ldd	r25, Y+6	; 0x06
    36a4:	01 97       	sbiw	r24, 0x01	; 1
    36a6:	9e 83       	std	Y+6, r25	; 0x06
    36a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36aa:	8d 81       	ldd	r24, Y+5	; 0x05
    36ac:	9e 81       	ldd	r25, Y+6	; 0x06
    36ae:	00 97       	sbiw	r24, 0x00	; 0
    36b0:	69 f7       	brne	.-38     	; 0x368c <Login+0x87e>
    36b2:	14 c0       	rjmp	.+40     	; 0x36dc <Login+0x8ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36b4:	6f 81       	ldd	r22, Y+7	; 0x07
    36b6:	78 85       	ldd	r23, Y+8	; 0x08
    36b8:	89 85       	ldd	r24, Y+9	; 0x09
    36ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    36bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36c0:	dc 01       	movw	r26, r24
    36c2:	cb 01       	movw	r24, r22
    36c4:	9e 83       	std	Y+6, r25	; 0x06
    36c6:	8d 83       	std	Y+5, r24	; 0x05
    36c8:	8d 81       	ldd	r24, Y+5	; 0x05
    36ca:	9e 81       	ldd	r25, Y+6	; 0x06
    36cc:	9a 83       	std	Y+2, r25	; 0x02
    36ce:	89 83       	std	Y+1, r24	; 0x01
    36d0:	89 81       	ldd	r24, Y+1	; 0x01
    36d2:	9a 81       	ldd	r25, Y+2	; 0x02
    36d4:	01 97       	sbiw	r24, 0x01	; 1
    36d6:	f1 f7       	brne	.-4      	; 0x36d4 <Login+0x8c6>
    36d8:	9a 83       	std	Y+2, r25	; 0x02
    36da:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(700);
		return 0 ;
    36dc:	a5 96       	adiw	r28, 0x25	; 37
    36de:	1f ae       	std	Y+63, r1	; 0x3f
    36e0:	a5 97       	sbiw	r28, 0x25	; 37
    36e2:	a5 96       	adiw	r28, 0x25	; 37
    36e4:	8f ad       	ldd	r24, Y+63	; 0x3f
    36e6:	a5 97       	sbiw	r28, 0x25	; 37
	}

}
    36e8:	ca 59       	subi	r28, 0x9A	; 154
    36ea:	df 4f       	sbci	r29, 0xFF	; 255
    36ec:	0f b6       	in	r0, 0x3f	; 63
    36ee:	f8 94       	cli
    36f0:	de bf       	out	0x3e, r29	; 62
    36f2:	0f be       	out	0x3f, r0	; 63
    36f4:	cd bf       	out	0x3d, r28	; 61
    36f6:	cf 91       	pop	r28
    36f8:	df 91       	pop	r29
    36fa:	1f 91       	pop	r17
    36fc:	0f 91       	pop	r16
    36fe:	08 95       	ret

00003700 <loginInit>:

void loginInit(void)
{
    3700:	df 93       	push	r29
    3702:	cf 93       	push	r28
    3704:	cd b7       	in	r28, 0x3d	; 61
    3706:	de b7       	in	r29, 0x3e	; 62
    3708:	aa 97       	sbiw	r28, 0x2a	; 42
    370a:	0f b6       	in	r0, 0x3f	; 63
    370c:	f8 94       	cli
    370e:	de bf       	out	0x3e, r29	; 62
    3710:	0f be       	out	0x3f, r0	; 63
    3712:	cd bf       	out	0x3d, r28	; 61
	LCD_GoToXY(0, 0);
    3714:	80 e0       	ldi	r24, 0x00	; 0
    3716:	60 e0       	ldi	r22, 0x00	; 0
    3718:	0e 94 55 14 	call	0x28aa	; 0x28aa <LCD_GoToXY>
	LCD_WriteString ("  >>welcome<<");
    371c:	82 e9       	ldi	r24, 0x92	; 146
    371e:	90 e0       	ldi	r25, 0x00	; 0
    3720:	0e 94 2c 14 	call	0x2858	; 0x2858 <LCD_WriteString>
    3724:	80 e0       	ldi	r24, 0x00	; 0
    3726:	90 e0       	ldi	r25, 0x00	; 0
    3728:	a8 ec       	ldi	r26, 0xC8	; 200
    372a:	b2 e4       	ldi	r27, 0x42	; 66
    372c:	8f a3       	std	Y+39, r24	; 0x27
    372e:	98 a7       	std	Y+40, r25	; 0x28
    3730:	a9 a7       	std	Y+41, r26	; 0x29
    3732:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3734:	6f a1       	ldd	r22, Y+39	; 0x27
    3736:	78 a5       	ldd	r23, Y+40	; 0x28
    3738:	89 a5       	ldd	r24, Y+41	; 0x29
    373a:	9a a5       	ldd	r25, Y+42	; 0x2a
    373c:	20 e0       	ldi	r18, 0x00	; 0
    373e:	30 e0       	ldi	r19, 0x00	; 0
    3740:	4a ef       	ldi	r20, 0xFA	; 250
    3742:	54 e4       	ldi	r21, 0x44	; 68
    3744:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3748:	dc 01       	movw	r26, r24
    374a:	cb 01       	movw	r24, r22
    374c:	8b a3       	std	Y+35, r24	; 0x23
    374e:	9c a3       	std	Y+36, r25	; 0x24
    3750:	ad a3       	std	Y+37, r26	; 0x25
    3752:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3754:	6b a1       	ldd	r22, Y+35	; 0x23
    3756:	7c a1       	ldd	r23, Y+36	; 0x24
    3758:	8d a1       	ldd	r24, Y+37	; 0x25
    375a:	9e a1       	ldd	r25, Y+38	; 0x26
    375c:	20 e0       	ldi	r18, 0x00	; 0
    375e:	30 e0       	ldi	r19, 0x00	; 0
    3760:	40 e8       	ldi	r20, 0x80	; 128
    3762:	5f e3       	ldi	r21, 0x3F	; 63
    3764:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3768:	88 23       	and	r24, r24
    376a:	2c f4       	brge	.+10     	; 0x3776 <loginInit+0x76>
		__ticks = 1;
    376c:	81 e0       	ldi	r24, 0x01	; 1
    376e:	90 e0       	ldi	r25, 0x00	; 0
    3770:	9a a3       	std	Y+34, r25	; 0x22
    3772:	89 a3       	std	Y+33, r24	; 0x21
    3774:	3f c0       	rjmp	.+126    	; 0x37f4 <loginInit+0xf4>
	else if (__tmp > 65535)
    3776:	6b a1       	ldd	r22, Y+35	; 0x23
    3778:	7c a1       	ldd	r23, Y+36	; 0x24
    377a:	8d a1       	ldd	r24, Y+37	; 0x25
    377c:	9e a1       	ldd	r25, Y+38	; 0x26
    377e:	20 e0       	ldi	r18, 0x00	; 0
    3780:	3f ef       	ldi	r19, 0xFF	; 255
    3782:	4f e7       	ldi	r20, 0x7F	; 127
    3784:	57 e4       	ldi	r21, 0x47	; 71
    3786:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    378a:	18 16       	cp	r1, r24
    378c:	4c f5       	brge	.+82     	; 0x37e0 <loginInit+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    378e:	6f a1       	ldd	r22, Y+39	; 0x27
    3790:	78 a5       	ldd	r23, Y+40	; 0x28
    3792:	89 a5       	ldd	r24, Y+41	; 0x29
    3794:	9a a5       	ldd	r25, Y+42	; 0x2a
    3796:	20 e0       	ldi	r18, 0x00	; 0
    3798:	30 e0       	ldi	r19, 0x00	; 0
    379a:	40 e2       	ldi	r20, 0x20	; 32
    379c:	51 e4       	ldi	r21, 0x41	; 65
    379e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37a2:	dc 01       	movw	r26, r24
    37a4:	cb 01       	movw	r24, r22
    37a6:	bc 01       	movw	r22, r24
    37a8:	cd 01       	movw	r24, r26
    37aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ae:	dc 01       	movw	r26, r24
    37b0:	cb 01       	movw	r24, r22
    37b2:	9a a3       	std	Y+34, r25	; 0x22
    37b4:	89 a3       	std	Y+33, r24	; 0x21
    37b6:	0f c0       	rjmp	.+30     	; 0x37d6 <loginInit+0xd6>
    37b8:	88 ec       	ldi	r24, 0xC8	; 200
    37ba:	90 e0       	ldi	r25, 0x00	; 0
    37bc:	98 a3       	std	Y+32, r25	; 0x20
    37be:	8f 8f       	std	Y+31, r24	; 0x1f
    37c0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    37c2:	98 a1       	ldd	r25, Y+32	; 0x20
    37c4:	01 97       	sbiw	r24, 0x01	; 1
    37c6:	f1 f7       	brne	.-4      	; 0x37c4 <loginInit+0xc4>
    37c8:	98 a3       	std	Y+32, r25	; 0x20
    37ca:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37cc:	89 a1       	ldd	r24, Y+33	; 0x21
    37ce:	9a a1       	ldd	r25, Y+34	; 0x22
    37d0:	01 97       	sbiw	r24, 0x01	; 1
    37d2:	9a a3       	std	Y+34, r25	; 0x22
    37d4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37d6:	89 a1       	ldd	r24, Y+33	; 0x21
    37d8:	9a a1       	ldd	r25, Y+34	; 0x22
    37da:	00 97       	sbiw	r24, 0x00	; 0
    37dc:	69 f7       	brne	.-38     	; 0x37b8 <loginInit+0xb8>
    37de:	14 c0       	rjmp	.+40     	; 0x3808 <loginInit+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37e0:	6b a1       	ldd	r22, Y+35	; 0x23
    37e2:	7c a1       	ldd	r23, Y+36	; 0x24
    37e4:	8d a1       	ldd	r24, Y+37	; 0x25
    37e6:	9e a1       	ldd	r25, Y+38	; 0x26
    37e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ec:	dc 01       	movw	r26, r24
    37ee:	cb 01       	movw	r24, r22
    37f0:	9a a3       	std	Y+34, r25	; 0x22
    37f2:	89 a3       	std	Y+33, r24	; 0x21
    37f4:	89 a1       	ldd	r24, Y+33	; 0x21
    37f6:	9a a1       	ldd	r25, Y+34	; 0x22
    37f8:	9e 8f       	std	Y+30, r25	; 0x1e
    37fa:	8d 8f       	std	Y+29, r24	; 0x1d
    37fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    37fe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3800:	01 97       	sbiw	r24, 0x01	; 1
    3802:	f1 f7       	brne	.-4      	; 0x3800 <loginInit+0x100>
    3804:	9e 8f       	std	Y+30, r25	; 0x1e
    3806:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(100);
	LCD_WriteCommand(clear);
    3808:	81 e0       	ldi	r24, 0x01	; 1
    380a:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <LCD_WriteCommand>
	//_delay_ms(50);
	LCD_WriteString ("  >>welcome<<");
    380e:	82 e9       	ldi	r24, 0x92	; 146
    3810:	90 e0       	ldi	r25, 0x00	; 0
    3812:	0e 94 2c 14 	call	0x2858	; 0x2858 <LCD_WriteString>
    3816:	80 e0       	ldi	r24, 0x00	; 0
    3818:	90 e0       	ldi	r25, 0x00	; 0
    381a:	a8 ec       	ldi	r26, 0xC8	; 200
    381c:	b2 e4       	ldi	r27, 0x42	; 66
    381e:	89 8f       	std	Y+25, r24	; 0x19
    3820:	9a 8f       	std	Y+26, r25	; 0x1a
    3822:	ab 8f       	std	Y+27, r26	; 0x1b
    3824:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3826:	69 8d       	ldd	r22, Y+25	; 0x19
    3828:	7a 8d       	ldd	r23, Y+26	; 0x1a
    382a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    382c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    382e:	20 e0       	ldi	r18, 0x00	; 0
    3830:	30 e0       	ldi	r19, 0x00	; 0
    3832:	4a ef       	ldi	r20, 0xFA	; 250
    3834:	54 e4       	ldi	r21, 0x44	; 68
    3836:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    383a:	dc 01       	movw	r26, r24
    383c:	cb 01       	movw	r24, r22
    383e:	8d 8b       	std	Y+21, r24	; 0x15
    3840:	9e 8b       	std	Y+22, r25	; 0x16
    3842:	af 8b       	std	Y+23, r26	; 0x17
    3844:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3846:	6d 89       	ldd	r22, Y+21	; 0x15
    3848:	7e 89       	ldd	r23, Y+22	; 0x16
    384a:	8f 89       	ldd	r24, Y+23	; 0x17
    384c:	98 8d       	ldd	r25, Y+24	; 0x18
    384e:	20 e0       	ldi	r18, 0x00	; 0
    3850:	30 e0       	ldi	r19, 0x00	; 0
    3852:	40 e8       	ldi	r20, 0x80	; 128
    3854:	5f e3       	ldi	r21, 0x3F	; 63
    3856:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    385a:	88 23       	and	r24, r24
    385c:	2c f4       	brge	.+10     	; 0x3868 <loginInit+0x168>
		__ticks = 1;
    385e:	81 e0       	ldi	r24, 0x01	; 1
    3860:	90 e0       	ldi	r25, 0x00	; 0
    3862:	9c 8b       	std	Y+20, r25	; 0x14
    3864:	8b 8b       	std	Y+19, r24	; 0x13
    3866:	3f c0       	rjmp	.+126    	; 0x38e6 <loginInit+0x1e6>
	else if (__tmp > 65535)
    3868:	6d 89       	ldd	r22, Y+21	; 0x15
    386a:	7e 89       	ldd	r23, Y+22	; 0x16
    386c:	8f 89       	ldd	r24, Y+23	; 0x17
    386e:	98 8d       	ldd	r25, Y+24	; 0x18
    3870:	20 e0       	ldi	r18, 0x00	; 0
    3872:	3f ef       	ldi	r19, 0xFF	; 255
    3874:	4f e7       	ldi	r20, 0x7F	; 127
    3876:	57 e4       	ldi	r21, 0x47	; 71
    3878:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    387c:	18 16       	cp	r1, r24
    387e:	4c f5       	brge	.+82     	; 0x38d2 <loginInit+0x1d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3880:	69 8d       	ldd	r22, Y+25	; 0x19
    3882:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3884:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3886:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3888:	20 e0       	ldi	r18, 0x00	; 0
    388a:	30 e0       	ldi	r19, 0x00	; 0
    388c:	40 e2       	ldi	r20, 0x20	; 32
    388e:	51 e4       	ldi	r21, 0x41	; 65
    3890:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3894:	dc 01       	movw	r26, r24
    3896:	cb 01       	movw	r24, r22
    3898:	bc 01       	movw	r22, r24
    389a:	cd 01       	movw	r24, r26
    389c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38a0:	dc 01       	movw	r26, r24
    38a2:	cb 01       	movw	r24, r22
    38a4:	9c 8b       	std	Y+20, r25	; 0x14
    38a6:	8b 8b       	std	Y+19, r24	; 0x13
    38a8:	0f c0       	rjmp	.+30     	; 0x38c8 <loginInit+0x1c8>
    38aa:	88 ec       	ldi	r24, 0xC8	; 200
    38ac:	90 e0       	ldi	r25, 0x00	; 0
    38ae:	9a 8b       	std	Y+18, r25	; 0x12
    38b0:	89 8b       	std	Y+17, r24	; 0x11
    38b2:	89 89       	ldd	r24, Y+17	; 0x11
    38b4:	9a 89       	ldd	r25, Y+18	; 0x12
    38b6:	01 97       	sbiw	r24, 0x01	; 1
    38b8:	f1 f7       	brne	.-4      	; 0x38b6 <loginInit+0x1b6>
    38ba:	9a 8b       	std	Y+18, r25	; 0x12
    38bc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38be:	8b 89       	ldd	r24, Y+19	; 0x13
    38c0:	9c 89       	ldd	r25, Y+20	; 0x14
    38c2:	01 97       	sbiw	r24, 0x01	; 1
    38c4:	9c 8b       	std	Y+20, r25	; 0x14
    38c6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38c8:	8b 89       	ldd	r24, Y+19	; 0x13
    38ca:	9c 89       	ldd	r25, Y+20	; 0x14
    38cc:	00 97       	sbiw	r24, 0x00	; 0
    38ce:	69 f7       	brne	.-38     	; 0x38aa <loginInit+0x1aa>
    38d0:	14 c0       	rjmp	.+40     	; 0x38fa <loginInit+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38d2:	6d 89       	ldd	r22, Y+21	; 0x15
    38d4:	7e 89       	ldd	r23, Y+22	; 0x16
    38d6:	8f 89       	ldd	r24, Y+23	; 0x17
    38d8:	98 8d       	ldd	r25, Y+24	; 0x18
    38da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38de:	dc 01       	movw	r26, r24
    38e0:	cb 01       	movw	r24, r22
    38e2:	9c 8b       	std	Y+20, r25	; 0x14
    38e4:	8b 8b       	std	Y+19, r24	; 0x13
    38e6:	8b 89       	ldd	r24, Y+19	; 0x13
    38e8:	9c 89       	ldd	r25, Y+20	; 0x14
    38ea:	98 8b       	std	Y+16, r25	; 0x10
    38ec:	8f 87       	std	Y+15, r24	; 0x0f
    38ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    38f0:	98 89       	ldd	r25, Y+16	; 0x10
    38f2:	01 97       	sbiw	r24, 0x01	; 1
    38f4:	f1 f7       	brne	.-4      	; 0x38f2 <loginInit+0x1f2>
    38f6:	98 8b       	std	Y+16, r25	; 0x10
    38f8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	LCD_WriteCommand(clear);
    38fa:	81 e0       	ldi	r24, 0x01	; 1
    38fc:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <LCD_WriteCommand>
    3900:	80 e0       	ldi	r24, 0x00	; 0
    3902:	90 e0       	ldi	r25, 0x00	; 0
    3904:	a8 ec       	ldi	r26, 0xC8	; 200
    3906:	b2 e4       	ldi	r27, 0x42	; 66
    3908:	8b 87       	std	Y+11, r24	; 0x0b
    390a:	9c 87       	std	Y+12, r25	; 0x0c
    390c:	ad 87       	std	Y+13, r26	; 0x0d
    390e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3910:	6b 85       	ldd	r22, Y+11	; 0x0b
    3912:	7c 85       	ldd	r23, Y+12	; 0x0c
    3914:	8d 85       	ldd	r24, Y+13	; 0x0d
    3916:	9e 85       	ldd	r25, Y+14	; 0x0e
    3918:	20 e0       	ldi	r18, 0x00	; 0
    391a:	30 e0       	ldi	r19, 0x00	; 0
    391c:	4a ef       	ldi	r20, 0xFA	; 250
    391e:	54 e4       	ldi	r21, 0x44	; 68
    3920:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3924:	dc 01       	movw	r26, r24
    3926:	cb 01       	movw	r24, r22
    3928:	8f 83       	std	Y+7, r24	; 0x07
    392a:	98 87       	std	Y+8, r25	; 0x08
    392c:	a9 87       	std	Y+9, r26	; 0x09
    392e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3930:	6f 81       	ldd	r22, Y+7	; 0x07
    3932:	78 85       	ldd	r23, Y+8	; 0x08
    3934:	89 85       	ldd	r24, Y+9	; 0x09
    3936:	9a 85       	ldd	r25, Y+10	; 0x0a
    3938:	20 e0       	ldi	r18, 0x00	; 0
    393a:	30 e0       	ldi	r19, 0x00	; 0
    393c:	40 e8       	ldi	r20, 0x80	; 128
    393e:	5f e3       	ldi	r21, 0x3F	; 63
    3940:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3944:	88 23       	and	r24, r24
    3946:	2c f4       	brge	.+10     	; 0x3952 <loginInit+0x252>
		__ticks = 1;
    3948:	81 e0       	ldi	r24, 0x01	; 1
    394a:	90 e0       	ldi	r25, 0x00	; 0
    394c:	9e 83       	std	Y+6, r25	; 0x06
    394e:	8d 83       	std	Y+5, r24	; 0x05
    3950:	3f c0       	rjmp	.+126    	; 0x39d0 <loginInit+0x2d0>
	else if (__tmp > 65535)
    3952:	6f 81       	ldd	r22, Y+7	; 0x07
    3954:	78 85       	ldd	r23, Y+8	; 0x08
    3956:	89 85       	ldd	r24, Y+9	; 0x09
    3958:	9a 85       	ldd	r25, Y+10	; 0x0a
    395a:	20 e0       	ldi	r18, 0x00	; 0
    395c:	3f ef       	ldi	r19, 0xFF	; 255
    395e:	4f e7       	ldi	r20, 0x7F	; 127
    3960:	57 e4       	ldi	r21, 0x47	; 71
    3962:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3966:	18 16       	cp	r1, r24
    3968:	4c f5       	brge	.+82     	; 0x39bc <loginInit+0x2bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    396a:	6b 85       	ldd	r22, Y+11	; 0x0b
    396c:	7c 85       	ldd	r23, Y+12	; 0x0c
    396e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3970:	9e 85       	ldd	r25, Y+14	; 0x0e
    3972:	20 e0       	ldi	r18, 0x00	; 0
    3974:	30 e0       	ldi	r19, 0x00	; 0
    3976:	40 e2       	ldi	r20, 0x20	; 32
    3978:	51 e4       	ldi	r21, 0x41	; 65
    397a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    397e:	dc 01       	movw	r26, r24
    3980:	cb 01       	movw	r24, r22
    3982:	bc 01       	movw	r22, r24
    3984:	cd 01       	movw	r24, r26
    3986:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    398a:	dc 01       	movw	r26, r24
    398c:	cb 01       	movw	r24, r22
    398e:	9e 83       	std	Y+6, r25	; 0x06
    3990:	8d 83       	std	Y+5, r24	; 0x05
    3992:	0f c0       	rjmp	.+30     	; 0x39b2 <loginInit+0x2b2>
    3994:	88 ec       	ldi	r24, 0xC8	; 200
    3996:	90 e0       	ldi	r25, 0x00	; 0
    3998:	9c 83       	std	Y+4, r25	; 0x04
    399a:	8b 83       	std	Y+3, r24	; 0x03
    399c:	8b 81       	ldd	r24, Y+3	; 0x03
    399e:	9c 81       	ldd	r25, Y+4	; 0x04
    39a0:	01 97       	sbiw	r24, 0x01	; 1
    39a2:	f1 f7       	brne	.-4      	; 0x39a0 <loginInit+0x2a0>
    39a4:	9c 83       	std	Y+4, r25	; 0x04
    39a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39a8:	8d 81       	ldd	r24, Y+5	; 0x05
    39aa:	9e 81       	ldd	r25, Y+6	; 0x06
    39ac:	01 97       	sbiw	r24, 0x01	; 1
    39ae:	9e 83       	std	Y+6, r25	; 0x06
    39b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39b2:	8d 81       	ldd	r24, Y+5	; 0x05
    39b4:	9e 81       	ldd	r25, Y+6	; 0x06
    39b6:	00 97       	sbiw	r24, 0x00	; 0
    39b8:	69 f7       	brne	.-38     	; 0x3994 <loginInit+0x294>
    39ba:	14 c0       	rjmp	.+40     	; 0x39e4 <loginInit+0x2e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39bc:	6f 81       	ldd	r22, Y+7	; 0x07
    39be:	78 85       	ldd	r23, Y+8	; 0x08
    39c0:	89 85       	ldd	r24, Y+9	; 0x09
    39c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    39c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39c8:	dc 01       	movw	r26, r24
    39ca:	cb 01       	movw	r24, r22
    39cc:	9e 83       	std	Y+6, r25	; 0x06
    39ce:	8d 83       	std	Y+5, r24	; 0x05
    39d0:	8d 81       	ldd	r24, Y+5	; 0x05
    39d2:	9e 81       	ldd	r25, Y+6	; 0x06
    39d4:	9a 83       	std	Y+2, r25	; 0x02
    39d6:	89 83       	std	Y+1, r24	; 0x01
    39d8:	89 81       	ldd	r24, Y+1	; 0x01
    39da:	9a 81       	ldd	r25, Y+2	; 0x02
    39dc:	01 97       	sbiw	r24, 0x01	; 1
    39de:	f1 f7       	brne	.-4      	; 0x39dc <loginInit+0x2dc>
    39e0:	9a 83       	std	Y+2, r25	; 0x02
    39e2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
	LCD_WriteString("1-user1 2-user2");
    39e4:	80 ea       	ldi	r24, 0xA0	; 160
    39e6:	90 e0       	ldi	r25, 0x00	; 0
    39e8:	0e 94 2c 14 	call	0x2858	; 0x2858 <LCD_WriteString>
	LCD_GoToXY(1, 0);
    39ec:	81 e0       	ldi	r24, 0x01	; 1
    39ee:	60 e0       	ldi	r22, 0x00	; 0
    39f0:	0e 94 55 14 	call	0x28aa	; 0x28aa <LCD_GoToXY>
	LCD_WriteString("3-user3  ");
    39f4:	80 eb       	ldi	r24, 0xB0	; 176
    39f6:	90 e0       	ldi	r25, 0x00	; 0
    39f8:	0e 94 2c 14 	call	0x2858	; 0x2858 <LCD_WriteString>
}
    39fc:	aa 96       	adiw	r28, 0x2a	; 42
    39fe:	0f b6       	in	r0, 0x3f	; 63
    3a00:	f8 94       	cli
    3a02:	de bf       	out	0x3e, r29	; 62
    3a04:	0f be       	out	0x3f, r0	; 63
    3a06:	cd bf       	out	0x3d, r28	; 61
    3a08:	cf 91       	pop	r28
    3a0a:	df 91       	pop	r29
    3a0c:	08 95       	ret

00003a0e <checkUser1Pass>:
u8 checkUser1Pass(void)
{
    3a0e:	df 93       	push	r29
    3a10:	cf 93       	push	r28
    3a12:	00 d0       	rcall	.+0      	; 0x3a14 <checkUser1Pass+0x6>
    3a14:	00 d0       	rcall	.+0      	; 0x3a16 <checkUser1Pass+0x8>
    3a16:	00 d0       	rcall	.+0      	; 0x3a18 <checkUser1Pass+0xa>
    3a18:	cd b7       	in	r28, 0x3d	; 61
    3a1a:	de b7       	in	r29, 0x3e	; 62
	u8 tries = TRIES ;
    3a1c:	83 e0       	ldi	r24, 0x03	; 3
    3a1e:	8d 83       	std	Y+5, r24	; 0x05
    3a20:	21 c0       	rjmp	.+66     	; 0x3a64 <checkUser1Pass+0x56>
	while (tries)
	{
		u32 pass = getPass();
    3a22:	0e 94 38 22 	call	0x4470	; 0x4470 <getPass>
    3a26:	dc 01       	movw	r26, r24
    3a28:	cb 01       	movw	r24, r22
    3a2a:	89 83       	std	Y+1, r24	; 0x01
    3a2c:	9a 83       	std	Y+2, r25	; 0x02
    3a2e:	ab 83       	std	Y+3, r26	; 0x03
    3a30:	bc 83       	std	Y+4, r27	; 0x04
		//get password form user
		if (pass == savedpass1)
    3a32:	20 91 47 02 	lds	r18, 0x0247
    3a36:	30 91 48 02 	lds	r19, 0x0248
    3a3a:	40 91 49 02 	lds	r20, 0x0249
    3a3e:	50 91 4a 02 	lds	r21, 0x024A
    3a42:	89 81       	ldd	r24, Y+1	; 0x01
    3a44:	9a 81       	ldd	r25, Y+2	; 0x02
    3a46:	ab 81       	ldd	r26, Y+3	; 0x03
    3a48:	bc 81       	ldd	r27, Y+4	; 0x04
    3a4a:	82 17       	cp	r24, r18
    3a4c:	93 07       	cpc	r25, r19
    3a4e:	a4 07       	cpc	r26, r20
    3a50:	b5 07       	cpc	r27, r21
    3a52:	19 f4       	brne	.+6      	; 0x3a5a <checkUser1Pass+0x4c>
		{
			return 1 ;
    3a54:	81 e0       	ldi	r24, 0x01	; 1
    3a56:	8e 83       	std	Y+6, r24	; 0x06
    3a58:	09 c0       	rjmp	.+18     	; 0x3a6c <checkUser1Pass+0x5e>
		}
		else
		{
			WrongPass();
    3a5a:	0e 94 45 24 	call	0x488a	; 0x488a <WrongPass>
			tries -- ;
    3a5e:	8d 81       	ldd	r24, Y+5	; 0x05
    3a60:	81 50       	subi	r24, 0x01	; 1
    3a62:	8d 83       	std	Y+5, r24	; 0x05
	LCD_WriteString("3-user3  ");
}
u8 checkUser1Pass(void)
{
	u8 tries = TRIES ;
	while (tries)
    3a64:	8d 81       	ldd	r24, Y+5	; 0x05
    3a66:	88 23       	and	r24, r24
    3a68:	e1 f6       	brne	.-72     	; 0x3a22 <checkUser1Pass+0x14>
		{
			WrongPass();
			tries -- ;
		}
	}
	return 0;
    3a6a:	1e 82       	std	Y+6, r1	; 0x06
    3a6c:	8e 81       	ldd	r24, Y+6	; 0x06
}
    3a6e:	26 96       	adiw	r28, 0x06	; 6
    3a70:	0f b6       	in	r0, 0x3f	; 63
    3a72:	f8 94       	cli
    3a74:	de bf       	out	0x3e, r29	; 62
    3a76:	0f be       	out	0x3f, r0	; 63
    3a78:	cd bf       	out	0x3d, r28	; 61
    3a7a:	cf 91       	pop	r28
    3a7c:	df 91       	pop	r29
    3a7e:	08 95       	ret

00003a80 <checkUser2Pass>:

u8 checkUser2Pass(void)
{
    3a80:	df 93       	push	r29
    3a82:	cf 93       	push	r28
    3a84:	00 d0       	rcall	.+0      	; 0x3a86 <checkUser2Pass+0x6>
    3a86:	00 d0       	rcall	.+0      	; 0x3a88 <checkUser2Pass+0x8>
    3a88:	00 d0       	rcall	.+0      	; 0x3a8a <checkUser2Pass+0xa>
    3a8a:	cd b7       	in	r28, 0x3d	; 61
    3a8c:	de b7       	in	r29, 0x3e	; 62
	u8 tries = TRIES ;
    3a8e:	83 e0       	ldi	r24, 0x03	; 3
    3a90:	8d 83       	std	Y+5, r24	; 0x05
    3a92:	21 c0       	rjmp	.+66     	; 0x3ad6 <checkUser2Pass+0x56>
	while (tries)
	{
		u32 pass = getPass();
    3a94:	0e 94 38 22 	call	0x4470	; 0x4470 <getPass>
    3a98:	dc 01       	movw	r26, r24
    3a9a:	cb 01       	movw	r24, r22
    3a9c:	89 83       	std	Y+1, r24	; 0x01
    3a9e:	9a 83       	std	Y+2, r25	; 0x02
    3aa0:	ab 83       	std	Y+3, r26	; 0x03
    3aa2:	bc 83       	std	Y+4, r27	; 0x04
		//get password form user
		if (pass == savedpass2)
    3aa4:	20 91 4b 02 	lds	r18, 0x024B
    3aa8:	30 91 4c 02 	lds	r19, 0x024C
    3aac:	40 91 4d 02 	lds	r20, 0x024D
    3ab0:	50 91 4e 02 	lds	r21, 0x024E
    3ab4:	89 81       	ldd	r24, Y+1	; 0x01
    3ab6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ab8:	ab 81       	ldd	r26, Y+3	; 0x03
    3aba:	bc 81       	ldd	r27, Y+4	; 0x04
    3abc:	82 17       	cp	r24, r18
    3abe:	93 07       	cpc	r25, r19
    3ac0:	a4 07       	cpc	r26, r20
    3ac2:	b5 07       	cpc	r27, r21
    3ac4:	19 f4       	brne	.+6      	; 0x3acc <checkUser2Pass+0x4c>
		{
			return 1 ;
    3ac6:	81 e0       	ldi	r24, 0x01	; 1
    3ac8:	8e 83       	std	Y+6, r24	; 0x06
    3aca:	09 c0       	rjmp	.+18     	; 0x3ade <checkUser2Pass+0x5e>
		}
		else
		{
			WrongPass();
    3acc:	0e 94 45 24 	call	0x488a	; 0x488a <WrongPass>
			tries -- ;
    3ad0:	8d 81       	ldd	r24, Y+5	; 0x05
    3ad2:	81 50       	subi	r24, 0x01	; 1
    3ad4:	8d 83       	std	Y+5, r24	; 0x05
}

u8 checkUser2Pass(void)
{
	u8 tries = TRIES ;
	while (tries)
    3ad6:	8d 81       	ldd	r24, Y+5	; 0x05
    3ad8:	88 23       	and	r24, r24
    3ada:	e1 f6       	brne	.-72     	; 0x3a94 <checkUser2Pass+0x14>
		{
			WrongPass();
			tries -- ;
		}
	}
	return 0;
    3adc:	1e 82       	std	Y+6, r1	; 0x06
    3ade:	8e 81       	ldd	r24, Y+6	; 0x06
}
    3ae0:	26 96       	adiw	r28, 0x06	; 6
    3ae2:	0f b6       	in	r0, 0x3f	; 63
    3ae4:	f8 94       	cli
    3ae6:	de bf       	out	0x3e, r29	; 62
    3ae8:	0f be       	out	0x3f, r0	; 63
    3aea:	cd bf       	out	0x3d, r28	; 61
    3aec:	cf 91       	pop	r28
    3aee:	df 91       	pop	r29
    3af0:	08 95       	ret

00003af2 <checkUser3Pass>:

u8 checkUser3Pass(void)
{
    3af2:	df 93       	push	r29
    3af4:	cf 93       	push	r28
    3af6:	00 d0       	rcall	.+0      	; 0x3af8 <checkUser3Pass+0x6>
    3af8:	00 d0       	rcall	.+0      	; 0x3afa <checkUser3Pass+0x8>
    3afa:	00 d0       	rcall	.+0      	; 0x3afc <checkUser3Pass+0xa>
    3afc:	cd b7       	in	r28, 0x3d	; 61
    3afe:	de b7       	in	r29, 0x3e	; 62
	u8 tries = TRIES ;
    3b00:	83 e0       	ldi	r24, 0x03	; 3
    3b02:	8d 83       	std	Y+5, r24	; 0x05
    3b04:	21 c0       	rjmp	.+66     	; 0x3b48 <checkUser3Pass+0x56>
	while (tries)
	{
		u32 pass = getPass();
    3b06:	0e 94 38 22 	call	0x4470	; 0x4470 <getPass>
    3b0a:	dc 01       	movw	r26, r24
    3b0c:	cb 01       	movw	r24, r22
    3b0e:	89 83       	std	Y+1, r24	; 0x01
    3b10:	9a 83       	std	Y+2, r25	; 0x02
    3b12:	ab 83       	std	Y+3, r26	; 0x03
    3b14:	bc 83       	std	Y+4, r27	; 0x04
		//get password form user
		if (pass == savedpass3)
    3b16:	20 91 6b 02 	lds	r18, 0x026B
    3b1a:	30 91 6c 02 	lds	r19, 0x026C
    3b1e:	40 91 6d 02 	lds	r20, 0x026D
    3b22:	50 91 6e 02 	lds	r21, 0x026E
    3b26:	89 81       	ldd	r24, Y+1	; 0x01
    3b28:	9a 81       	ldd	r25, Y+2	; 0x02
    3b2a:	ab 81       	ldd	r26, Y+3	; 0x03
    3b2c:	bc 81       	ldd	r27, Y+4	; 0x04
    3b2e:	82 17       	cp	r24, r18
    3b30:	93 07       	cpc	r25, r19
    3b32:	a4 07       	cpc	r26, r20
    3b34:	b5 07       	cpc	r27, r21
    3b36:	19 f4       	brne	.+6      	; 0x3b3e <checkUser3Pass+0x4c>
		{
			return 1 ;
    3b38:	81 e0       	ldi	r24, 0x01	; 1
    3b3a:	8e 83       	std	Y+6, r24	; 0x06
    3b3c:	09 c0       	rjmp	.+18     	; 0x3b50 <checkUser3Pass+0x5e>
		}
		else
		{
			WrongPass();
    3b3e:	0e 94 45 24 	call	0x488a	; 0x488a <WrongPass>
			tries -- ;
    3b42:	8d 81       	ldd	r24, Y+5	; 0x05
    3b44:	81 50       	subi	r24, 0x01	; 1
    3b46:	8d 83       	std	Y+5, r24	; 0x05
}

u8 checkUser3Pass(void)
{
	u8 tries = TRIES ;
	while (tries)
    3b48:	8d 81       	ldd	r24, Y+5	; 0x05
    3b4a:	88 23       	and	r24, r24
    3b4c:	e1 f6       	brne	.-72     	; 0x3b06 <checkUser3Pass+0x14>
		{
			WrongPass();
			tries -- ;
		}
	}
	return 0;
    3b4e:	1e 82       	std	Y+6, r1	; 0x06
    3b50:	8e 81       	ldd	r24, Y+6	; 0x06
}
    3b52:	26 96       	adiw	r28, 0x06	; 6
    3b54:	0f b6       	in	r0, 0x3f	; 63
    3b56:	f8 94       	cli
    3b58:	de bf       	out	0x3e, r29	; 62
    3b5a:	0f be       	out	0x3f, r0	; 63
    3b5c:	cd bf       	out	0x3d, r28	; 61
    3b5e:	cf 91       	pop	r28
    3b60:	df 91       	pop	r29
    3b62:	08 95       	ret

00003b64 <options>:
void options(void)
{
    3b64:	0f 93       	push	r16
    3b66:	1f 93       	push	r17
    3b68:	df 93       	push	r29
    3b6a:	cf 93       	push	r28
    3b6c:	cd b7       	in	r28, 0x3d	; 61
    3b6e:	de b7       	in	r29, 0x3e	; 62
    3b70:	c7 56       	subi	r28, 0x67	; 103
    3b72:	d0 40       	sbci	r29, 0x00	; 0
    3b74:	0f b6       	in	r0, 0x3f	; 63
    3b76:	f8 94       	cli
    3b78:	de bf       	out	0x3e, r29	; 62
    3b7a:	0f be       	out	0x3f, r0	; 63
    3b7c:	cd bf       	out	0x3d, r28	; 61
	LCD_WriteString("1-Rooms 2-Door");
    3b7e:	8a eb       	ldi	r24, 0xBA	; 186
    3b80:	90 e0       	ldi	r25, 0x00	; 0
    3b82:	0e 94 2c 14 	call	0x2858	; 0x2858 <LCD_WriteString>
	LCD_GoToXY(1, 0);
    3b86:	81 e0       	ldi	r24, 0x01	; 1
    3b88:	60 e0       	ldi	r22, 0x00	; 0
    3b8a:	0e 94 55 14 	call	0x28aa	; 0x28aa <LCD_GoToXY>
	LCD_WriteString("3-Fan   4-Back");
    3b8e:	89 ec       	ldi	r24, 0xC9	; 201
    3b90:	90 e0       	ldi	r25, 0x00	; 0
    3b92:	0e 94 2c 14 	call	0x2858	; 0x2858 <LCD_WriteString>
    3b96:	fe 01       	movw	r30, r28
    3b98:	e1 5a       	subi	r30, 0xA1	; 161
    3b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b9c:	80 e0       	ldi	r24, 0x00	; 0
    3b9e:	90 e0       	ldi	r25, 0x00	; 0
    3ba0:	a8 ec       	ldi	r26, 0xC8	; 200
    3ba2:	b2 e4       	ldi	r27, 0x42	; 66
    3ba4:	80 83       	st	Z, r24
    3ba6:	91 83       	std	Z+1, r25	; 0x01
    3ba8:	a2 83       	std	Z+2, r26	; 0x02
    3baa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bac:	8e 01       	movw	r16, r28
    3bae:	05 5a       	subi	r16, 0xA5	; 165
    3bb0:	1f 4f       	sbci	r17, 0xFF	; 255
    3bb2:	fe 01       	movw	r30, r28
    3bb4:	e1 5a       	subi	r30, 0xA1	; 161
    3bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb8:	60 81       	ld	r22, Z
    3bba:	71 81       	ldd	r23, Z+1	; 0x01
    3bbc:	82 81       	ldd	r24, Z+2	; 0x02
    3bbe:	93 81       	ldd	r25, Z+3	; 0x03
    3bc0:	20 e0       	ldi	r18, 0x00	; 0
    3bc2:	30 e0       	ldi	r19, 0x00	; 0
    3bc4:	4a ef       	ldi	r20, 0xFA	; 250
    3bc6:	54 e4       	ldi	r21, 0x44	; 68
    3bc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bcc:	dc 01       	movw	r26, r24
    3bce:	cb 01       	movw	r24, r22
    3bd0:	f8 01       	movw	r30, r16
    3bd2:	80 83       	st	Z, r24
    3bd4:	91 83       	std	Z+1, r25	; 0x01
    3bd6:	a2 83       	std	Z+2, r26	; 0x02
    3bd8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3bda:	fe 01       	movw	r30, r28
    3bdc:	e5 5a       	subi	r30, 0xA5	; 165
    3bde:	ff 4f       	sbci	r31, 0xFF	; 255
    3be0:	60 81       	ld	r22, Z
    3be2:	71 81       	ldd	r23, Z+1	; 0x01
    3be4:	82 81       	ldd	r24, Z+2	; 0x02
    3be6:	93 81       	ldd	r25, Z+3	; 0x03
    3be8:	20 e0       	ldi	r18, 0x00	; 0
    3bea:	30 e0       	ldi	r19, 0x00	; 0
    3bec:	40 e8       	ldi	r20, 0x80	; 128
    3bee:	5f e3       	ldi	r21, 0x3F	; 63
    3bf0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3bf4:	88 23       	and	r24, r24
    3bf6:	44 f4       	brge	.+16     	; 0x3c08 <options+0xa4>
		__ticks = 1;
    3bf8:	fe 01       	movw	r30, r28
    3bfa:	e7 5a       	subi	r30, 0xA7	; 167
    3bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    3bfe:	81 e0       	ldi	r24, 0x01	; 1
    3c00:	90 e0       	ldi	r25, 0x00	; 0
    3c02:	91 83       	std	Z+1, r25	; 0x01
    3c04:	80 83       	st	Z, r24
    3c06:	64 c0       	rjmp	.+200    	; 0x3cd0 <options+0x16c>
	else if (__tmp > 65535)
    3c08:	fe 01       	movw	r30, r28
    3c0a:	e5 5a       	subi	r30, 0xA5	; 165
    3c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c0e:	60 81       	ld	r22, Z
    3c10:	71 81       	ldd	r23, Z+1	; 0x01
    3c12:	82 81       	ldd	r24, Z+2	; 0x02
    3c14:	93 81       	ldd	r25, Z+3	; 0x03
    3c16:	20 e0       	ldi	r18, 0x00	; 0
    3c18:	3f ef       	ldi	r19, 0xFF	; 255
    3c1a:	4f e7       	ldi	r20, 0x7F	; 127
    3c1c:	57 e4       	ldi	r21, 0x47	; 71
    3c1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c22:	18 16       	cp	r1, r24
    3c24:	0c f0       	brlt	.+2      	; 0x3c28 <options+0xc4>
    3c26:	43 c0       	rjmp	.+134    	; 0x3cae <options+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c28:	fe 01       	movw	r30, r28
    3c2a:	e1 5a       	subi	r30, 0xA1	; 161
    3c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c2e:	60 81       	ld	r22, Z
    3c30:	71 81       	ldd	r23, Z+1	; 0x01
    3c32:	82 81       	ldd	r24, Z+2	; 0x02
    3c34:	93 81       	ldd	r25, Z+3	; 0x03
    3c36:	20 e0       	ldi	r18, 0x00	; 0
    3c38:	30 e0       	ldi	r19, 0x00	; 0
    3c3a:	40 e2       	ldi	r20, 0x20	; 32
    3c3c:	51 e4       	ldi	r21, 0x41	; 65
    3c3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c42:	dc 01       	movw	r26, r24
    3c44:	cb 01       	movw	r24, r22
    3c46:	8e 01       	movw	r16, r28
    3c48:	07 5a       	subi	r16, 0xA7	; 167
    3c4a:	1f 4f       	sbci	r17, 0xFF	; 255
    3c4c:	bc 01       	movw	r22, r24
    3c4e:	cd 01       	movw	r24, r26
    3c50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c54:	dc 01       	movw	r26, r24
    3c56:	cb 01       	movw	r24, r22
    3c58:	f8 01       	movw	r30, r16
    3c5a:	91 83       	std	Z+1, r25	; 0x01
    3c5c:	80 83       	st	Z, r24
    3c5e:	1f c0       	rjmp	.+62     	; 0x3c9e <options+0x13a>
    3c60:	fe 01       	movw	r30, r28
    3c62:	e9 5a       	subi	r30, 0xA9	; 169
    3c64:	ff 4f       	sbci	r31, 0xFF	; 255
    3c66:	88 ec       	ldi	r24, 0xC8	; 200
    3c68:	90 e0       	ldi	r25, 0x00	; 0
    3c6a:	91 83       	std	Z+1, r25	; 0x01
    3c6c:	80 83       	st	Z, r24
    3c6e:	fe 01       	movw	r30, r28
    3c70:	e9 5a       	subi	r30, 0xA9	; 169
    3c72:	ff 4f       	sbci	r31, 0xFF	; 255
    3c74:	80 81       	ld	r24, Z
    3c76:	91 81       	ldd	r25, Z+1	; 0x01
    3c78:	01 97       	sbiw	r24, 0x01	; 1
    3c7a:	f1 f7       	brne	.-4      	; 0x3c78 <options+0x114>
    3c7c:	fe 01       	movw	r30, r28
    3c7e:	e9 5a       	subi	r30, 0xA9	; 169
    3c80:	ff 4f       	sbci	r31, 0xFF	; 255
    3c82:	91 83       	std	Z+1, r25	; 0x01
    3c84:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c86:	de 01       	movw	r26, r28
    3c88:	a7 5a       	subi	r26, 0xA7	; 167
    3c8a:	bf 4f       	sbci	r27, 0xFF	; 255
    3c8c:	fe 01       	movw	r30, r28
    3c8e:	e7 5a       	subi	r30, 0xA7	; 167
    3c90:	ff 4f       	sbci	r31, 0xFF	; 255
    3c92:	80 81       	ld	r24, Z
    3c94:	91 81       	ldd	r25, Z+1	; 0x01
    3c96:	01 97       	sbiw	r24, 0x01	; 1
    3c98:	11 96       	adiw	r26, 0x01	; 1
    3c9a:	9c 93       	st	X, r25
    3c9c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c9e:	fe 01       	movw	r30, r28
    3ca0:	e7 5a       	subi	r30, 0xA7	; 167
    3ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca4:	80 81       	ld	r24, Z
    3ca6:	91 81       	ldd	r25, Z+1	; 0x01
    3ca8:	00 97       	sbiw	r24, 0x00	; 0
    3caa:	d1 f6       	brne	.-76     	; 0x3c60 <options+0xfc>
    3cac:	27 c0       	rjmp	.+78     	; 0x3cfc <options+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cae:	8e 01       	movw	r16, r28
    3cb0:	07 5a       	subi	r16, 0xA7	; 167
    3cb2:	1f 4f       	sbci	r17, 0xFF	; 255
    3cb4:	fe 01       	movw	r30, r28
    3cb6:	e5 5a       	subi	r30, 0xA5	; 165
    3cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cba:	60 81       	ld	r22, Z
    3cbc:	71 81       	ldd	r23, Z+1	; 0x01
    3cbe:	82 81       	ldd	r24, Z+2	; 0x02
    3cc0:	93 81       	ldd	r25, Z+3	; 0x03
    3cc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cc6:	dc 01       	movw	r26, r24
    3cc8:	cb 01       	movw	r24, r22
    3cca:	f8 01       	movw	r30, r16
    3ccc:	91 83       	std	Z+1, r25	; 0x01
    3cce:	80 83       	st	Z, r24
    3cd0:	de 01       	movw	r26, r28
    3cd2:	ab 5a       	subi	r26, 0xAB	; 171
    3cd4:	bf 4f       	sbci	r27, 0xFF	; 255
    3cd6:	fe 01       	movw	r30, r28
    3cd8:	e7 5a       	subi	r30, 0xA7	; 167
    3cda:	ff 4f       	sbci	r31, 0xFF	; 255
    3cdc:	80 81       	ld	r24, Z
    3cde:	91 81       	ldd	r25, Z+1	; 0x01
    3ce0:	8d 93       	st	X+, r24
    3ce2:	9c 93       	st	X, r25
    3ce4:	fe 01       	movw	r30, r28
    3ce6:	eb 5a       	subi	r30, 0xAB	; 171
    3ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cea:	80 81       	ld	r24, Z
    3cec:	91 81       	ldd	r25, Z+1	; 0x01
    3cee:	01 97       	sbiw	r24, 0x01	; 1
    3cf0:	f1 f7       	brne	.-4      	; 0x3cee <options+0x18a>
    3cf2:	fe 01       	movw	r30, r28
    3cf4:	eb 5a       	subi	r30, 0xAB	; 171
    3cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf8:	91 83       	std	Z+1, r25	; 0x01
    3cfa:	80 83       	st	Z, r24
	_delay_ms(100);
	u8 option = getOption();
    3cfc:	0e 94 28 22 	call	0x4450	; 0x4450 <getOption>
    3d00:	fe 01       	movw	r30, r28
    3d02:	eb 59       	subi	r30, 0x9B	; 155
    3d04:	ff 4f       	sbci	r31, 0xFF	; 255
    3d06:	80 83       	st	Z, r24
    3d08:	fe 01       	movw	r30, r28
    3d0a:	ef 5a       	subi	r30, 0xAF	; 175
    3d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d0e:	80 e0       	ldi	r24, 0x00	; 0
    3d10:	90 e0       	ldi	r25, 0x00	; 0
    3d12:	a8 ec       	ldi	r26, 0xC8	; 200
    3d14:	b2 e4       	ldi	r27, 0x42	; 66
    3d16:	80 83       	st	Z, r24
    3d18:	91 83       	std	Z+1, r25	; 0x01
    3d1a:	a2 83       	std	Z+2, r26	; 0x02
    3d1c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d1e:	8e 01       	movw	r16, r28
    3d20:	03 5b       	subi	r16, 0xB3	; 179
    3d22:	1f 4f       	sbci	r17, 0xFF	; 255
    3d24:	fe 01       	movw	r30, r28
    3d26:	ef 5a       	subi	r30, 0xAF	; 175
    3d28:	ff 4f       	sbci	r31, 0xFF	; 255
    3d2a:	60 81       	ld	r22, Z
    3d2c:	71 81       	ldd	r23, Z+1	; 0x01
    3d2e:	82 81       	ldd	r24, Z+2	; 0x02
    3d30:	93 81       	ldd	r25, Z+3	; 0x03
    3d32:	20 e0       	ldi	r18, 0x00	; 0
    3d34:	30 e0       	ldi	r19, 0x00	; 0
    3d36:	4a ef       	ldi	r20, 0xFA	; 250
    3d38:	54 e4       	ldi	r21, 0x44	; 68
    3d3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d3e:	dc 01       	movw	r26, r24
    3d40:	cb 01       	movw	r24, r22
    3d42:	f8 01       	movw	r30, r16
    3d44:	80 83       	st	Z, r24
    3d46:	91 83       	std	Z+1, r25	; 0x01
    3d48:	a2 83       	std	Z+2, r26	; 0x02
    3d4a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3d4c:	fe 01       	movw	r30, r28
    3d4e:	e3 5b       	subi	r30, 0xB3	; 179
    3d50:	ff 4f       	sbci	r31, 0xFF	; 255
    3d52:	60 81       	ld	r22, Z
    3d54:	71 81       	ldd	r23, Z+1	; 0x01
    3d56:	82 81       	ldd	r24, Z+2	; 0x02
    3d58:	93 81       	ldd	r25, Z+3	; 0x03
    3d5a:	20 e0       	ldi	r18, 0x00	; 0
    3d5c:	30 e0       	ldi	r19, 0x00	; 0
    3d5e:	40 e8       	ldi	r20, 0x80	; 128
    3d60:	5f e3       	ldi	r21, 0x3F	; 63
    3d62:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3d66:	88 23       	and	r24, r24
    3d68:	44 f4       	brge	.+16     	; 0x3d7a <options+0x216>
		__ticks = 1;
    3d6a:	fe 01       	movw	r30, r28
    3d6c:	e5 5b       	subi	r30, 0xB5	; 181
    3d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d70:	81 e0       	ldi	r24, 0x01	; 1
    3d72:	90 e0       	ldi	r25, 0x00	; 0
    3d74:	91 83       	std	Z+1, r25	; 0x01
    3d76:	80 83       	st	Z, r24
    3d78:	64 c0       	rjmp	.+200    	; 0x3e42 <options+0x2de>
	else if (__tmp > 65535)
    3d7a:	fe 01       	movw	r30, r28
    3d7c:	e3 5b       	subi	r30, 0xB3	; 179
    3d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d80:	60 81       	ld	r22, Z
    3d82:	71 81       	ldd	r23, Z+1	; 0x01
    3d84:	82 81       	ldd	r24, Z+2	; 0x02
    3d86:	93 81       	ldd	r25, Z+3	; 0x03
    3d88:	20 e0       	ldi	r18, 0x00	; 0
    3d8a:	3f ef       	ldi	r19, 0xFF	; 255
    3d8c:	4f e7       	ldi	r20, 0x7F	; 127
    3d8e:	57 e4       	ldi	r21, 0x47	; 71
    3d90:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d94:	18 16       	cp	r1, r24
    3d96:	0c f0       	brlt	.+2      	; 0x3d9a <options+0x236>
    3d98:	43 c0       	rjmp	.+134    	; 0x3e20 <options+0x2bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d9a:	fe 01       	movw	r30, r28
    3d9c:	ef 5a       	subi	r30, 0xAF	; 175
    3d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3da0:	60 81       	ld	r22, Z
    3da2:	71 81       	ldd	r23, Z+1	; 0x01
    3da4:	82 81       	ldd	r24, Z+2	; 0x02
    3da6:	93 81       	ldd	r25, Z+3	; 0x03
    3da8:	20 e0       	ldi	r18, 0x00	; 0
    3daa:	30 e0       	ldi	r19, 0x00	; 0
    3dac:	40 e2       	ldi	r20, 0x20	; 32
    3dae:	51 e4       	ldi	r21, 0x41	; 65
    3db0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3db4:	dc 01       	movw	r26, r24
    3db6:	cb 01       	movw	r24, r22
    3db8:	8e 01       	movw	r16, r28
    3dba:	05 5b       	subi	r16, 0xB5	; 181
    3dbc:	1f 4f       	sbci	r17, 0xFF	; 255
    3dbe:	bc 01       	movw	r22, r24
    3dc0:	cd 01       	movw	r24, r26
    3dc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dc6:	dc 01       	movw	r26, r24
    3dc8:	cb 01       	movw	r24, r22
    3dca:	f8 01       	movw	r30, r16
    3dcc:	91 83       	std	Z+1, r25	; 0x01
    3dce:	80 83       	st	Z, r24
    3dd0:	1f c0       	rjmp	.+62     	; 0x3e10 <options+0x2ac>
    3dd2:	fe 01       	movw	r30, r28
    3dd4:	e7 5b       	subi	r30, 0xB7	; 183
    3dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd8:	88 ec       	ldi	r24, 0xC8	; 200
    3dda:	90 e0       	ldi	r25, 0x00	; 0
    3ddc:	91 83       	std	Z+1, r25	; 0x01
    3dde:	80 83       	st	Z, r24
    3de0:	fe 01       	movw	r30, r28
    3de2:	e7 5b       	subi	r30, 0xB7	; 183
    3de4:	ff 4f       	sbci	r31, 0xFF	; 255
    3de6:	80 81       	ld	r24, Z
    3de8:	91 81       	ldd	r25, Z+1	; 0x01
    3dea:	01 97       	sbiw	r24, 0x01	; 1
    3dec:	f1 f7       	brne	.-4      	; 0x3dea <options+0x286>
    3dee:	fe 01       	movw	r30, r28
    3df0:	e7 5b       	subi	r30, 0xB7	; 183
    3df2:	ff 4f       	sbci	r31, 0xFF	; 255
    3df4:	91 83       	std	Z+1, r25	; 0x01
    3df6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3df8:	de 01       	movw	r26, r28
    3dfa:	a5 5b       	subi	r26, 0xB5	; 181
    3dfc:	bf 4f       	sbci	r27, 0xFF	; 255
    3dfe:	fe 01       	movw	r30, r28
    3e00:	e5 5b       	subi	r30, 0xB5	; 181
    3e02:	ff 4f       	sbci	r31, 0xFF	; 255
    3e04:	80 81       	ld	r24, Z
    3e06:	91 81       	ldd	r25, Z+1	; 0x01
    3e08:	01 97       	sbiw	r24, 0x01	; 1
    3e0a:	11 96       	adiw	r26, 0x01	; 1
    3e0c:	9c 93       	st	X, r25
    3e0e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e10:	fe 01       	movw	r30, r28
    3e12:	e5 5b       	subi	r30, 0xB5	; 181
    3e14:	ff 4f       	sbci	r31, 0xFF	; 255
    3e16:	80 81       	ld	r24, Z
    3e18:	91 81       	ldd	r25, Z+1	; 0x01
    3e1a:	00 97       	sbiw	r24, 0x00	; 0
    3e1c:	d1 f6       	brne	.-76     	; 0x3dd2 <options+0x26e>
    3e1e:	27 c0       	rjmp	.+78     	; 0x3e6e <options+0x30a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e20:	8e 01       	movw	r16, r28
    3e22:	05 5b       	subi	r16, 0xB5	; 181
    3e24:	1f 4f       	sbci	r17, 0xFF	; 255
    3e26:	fe 01       	movw	r30, r28
    3e28:	e3 5b       	subi	r30, 0xB3	; 179
    3e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e2c:	60 81       	ld	r22, Z
    3e2e:	71 81       	ldd	r23, Z+1	; 0x01
    3e30:	82 81       	ldd	r24, Z+2	; 0x02
    3e32:	93 81       	ldd	r25, Z+3	; 0x03
    3e34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e38:	dc 01       	movw	r26, r24
    3e3a:	cb 01       	movw	r24, r22
    3e3c:	f8 01       	movw	r30, r16
    3e3e:	91 83       	std	Z+1, r25	; 0x01
    3e40:	80 83       	st	Z, r24
    3e42:	de 01       	movw	r26, r28
    3e44:	a9 5b       	subi	r26, 0xB9	; 185
    3e46:	bf 4f       	sbci	r27, 0xFF	; 255
    3e48:	fe 01       	movw	r30, r28
    3e4a:	e5 5b       	subi	r30, 0xB5	; 181
    3e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e4e:	80 81       	ld	r24, Z
    3e50:	91 81       	ldd	r25, Z+1	; 0x01
    3e52:	8d 93       	st	X+, r24
    3e54:	9c 93       	st	X, r25
    3e56:	fe 01       	movw	r30, r28
    3e58:	e9 5b       	subi	r30, 0xB9	; 185
    3e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e5c:	80 81       	ld	r24, Z
    3e5e:	91 81       	ldd	r25, Z+1	; 0x01
    3e60:	01 97       	sbiw	r24, 0x01	; 1
    3e62:	f1 f7       	brne	.-4      	; 0x3e60 <options+0x2fc>
    3e64:	fe 01       	movw	r30, r28
    3e66:	e9 5b       	subi	r30, 0xB9	; 185
    3e68:	ff 4f       	sbci	r31, 0xFF	; 255
    3e6a:	91 83       	std	Z+1, r25	; 0x01
    3e6c:	80 83       	st	Z, r24
	_delay_ms(100);
	LCD_WriteCommand(clear);
    3e6e:	81 e0       	ldi	r24, 0x01	; 1
    3e70:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <LCD_WriteCommand>
	switch (option)
    3e74:	fe 01       	movw	r30, r28
    3e76:	eb 59       	subi	r30, 0x9B	; 155
    3e78:	ff 4f       	sbci	r31, 0xFF	; 255
    3e7a:	80 81       	ld	r24, Z
    3e7c:	28 2f       	mov	r18, r24
    3e7e:	30 e0       	ldi	r19, 0x00	; 0
    3e80:	a8 96       	adiw	r28, 0x28	; 40
    3e82:	3f af       	std	Y+63, r19	; 0x3f
    3e84:	2e af       	std	Y+62, r18	; 0x3e
    3e86:	a8 97       	sbiw	r28, 0x28	; 40
    3e88:	a8 96       	adiw	r28, 0x28	; 40
    3e8a:	8e ad       	ldd	r24, Y+62	; 0x3e
    3e8c:	9f ad       	ldd	r25, Y+63	; 0x3f
    3e8e:	a8 97       	sbiw	r28, 0x28	; 40
    3e90:	82 30       	cpi	r24, 0x02	; 2
    3e92:	91 05       	cpc	r25, r1
    3e94:	29 f1       	breq	.+74     	; 0x3ee0 <options+0x37c>
    3e96:	a8 96       	adiw	r28, 0x28	; 40
    3e98:	ee ad       	ldd	r30, Y+62	; 0x3e
    3e9a:	ff ad       	ldd	r31, Y+63	; 0x3f
    3e9c:	a8 97       	sbiw	r28, 0x28	; 40
    3e9e:	e3 30       	cpi	r30, 0x03	; 3
    3ea0:	f1 05       	cpc	r31, r1
    3ea2:	44 f4       	brge	.+16     	; 0x3eb4 <options+0x350>
    3ea4:	a8 96       	adiw	r28, 0x28	; 40
    3ea6:	2e ad       	ldd	r18, Y+62	; 0x3e
    3ea8:	3f ad       	ldd	r19, Y+63	; 0x3f
    3eaa:	a8 97       	sbiw	r28, 0x28	; 40
    3eac:	21 30       	cpi	r18, 0x01	; 1
    3eae:	31 05       	cpc	r19, r1
    3eb0:	91 f0       	breq	.+36     	; 0x3ed6 <options+0x372>
    3eb2:	43 c2       	rjmp	.+1158   	; 0x433a <options+0x7d6>
    3eb4:	a8 96       	adiw	r28, 0x28	; 40
    3eb6:	8e ad       	ldd	r24, Y+62	; 0x3e
    3eb8:	9f ad       	ldd	r25, Y+63	; 0x3f
    3eba:	a8 97       	sbiw	r28, 0x28	; 40
    3ebc:	83 30       	cpi	r24, 0x03	; 3
    3ebe:	91 05       	cpc	r25, r1
    3ec0:	09 f4       	brne	.+2      	; 0x3ec4 <options+0x360>
    3ec2:	2d c1       	rjmp	.+602    	; 0x411e <options+0x5ba>
    3ec4:	a8 96       	adiw	r28, 0x28	; 40
    3ec6:	ee ad       	ldd	r30, Y+62	; 0x3e
    3ec8:	ff ad       	ldd	r31, Y+63	; 0x3f
    3eca:	a8 97       	sbiw	r28, 0x28	; 40
    3ecc:	e4 30       	cpi	r30, 0x04	; 4
    3ece:	f1 05       	cpc	r31, r1
    3ed0:	09 f4       	brne	.+2      	; 0x3ed4 <options+0x370>
    3ed2:	30 c2       	rjmp	.+1120   	; 0x4334 <options+0x7d0>
    3ed4:	32 c2       	rjmp	.+1124   	; 0x433a <options+0x7d6>
	{
	case Rooms :
	{
		roomOptions();
    3ed6:	0e 94 4e 23 	call	0x469c	; 0x469c <roomOptions>
		options();
    3eda:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <options>
    3ede:	a8 c2       	rjmp	.+1360   	; 0x4430 <options+0x8cc>
		break;
	}
	case Door :
	{
		LCD_WriteString("1-open  2-close");
    3ee0:	88 ed       	ldi	r24, 0xD8	; 216
    3ee2:	90 e0       	ldi	r25, 0x00	; 0
    3ee4:	0e 94 2c 14 	call	0x2858	; 0x2858 <LCD_WriteString>
		u8 option = getOption();
    3ee8:	0e 94 28 22 	call	0x4450	; 0x4450 <getOption>
    3eec:	fe 01       	movw	r30, r28
    3eee:	ec 59       	subi	r30, 0x9C	; 156
    3ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ef2:	80 83       	st	Z, r24


		if(option == on)
    3ef4:	fe 01       	movw	r30, r28
    3ef6:	ec 59       	subi	r30, 0x9C	; 156
    3ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    3efa:	80 81       	ld	r24, Z
    3efc:	81 30       	cpi	r24, 0x01	; 1
    3efe:	09 f0       	breq	.+2      	; 0x3f02 <options+0x39e>
    3f00:	8d c0       	rjmp	.+282    	; 0x401c <options+0x4b8>
		{
			openDoor();
    3f02:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <openDoor>
			LCD_WriteCommand(clear);
    3f06:	81 e0       	ldi	r24, 0x01	; 1
    3f08:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <LCD_WriteCommand>
    3f0c:	fe 01       	movw	r30, r28
    3f0e:	ed 5b       	subi	r30, 0xBD	; 189
    3f10:	ff 4f       	sbci	r31, 0xFF	; 255
    3f12:	80 e0       	ldi	r24, 0x00	; 0
    3f14:	90 e0       	ldi	r25, 0x00	; 0
    3f16:	a0 ea       	ldi	r26, 0xA0	; 160
    3f18:	b1 e4       	ldi	r27, 0x41	; 65
    3f1a:	80 83       	st	Z, r24
    3f1c:	91 83       	std	Z+1, r25	; 0x01
    3f1e:	a2 83       	std	Z+2, r26	; 0x02
    3f20:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f22:	8e 01       	movw	r16, r28
    3f24:	01 5c       	subi	r16, 0xC1	; 193
    3f26:	1f 4f       	sbci	r17, 0xFF	; 255
    3f28:	fe 01       	movw	r30, r28
    3f2a:	ed 5b       	subi	r30, 0xBD	; 189
    3f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f2e:	60 81       	ld	r22, Z
    3f30:	71 81       	ldd	r23, Z+1	; 0x01
    3f32:	82 81       	ldd	r24, Z+2	; 0x02
    3f34:	93 81       	ldd	r25, Z+3	; 0x03
    3f36:	20 e0       	ldi	r18, 0x00	; 0
    3f38:	30 e0       	ldi	r19, 0x00	; 0
    3f3a:	4a ef       	ldi	r20, 0xFA	; 250
    3f3c:	54 e4       	ldi	r21, 0x44	; 68
    3f3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f42:	dc 01       	movw	r26, r24
    3f44:	cb 01       	movw	r24, r22
    3f46:	f8 01       	movw	r30, r16
    3f48:	80 83       	st	Z, r24
    3f4a:	91 83       	std	Z+1, r25	; 0x01
    3f4c:	a2 83       	std	Z+2, r26	; 0x02
    3f4e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f50:	fe 01       	movw	r30, r28
    3f52:	ff 96       	adiw	r30, 0x3f	; 63
    3f54:	60 81       	ld	r22, Z
    3f56:	71 81       	ldd	r23, Z+1	; 0x01
    3f58:	82 81       	ldd	r24, Z+2	; 0x02
    3f5a:	93 81       	ldd	r25, Z+3	; 0x03
    3f5c:	20 e0       	ldi	r18, 0x00	; 0
    3f5e:	30 e0       	ldi	r19, 0x00	; 0
    3f60:	40 e8       	ldi	r20, 0x80	; 128
    3f62:	5f e3       	ldi	r21, 0x3F	; 63
    3f64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3f68:	88 23       	and	r24, r24
    3f6a:	2c f4       	brge	.+10     	; 0x3f76 <options+0x412>
		__ticks = 1;
    3f6c:	81 e0       	ldi	r24, 0x01	; 1
    3f6e:	90 e0       	ldi	r25, 0x00	; 0
    3f70:	9e af       	std	Y+62, r25	; 0x3e
    3f72:	8d af       	std	Y+61, r24	; 0x3d
    3f74:	46 c0       	rjmp	.+140    	; 0x4002 <options+0x49e>
	else if (__tmp > 65535)
    3f76:	fe 01       	movw	r30, r28
    3f78:	ff 96       	adiw	r30, 0x3f	; 63
    3f7a:	60 81       	ld	r22, Z
    3f7c:	71 81       	ldd	r23, Z+1	; 0x01
    3f7e:	82 81       	ldd	r24, Z+2	; 0x02
    3f80:	93 81       	ldd	r25, Z+3	; 0x03
    3f82:	20 e0       	ldi	r18, 0x00	; 0
    3f84:	3f ef       	ldi	r19, 0xFF	; 255
    3f86:	4f e7       	ldi	r20, 0x7F	; 127
    3f88:	57 e4       	ldi	r21, 0x47	; 71
    3f8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3f8e:	18 16       	cp	r1, r24
    3f90:	64 f5       	brge	.+88     	; 0x3fea <options+0x486>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f92:	fe 01       	movw	r30, r28
    3f94:	ed 5b       	subi	r30, 0xBD	; 189
    3f96:	ff 4f       	sbci	r31, 0xFF	; 255
    3f98:	60 81       	ld	r22, Z
    3f9a:	71 81       	ldd	r23, Z+1	; 0x01
    3f9c:	82 81       	ldd	r24, Z+2	; 0x02
    3f9e:	93 81       	ldd	r25, Z+3	; 0x03
    3fa0:	20 e0       	ldi	r18, 0x00	; 0
    3fa2:	30 e0       	ldi	r19, 0x00	; 0
    3fa4:	40 e2       	ldi	r20, 0x20	; 32
    3fa6:	51 e4       	ldi	r21, 0x41	; 65
    3fa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fac:	dc 01       	movw	r26, r24
    3fae:	cb 01       	movw	r24, r22
    3fb0:	bc 01       	movw	r22, r24
    3fb2:	cd 01       	movw	r24, r26
    3fb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fb8:	dc 01       	movw	r26, r24
    3fba:	cb 01       	movw	r24, r22
    3fbc:	9e af       	std	Y+62, r25	; 0x3e
    3fbe:	8d af       	std	Y+61, r24	; 0x3d
    3fc0:	0f c0       	rjmp	.+30     	; 0x3fe0 <options+0x47c>
    3fc2:	88 ec       	ldi	r24, 0xC8	; 200
    3fc4:	90 e0       	ldi	r25, 0x00	; 0
    3fc6:	9c af       	std	Y+60, r25	; 0x3c
    3fc8:	8b af       	std	Y+59, r24	; 0x3b
    3fca:	8b ad       	ldd	r24, Y+59	; 0x3b
    3fcc:	9c ad       	ldd	r25, Y+60	; 0x3c
    3fce:	01 97       	sbiw	r24, 0x01	; 1
    3fd0:	f1 f7       	brne	.-4      	; 0x3fce <options+0x46a>
    3fd2:	9c af       	std	Y+60, r25	; 0x3c
    3fd4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fd6:	8d ad       	ldd	r24, Y+61	; 0x3d
    3fd8:	9e ad       	ldd	r25, Y+62	; 0x3e
    3fda:	01 97       	sbiw	r24, 0x01	; 1
    3fdc:	9e af       	std	Y+62, r25	; 0x3e
    3fde:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fe0:	8d ad       	ldd	r24, Y+61	; 0x3d
    3fe2:	9e ad       	ldd	r25, Y+62	; 0x3e
    3fe4:	00 97       	sbiw	r24, 0x00	; 0
    3fe6:	69 f7       	brne	.-38     	; 0x3fc2 <options+0x45e>
    3fe8:	16 c0       	rjmp	.+44     	; 0x4016 <options+0x4b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fea:	fe 01       	movw	r30, r28
    3fec:	ff 96       	adiw	r30, 0x3f	; 63
    3fee:	60 81       	ld	r22, Z
    3ff0:	71 81       	ldd	r23, Z+1	; 0x01
    3ff2:	82 81       	ldd	r24, Z+2	; 0x02
    3ff4:	93 81       	ldd	r25, Z+3	; 0x03
    3ff6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ffa:	dc 01       	movw	r26, r24
    3ffc:	cb 01       	movw	r24, r22
    3ffe:	9e af       	std	Y+62, r25	; 0x3e
    4000:	8d af       	std	Y+61, r24	; 0x3d
    4002:	8d ad       	ldd	r24, Y+61	; 0x3d
    4004:	9e ad       	ldd	r25, Y+62	; 0x3e
    4006:	9a af       	std	Y+58, r25	; 0x3a
    4008:	89 af       	std	Y+57, r24	; 0x39
    400a:	89 ad       	ldd	r24, Y+57	; 0x39
    400c:	9a ad       	ldd	r25, Y+58	; 0x3a
    400e:	01 97       	sbiw	r24, 0x01	; 1
    4010:	f1 f7       	brne	.-4      	; 0x400e <options+0x4aa>
    4012:	9a af       	std	Y+58, r25	; 0x3a
    4014:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(20);
			options();
    4016:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <options>
    401a:	0a c2       	rjmp	.+1044   	; 0x4430 <options+0x8cc>
		}
		else if(option == off)
    401c:	fe 01       	movw	r30, r28
    401e:	ec 59       	subi	r30, 0x9C	; 156
    4020:	ff 4f       	sbci	r31, 0xFF	; 255
    4022:	80 81       	ld	r24, Z
    4024:	82 30       	cpi	r24, 0x02	; 2
    4026:	09 f0       	breq	.+2      	; 0x402a <options+0x4c6>
    4028:	03 c2       	rjmp	.+1030   	; 0x4430 <options+0x8cc>
		{
			closeDoor();
    402a:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <closeDoor>
			LCD_WriteCommand(clear);
    402e:	81 e0       	ldi	r24, 0x01	; 1
    4030:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <LCD_WriteCommand>
    4034:	80 e0       	ldi	r24, 0x00	; 0
    4036:	90 e0       	ldi	r25, 0x00	; 0
    4038:	a0 ea       	ldi	r26, 0xA0	; 160
    403a:	b1 e4       	ldi	r27, 0x41	; 65
    403c:	8d ab       	std	Y+53, r24	; 0x35
    403e:	9e ab       	std	Y+54, r25	; 0x36
    4040:	af ab       	std	Y+55, r26	; 0x37
    4042:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4044:	6d a9       	ldd	r22, Y+53	; 0x35
    4046:	7e a9       	ldd	r23, Y+54	; 0x36
    4048:	8f a9       	ldd	r24, Y+55	; 0x37
    404a:	98 ad       	ldd	r25, Y+56	; 0x38
    404c:	20 e0       	ldi	r18, 0x00	; 0
    404e:	30 e0       	ldi	r19, 0x00	; 0
    4050:	4a ef       	ldi	r20, 0xFA	; 250
    4052:	54 e4       	ldi	r21, 0x44	; 68
    4054:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4058:	dc 01       	movw	r26, r24
    405a:	cb 01       	movw	r24, r22
    405c:	89 ab       	std	Y+49, r24	; 0x31
    405e:	9a ab       	std	Y+50, r25	; 0x32
    4060:	ab ab       	std	Y+51, r26	; 0x33
    4062:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4064:	69 a9       	ldd	r22, Y+49	; 0x31
    4066:	7a a9       	ldd	r23, Y+50	; 0x32
    4068:	8b a9       	ldd	r24, Y+51	; 0x33
    406a:	9c a9       	ldd	r25, Y+52	; 0x34
    406c:	20 e0       	ldi	r18, 0x00	; 0
    406e:	30 e0       	ldi	r19, 0x00	; 0
    4070:	40 e8       	ldi	r20, 0x80	; 128
    4072:	5f e3       	ldi	r21, 0x3F	; 63
    4074:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4078:	88 23       	and	r24, r24
    407a:	2c f4       	brge	.+10     	; 0x4086 <options+0x522>
		__ticks = 1;
    407c:	81 e0       	ldi	r24, 0x01	; 1
    407e:	90 e0       	ldi	r25, 0x00	; 0
    4080:	98 ab       	std	Y+48, r25	; 0x30
    4082:	8f a7       	std	Y+47, r24	; 0x2f
    4084:	3f c0       	rjmp	.+126    	; 0x4104 <options+0x5a0>
	else if (__tmp > 65535)
    4086:	69 a9       	ldd	r22, Y+49	; 0x31
    4088:	7a a9       	ldd	r23, Y+50	; 0x32
    408a:	8b a9       	ldd	r24, Y+51	; 0x33
    408c:	9c a9       	ldd	r25, Y+52	; 0x34
    408e:	20 e0       	ldi	r18, 0x00	; 0
    4090:	3f ef       	ldi	r19, 0xFF	; 255
    4092:	4f e7       	ldi	r20, 0x7F	; 127
    4094:	57 e4       	ldi	r21, 0x47	; 71
    4096:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    409a:	18 16       	cp	r1, r24
    409c:	4c f5       	brge	.+82     	; 0x40f0 <options+0x58c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    409e:	6d a9       	ldd	r22, Y+53	; 0x35
    40a0:	7e a9       	ldd	r23, Y+54	; 0x36
    40a2:	8f a9       	ldd	r24, Y+55	; 0x37
    40a4:	98 ad       	ldd	r25, Y+56	; 0x38
    40a6:	20 e0       	ldi	r18, 0x00	; 0
    40a8:	30 e0       	ldi	r19, 0x00	; 0
    40aa:	40 e2       	ldi	r20, 0x20	; 32
    40ac:	51 e4       	ldi	r21, 0x41	; 65
    40ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40b2:	dc 01       	movw	r26, r24
    40b4:	cb 01       	movw	r24, r22
    40b6:	bc 01       	movw	r22, r24
    40b8:	cd 01       	movw	r24, r26
    40ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40be:	dc 01       	movw	r26, r24
    40c0:	cb 01       	movw	r24, r22
    40c2:	98 ab       	std	Y+48, r25	; 0x30
    40c4:	8f a7       	std	Y+47, r24	; 0x2f
    40c6:	0f c0       	rjmp	.+30     	; 0x40e6 <options+0x582>
    40c8:	88 ec       	ldi	r24, 0xC8	; 200
    40ca:	90 e0       	ldi	r25, 0x00	; 0
    40cc:	9e a7       	std	Y+46, r25	; 0x2e
    40ce:	8d a7       	std	Y+45, r24	; 0x2d
    40d0:	8d a5       	ldd	r24, Y+45	; 0x2d
    40d2:	9e a5       	ldd	r25, Y+46	; 0x2e
    40d4:	01 97       	sbiw	r24, 0x01	; 1
    40d6:	f1 f7       	brne	.-4      	; 0x40d4 <options+0x570>
    40d8:	9e a7       	std	Y+46, r25	; 0x2e
    40da:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    40de:	98 a9       	ldd	r25, Y+48	; 0x30
    40e0:	01 97       	sbiw	r24, 0x01	; 1
    40e2:	98 ab       	std	Y+48, r25	; 0x30
    40e4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    40e8:	98 a9       	ldd	r25, Y+48	; 0x30
    40ea:	00 97       	sbiw	r24, 0x00	; 0
    40ec:	69 f7       	brne	.-38     	; 0x40c8 <options+0x564>
    40ee:	14 c0       	rjmp	.+40     	; 0x4118 <options+0x5b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40f0:	69 a9       	ldd	r22, Y+49	; 0x31
    40f2:	7a a9       	ldd	r23, Y+50	; 0x32
    40f4:	8b a9       	ldd	r24, Y+51	; 0x33
    40f6:	9c a9       	ldd	r25, Y+52	; 0x34
    40f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40fc:	dc 01       	movw	r26, r24
    40fe:	cb 01       	movw	r24, r22
    4100:	98 ab       	std	Y+48, r25	; 0x30
    4102:	8f a7       	std	Y+47, r24	; 0x2f
    4104:	8f a5       	ldd	r24, Y+47	; 0x2f
    4106:	98 a9       	ldd	r25, Y+48	; 0x30
    4108:	9c a7       	std	Y+44, r25	; 0x2c
    410a:	8b a7       	std	Y+43, r24	; 0x2b
    410c:	8b a5       	ldd	r24, Y+43	; 0x2b
    410e:	9c a5       	ldd	r25, Y+44	; 0x2c
    4110:	01 97       	sbiw	r24, 0x01	; 1
    4112:	f1 f7       	brne	.-4      	; 0x4110 <options+0x5ac>
    4114:	9c a7       	std	Y+44, r25	; 0x2c
    4116:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(20);
			options();
    4118:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <options>
    411c:	89 c1       	rjmp	.+786    	; 0x4430 <options+0x8cc>
		}
		break;
	}
	case Air :
	{
		LCD_WriteString("1-open  2-close");
    411e:	88 ed       	ldi	r24, 0xD8	; 216
    4120:	90 e0       	ldi	r25, 0x00	; 0
    4122:	0e 94 2c 14 	call	0x2858	; 0x2858 <LCD_WriteString>
		u8 option = getOption();
    4126:	0e 94 28 22 	call	0x4450	; 0x4450 <getOption>
    412a:	fe 01       	movw	r30, r28
    412c:	ed 59       	subi	r30, 0x9D	; 157
    412e:	ff 4f       	sbci	r31, 0xFF	; 255
    4130:	80 83       	st	Z, r24


		if(option == on)
    4132:	fe 01       	movw	r30, r28
    4134:	ed 59       	subi	r30, 0x9D	; 157
    4136:	ff 4f       	sbci	r31, 0xFF	; 255
    4138:	80 81       	ld	r24, Z
    413a:	81 30       	cpi	r24, 0x01	; 1
    413c:	09 f0       	breq	.+2      	; 0x4140 <options+0x5dc>
    413e:	7a c0       	rjmp	.+244    	; 0x4234 <options+0x6d0>
		{
			openFan();
    4140:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <openFan>
			LCD_WriteCommand(clear);
    4144:	81 e0       	ldi	r24, 0x01	; 1
    4146:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <LCD_WriteCommand>
    414a:	80 e0       	ldi	r24, 0x00	; 0
    414c:	90 e0       	ldi	r25, 0x00	; 0
    414e:	a0 ea       	ldi	r26, 0xA0	; 160
    4150:	b1 e4       	ldi	r27, 0x41	; 65
    4152:	8f a3       	std	Y+39, r24	; 0x27
    4154:	98 a7       	std	Y+40, r25	; 0x28
    4156:	a9 a7       	std	Y+41, r26	; 0x29
    4158:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    415a:	6f a1       	ldd	r22, Y+39	; 0x27
    415c:	78 a5       	ldd	r23, Y+40	; 0x28
    415e:	89 a5       	ldd	r24, Y+41	; 0x29
    4160:	9a a5       	ldd	r25, Y+42	; 0x2a
    4162:	20 e0       	ldi	r18, 0x00	; 0
    4164:	30 e0       	ldi	r19, 0x00	; 0
    4166:	4a ef       	ldi	r20, 0xFA	; 250
    4168:	54 e4       	ldi	r21, 0x44	; 68
    416a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    416e:	dc 01       	movw	r26, r24
    4170:	cb 01       	movw	r24, r22
    4172:	8b a3       	std	Y+35, r24	; 0x23
    4174:	9c a3       	std	Y+36, r25	; 0x24
    4176:	ad a3       	std	Y+37, r26	; 0x25
    4178:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    417a:	6b a1       	ldd	r22, Y+35	; 0x23
    417c:	7c a1       	ldd	r23, Y+36	; 0x24
    417e:	8d a1       	ldd	r24, Y+37	; 0x25
    4180:	9e a1       	ldd	r25, Y+38	; 0x26
    4182:	20 e0       	ldi	r18, 0x00	; 0
    4184:	30 e0       	ldi	r19, 0x00	; 0
    4186:	40 e8       	ldi	r20, 0x80	; 128
    4188:	5f e3       	ldi	r21, 0x3F	; 63
    418a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    418e:	88 23       	and	r24, r24
    4190:	2c f4       	brge	.+10     	; 0x419c <options+0x638>
		__ticks = 1;
    4192:	81 e0       	ldi	r24, 0x01	; 1
    4194:	90 e0       	ldi	r25, 0x00	; 0
    4196:	9a a3       	std	Y+34, r25	; 0x22
    4198:	89 a3       	std	Y+33, r24	; 0x21
    419a:	3f c0       	rjmp	.+126    	; 0x421a <options+0x6b6>
	else if (__tmp > 65535)
    419c:	6b a1       	ldd	r22, Y+35	; 0x23
    419e:	7c a1       	ldd	r23, Y+36	; 0x24
    41a0:	8d a1       	ldd	r24, Y+37	; 0x25
    41a2:	9e a1       	ldd	r25, Y+38	; 0x26
    41a4:	20 e0       	ldi	r18, 0x00	; 0
    41a6:	3f ef       	ldi	r19, 0xFF	; 255
    41a8:	4f e7       	ldi	r20, 0x7F	; 127
    41aa:	57 e4       	ldi	r21, 0x47	; 71
    41ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    41b0:	18 16       	cp	r1, r24
    41b2:	4c f5       	brge	.+82     	; 0x4206 <options+0x6a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41b4:	6f a1       	ldd	r22, Y+39	; 0x27
    41b6:	78 a5       	ldd	r23, Y+40	; 0x28
    41b8:	89 a5       	ldd	r24, Y+41	; 0x29
    41ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    41bc:	20 e0       	ldi	r18, 0x00	; 0
    41be:	30 e0       	ldi	r19, 0x00	; 0
    41c0:	40 e2       	ldi	r20, 0x20	; 32
    41c2:	51 e4       	ldi	r21, 0x41	; 65
    41c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41c8:	dc 01       	movw	r26, r24
    41ca:	cb 01       	movw	r24, r22
    41cc:	bc 01       	movw	r22, r24
    41ce:	cd 01       	movw	r24, r26
    41d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41d4:	dc 01       	movw	r26, r24
    41d6:	cb 01       	movw	r24, r22
    41d8:	9a a3       	std	Y+34, r25	; 0x22
    41da:	89 a3       	std	Y+33, r24	; 0x21
    41dc:	0f c0       	rjmp	.+30     	; 0x41fc <options+0x698>
    41de:	88 ec       	ldi	r24, 0xC8	; 200
    41e0:	90 e0       	ldi	r25, 0x00	; 0
    41e2:	98 a3       	std	Y+32, r25	; 0x20
    41e4:	8f 8f       	std	Y+31, r24	; 0x1f
    41e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    41e8:	98 a1       	ldd	r25, Y+32	; 0x20
    41ea:	01 97       	sbiw	r24, 0x01	; 1
    41ec:	f1 f7       	brne	.-4      	; 0x41ea <options+0x686>
    41ee:	98 a3       	std	Y+32, r25	; 0x20
    41f0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41f2:	89 a1       	ldd	r24, Y+33	; 0x21
    41f4:	9a a1       	ldd	r25, Y+34	; 0x22
    41f6:	01 97       	sbiw	r24, 0x01	; 1
    41f8:	9a a3       	std	Y+34, r25	; 0x22
    41fa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41fc:	89 a1       	ldd	r24, Y+33	; 0x21
    41fe:	9a a1       	ldd	r25, Y+34	; 0x22
    4200:	00 97       	sbiw	r24, 0x00	; 0
    4202:	69 f7       	brne	.-38     	; 0x41de <options+0x67a>
    4204:	14 c0       	rjmp	.+40     	; 0x422e <options+0x6ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4206:	6b a1       	ldd	r22, Y+35	; 0x23
    4208:	7c a1       	ldd	r23, Y+36	; 0x24
    420a:	8d a1       	ldd	r24, Y+37	; 0x25
    420c:	9e a1       	ldd	r25, Y+38	; 0x26
    420e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4212:	dc 01       	movw	r26, r24
    4214:	cb 01       	movw	r24, r22
    4216:	9a a3       	std	Y+34, r25	; 0x22
    4218:	89 a3       	std	Y+33, r24	; 0x21
    421a:	89 a1       	ldd	r24, Y+33	; 0x21
    421c:	9a a1       	ldd	r25, Y+34	; 0x22
    421e:	9e 8f       	std	Y+30, r25	; 0x1e
    4220:	8d 8f       	std	Y+29, r24	; 0x1d
    4222:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4224:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4226:	01 97       	sbiw	r24, 0x01	; 1
    4228:	f1 f7       	brne	.-4      	; 0x4226 <options+0x6c2>
    422a:	9e 8f       	std	Y+30, r25	; 0x1e
    422c:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(20);
			options();
    422e:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <options>
    4232:	80 c0       	rjmp	.+256    	; 0x4334 <options+0x7d0>
		}
		else if(option == off)
    4234:	fe 01       	movw	r30, r28
    4236:	ed 59       	subi	r30, 0x9D	; 157
    4238:	ff 4f       	sbci	r31, 0xFF	; 255
    423a:	80 81       	ld	r24, Z
    423c:	82 30       	cpi	r24, 0x02	; 2
    423e:	09 f0       	breq	.+2      	; 0x4242 <options+0x6de>
    4240:	79 c0       	rjmp	.+242    	; 0x4334 <options+0x7d0>
		{
			closeFan();
    4242:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <closeFan>
			LCD_WriteCommand(clear);
    4246:	81 e0       	ldi	r24, 0x01	; 1
    4248:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <LCD_WriteCommand>
    424c:	80 e0       	ldi	r24, 0x00	; 0
    424e:	90 e0       	ldi	r25, 0x00	; 0
    4250:	a0 ea       	ldi	r26, 0xA0	; 160
    4252:	b1 e4       	ldi	r27, 0x41	; 65
    4254:	89 8f       	std	Y+25, r24	; 0x19
    4256:	9a 8f       	std	Y+26, r25	; 0x1a
    4258:	ab 8f       	std	Y+27, r26	; 0x1b
    425a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    425c:	69 8d       	ldd	r22, Y+25	; 0x19
    425e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4260:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4262:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4264:	20 e0       	ldi	r18, 0x00	; 0
    4266:	30 e0       	ldi	r19, 0x00	; 0
    4268:	4a ef       	ldi	r20, 0xFA	; 250
    426a:	54 e4       	ldi	r21, 0x44	; 68
    426c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4270:	dc 01       	movw	r26, r24
    4272:	cb 01       	movw	r24, r22
    4274:	8d 8b       	std	Y+21, r24	; 0x15
    4276:	9e 8b       	std	Y+22, r25	; 0x16
    4278:	af 8b       	std	Y+23, r26	; 0x17
    427a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    427c:	6d 89       	ldd	r22, Y+21	; 0x15
    427e:	7e 89       	ldd	r23, Y+22	; 0x16
    4280:	8f 89       	ldd	r24, Y+23	; 0x17
    4282:	98 8d       	ldd	r25, Y+24	; 0x18
    4284:	20 e0       	ldi	r18, 0x00	; 0
    4286:	30 e0       	ldi	r19, 0x00	; 0
    4288:	40 e8       	ldi	r20, 0x80	; 128
    428a:	5f e3       	ldi	r21, 0x3F	; 63
    428c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4290:	88 23       	and	r24, r24
    4292:	2c f4       	brge	.+10     	; 0x429e <options+0x73a>
		__ticks = 1;
    4294:	81 e0       	ldi	r24, 0x01	; 1
    4296:	90 e0       	ldi	r25, 0x00	; 0
    4298:	9c 8b       	std	Y+20, r25	; 0x14
    429a:	8b 8b       	std	Y+19, r24	; 0x13
    429c:	3f c0       	rjmp	.+126    	; 0x431c <options+0x7b8>
	else if (__tmp > 65535)
    429e:	6d 89       	ldd	r22, Y+21	; 0x15
    42a0:	7e 89       	ldd	r23, Y+22	; 0x16
    42a2:	8f 89       	ldd	r24, Y+23	; 0x17
    42a4:	98 8d       	ldd	r25, Y+24	; 0x18
    42a6:	20 e0       	ldi	r18, 0x00	; 0
    42a8:	3f ef       	ldi	r19, 0xFF	; 255
    42aa:	4f e7       	ldi	r20, 0x7F	; 127
    42ac:	57 e4       	ldi	r21, 0x47	; 71
    42ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    42b2:	18 16       	cp	r1, r24
    42b4:	4c f5       	brge	.+82     	; 0x4308 <options+0x7a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42b6:	69 8d       	ldd	r22, Y+25	; 0x19
    42b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    42ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    42bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    42be:	20 e0       	ldi	r18, 0x00	; 0
    42c0:	30 e0       	ldi	r19, 0x00	; 0
    42c2:	40 e2       	ldi	r20, 0x20	; 32
    42c4:	51 e4       	ldi	r21, 0x41	; 65
    42c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42ca:	dc 01       	movw	r26, r24
    42cc:	cb 01       	movw	r24, r22
    42ce:	bc 01       	movw	r22, r24
    42d0:	cd 01       	movw	r24, r26
    42d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42d6:	dc 01       	movw	r26, r24
    42d8:	cb 01       	movw	r24, r22
    42da:	9c 8b       	std	Y+20, r25	; 0x14
    42dc:	8b 8b       	std	Y+19, r24	; 0x13
    42de:	0f c0       	rjmp	.+30     	; 0x42fe <options+0x79a>
    42e0:	88 ec       	ldi	r24, 0xC8	; 200
    42e2:	90 e0       	ldi	r25, 0x00	; 0
    42e4:	9a 8b       	std	Y+18, r25	; 0x12
    42e6:	89 8b       	std	Y+17, r24	; 0x11
    42e8:	89 89       	ldd	r24, Y+17	; 0x11
    42ea:	9a 89       	ldd	r25, Y+18	; 0x12
    42ec:	01 97       	sbiw	r24, 0x01	; 1
    42ee:	f1 f7       	brne	.-4      	; 0x42ec <options+0x788>
    42f0:	9a 8b       	std	Y+18, r25	; 0x12
    42f2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42f4:	8b 89       	ldd	r24, Y+19	; 0x13
    42f6:	9c 89       	ldd	r25, Y+20	; 0x14
    42f8:	01 97       	sbiw	r24, 0x01	; 1
    42fa:	9c 8b       	std	Y+20, r25	; 0x14
    42fc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42fe:	8b 89       	ldd	r24, Y+19	; 0x13
    4300:	9c 89       	ldd	r25, Y+20	; 0x14
    4302:	00 97       	sbiw	r24, 0x00	; 0
    4304:	69 f7       	brne	.-38     	; 0x42e0 <options+0x77c>
    4306:	14 c0       	rjmp	.+40     	; 0x4330 <options+0x7cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4308:	6d 89       	ldd	r22, Y+21	; 0x15
    430a:	7e 89       	ldd	r23, Y+22	; 0x16
    430c:	8f 89       	ldd	r24, Y+23	; 0x17
    430e:	98 8d       	ldd	r25, Y+24	; 0x18
    4310:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4314:	dc 01       	movw	r26, r24
    4316:	cb 01       	movw	r24, r22
    4318:	9c 8b       	std	Y+20, r25	; 0x14
    431a:	8b 8b       	std	Y+19, r24	; 0x13
    431c:	8b 89       	ldd	r24, Y+19	; 0x13
    431e:	9c 89       	ldd	r25, Y+20	; 0x14
    4320:	98 8b       	std	Y+16, r25	; 0x10
    4322:	8f 87       	std	Y+15, r24	; 0x0f
    4324:	8f 85       	ldd	r24, Y+15	; 0x0f
    4326:	98 89       	ldd	r25, Y+16	; 0x10
    4328:	01 97       	sbiw	r24, 0x01	; 1
    432a:	f1 f7       	brne	.-4      	; 0x4328 <options+0x7c4>
    432c:	98 8b       	std	Y+16, r25	; 0x10
    432e:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(20);
			options();
    4330:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <options>
		}
	}

	case  Back :
	{
		Login();
    4334:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <Login>
    4338:	7b c0       	rjmp	.+246    	; 0x4430 <options+0x8cc>
		break ;
	}
	default:
	{
		LCD_WriteString(" Wrong Option");
    433a:	88 ee       	ldi	r24, 0xE8	; 232
    433c:	90 e0       	ldi	r25, 0x00	; 0
    433e:	0e 94 2c 14 	call	0x2858	; 0x2858 <LCD_WriteString>
    4342:	80 e0       	ldi	r24, 0x00	; 0
    4344:	90 e0       	ldi	r25, 0x00	; 0
    4346:	af e2       	ldi	r26, 0x2F	; 47
    4348:	b4 e4       	ldi	r27, 0x44	; 68
    434a:	8b 87       	std	Y+11, r24	; 0x0b
    434c:	9c 87       	std	Y+12, r25	; 0x0c
    434e:	ad 87       	std	Y+13, r26	; 0x0d
    4350:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4352:	6b 85       	ldd	r22, Y+11	; 0x0b
    4354:	7c 85       	ldd	r23, Y+12	; 0x0c
    4356:	8d 85       	ldd	r24, Y+13	; 0x0d
    4358:	9e 85       	ldd	r25, Y+14	; 0x0e
    435a:	20 e0       	ldi	r18, 0x00	; 0
    435c:	30 e0       	ldi	r19, 0x00	; 0
    435e:	4a ef       	ldi	r20, 0xFA	; 250
    4360:	54 e4       	ldi	r21, 0x44	; 68
    4362:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4366:	dc 01       	movw	r26, r24
    4368:	cb 01       	movw	r24, r22
    436a:	8f 83       	std	Y+7, r24	; 0x07
    436c:	98 87       	std	Y+8, r25	; 0x08
    436e:	a9 87       	std	Y+9, r26	; 0x09
    4370:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4372:	6f 81       	ldd	r22, Y+7	; 0x07
    4374:	78 85       	ldd	r23, Y+8	; 0x08
    4376:	89 85       	ldd	r24, Y+9	; 0x09
    4378:	9a 85       	ldd	r25, Y+10	; 0x0a
    437a:	20 e0       	ldi	r18, 0x00	; 0
    437c:	30 e0       	ldi	r19, 0x00	; 0
    437e:	40 e8       	ldi	r20, 0x80	; 128
    4380:	5f e3       	ldi	r21, 0x3F	; 63
    4382:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4386:	88 23       	and	r24, r24
    4388:	2c f4       	brge	.+10     	; 0x4394 <options+0x830>
		__ticks = 1;
    438a:	81 e0       	ldi	r24, 0x01	; 1
    438c:	90 e0       	ldi	r25, 0x00	; 0
    438e:	9e 83       	std	Y+6, r25	; 0x06
    4390:	8d 83       	std	Y+5, r24	; 0x05
    4392:	3f c0       	rjmp	.+126    	; 0x4412 <options+0x8ae>
	else if (__tmp > 65535)
    4394:	6f 81       	ldd	r22, Y+7	; 0x07
    4396:	78 85       	ldd	r23, Y+8	; 0x08
    4398:	89 85       	ldd	r24, Y+9	; 0x09
    439a:	9a 85       	ldd	r25, Y+10	; 0x0a
    439c:	20 e0       	ldi	r18, 0x00	; 0
    439e:	3f ef       	ldi	r19, 0xFF	; 255
    43a0:	4f e7       	ldi	r20, 0x7F	; 127
    43a2:	57 e4       	ldi	r21, 0x47	; 71
    43a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    43a8:	18 16       	cp	r1, r24
    43aa:	4c f5       	brge	.+82     	; 0x43fe <options+0x89a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    43ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    43b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    43b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    43b4:	20 e0       	ldi	r18, 0x00	; 0
    43b6:	30 e0       	ldi	r19, 0x00	; 0
    43b8:	40 e2       	ldi	r20, 0x20	; 32
    43ba:	51 e4       	ldi	r21, 0x41	; 65
    43bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43c0:	dc 01       	movw	r26, r24
    43c2:	cb 01       	movw	r24, r22
    43c4:	bc 01       	movw	r22, r24
    43c6:	cd 01       	movw	r24, r26
    43c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43cc:	dc 01       	movw	r26, r24
    43ce:	cb 01       	movw	r24, r22
    43d0:	9e 83       	std	Y+6, r25	; 0x06
    43d2:	8d 83       	std	Y+5, r24	; 0x05
    43d4:	0f c0       	rjmp	.+30     	; 0x43f4 <options+0x890>
    43d6:	88 ec       	ldi	r24, 0xC8	; 200
    43d8:	90 e0       	ldi	r25, 0x00	; 0
    43da:	9c 83       	std	Y+4, r25	; 0x04
    43dc:	8b 83       	std	Y+3, r24	; 0x03
    43de:	8b 81       	ldd	r24, Y+3	; 0x03
    43e0:	9c 81       	ldd	r25, Y+4	; 0x04
    43e2:	01 97       	sbiw	r24, 0x01	; 1
    43e4:	f1 f7       	brne	.-4      	; 0x43e2 <options+0x87e>
    43e6:	9c 83       	std	Y+4, r25	; 0x04
    43e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43ea:	8d 81       	ldd	r24, Y+5	; 0x05
    43ec:	9e 81       	ldd	r25, Y+6	; 0x06
    43ee:	01 97       	sbiw	r24, 0x01	; 1
    43f0:	9e 83       	std	Y+6, r25	; 0x06
    43f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43f4:	8d 81       	ldd	r24, Y+5	; 0x05
    43f6:	9e 81       	ldd	r25, Y+6	; 0x06
    43f8:	00 97       	sbiw	r24, 0x00	; 0
    43fa:	69 f7       	brne	.-38     	; 0x43d6 <options+0x872>
    43fc:	14 c0       	rjmp	.+40     	; 0x4426 <options+0x8c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43fe:	6f 81       	ldd	r22, Y+7	; 0x07
    4400:	78 85       	ldd	r23, Y+8	; 0x08
    4402:	89 85       	ldd	r24, Y+9	; 0x09
    4404:	9a 85       	ldd	r25, Y+10	; 0x0a
    4406:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    440a:	dc 01       	movw	r26, r24
    440c:	cb 01       	movw	r24, r22
    440e:	9e 83       	std	Y+6, r25	; 0x06
    4410:	8d 83       	std	Y+5, r24	; 0x05
    4412:	8d 81       	ldd	r24, Y+5	; 0x05
    4414:	9e 81       	ldd	r25, Y+6	; 0x06
    4416:	9a 83       	std	Y+2, r25	; 0x02
    4418:	89 83       	std	Y+1, r24	; 0x01
    441a:	89 81       	ldd	r24, Y+1	; 0x01
    441c:	9a 81       	ldd	r25, Y+2	; 0x02
    441e:	01 97       	sbiw	r24, 0x01	; 1
    4420:	f1 f7       	brne	.-4      	; 0x441e <options+0x8ba>
    4422:	9a 83       	std	Y+2, r25	; 0x02
    4424:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(700);
		LCD_WriteCommand(clear);
    4426:	81 e0       	ldi	r24, 0x01	; 1
    4428:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <LCD_WriteCommand>
		options();
    442c:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <options>
	}
	}
	LCD_GoToXY(0, 0);
    4430:	80 e0       	ldi	r24, 0x00	; 0
    4432:	60 e0       	ldi	r22, 0x00	; 0
    4434:	0e 94 55 14 	call	0x28aa	; 0x28aa <LCD_GoToXY>

}
    4438:	c9 59       	subi	r28, 0x99	; 153
    443a:	df 4f       	sbci	r29, 0xFF	; 255
    443c:	0f b6       	in	r0, 0x3f	; 63
    443e:	f8 94       	cli
    4440:	de bf       	out	0x3e, r29	; 62
    4442:	0f be       	out	0x3f, r0	; 63
    4444:	cd bf       	out	0x3d, r28	; 61
    4446:	cf 91       	pop	r28
    4448:	df 91       	pop	r29
    444a:	1f 91       	pop	r17
    444c:	0f 91       	pop	r16
    444e:	08 95       	ret

00004450 <getOption>:
u8 getOption(void)
{
    4450:	df 93       	push	r29
    4452:	cf 93       	push	r28
    4454:	0f 92       	push	r0
    4456:	cd b7       	in	r28, 0x3d	; 61
    4458:	de b7       	in	r29, 0x3e	; 62
	u8 KPD_PressedKey;
	while(1)
	{
		do
		{
			KPD_PressedKey = KPD_GetPressedKey();
    445a:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <KPD_GetPressedKey>
    445e:	89 83       	std	Y+1, r24	; 0x01
		}
		while (KPD_PressedKey == KPD_NOT_PRESSED);
    4460:	89 81       	ldd	r24, Y+1	; 0x01
    4462:	8f 3f       	cpi	r24, 0xFF	; 255
    4464:	d1 f3       	breq	.-12     	; 0x445a <getOption+0xa>

		break;
	}
	return KPD_PressedKey;
    4466:	89 81       	ldd	r24, Y+1	; 0x01
}
    4468:	0f 90       	pop	r0
    446a:	cf 91       	pop	r28
    446c:	df 91       	pop	r29
    446e:	08 95       	ret

00004470 <getPass>:
u32 getPass(void)
{
    4470:	df 93       	push	r29
    4472:	cf 93       	push	r28
    4474:	cd b7       	in	r28, 0x3d	; 61
    4476:	de b7       	in	r29, 0x3e	; 62
    4478:	64 97       	sbiw	r28, 0x14	; 20
    447a:	0f b6       	in	r0, 0x3f	; 63
    447c:	f8 94       	cli
    447e:	de bf       	out	0x3e, r29	; 62
    4480:	0f be       	out	0x3f, r0	; 63
    4482:	cd bf       	out	0x3d, r28	; 61
	u32 pass = 0;
    4484:	18 8a       	std	Y+16, r1	; 0x10
    4486:	19 8a       	std	Y+17, r1	; 0x11
    4488:	1a 8a       	std	Y+18, r1	; 0x12
    448a:	1b 8a       	std	Y+19, r1	; 0x13
	u8 passLong = PASS_LONG ;
    448c:	84 e0       	ldi	r24, 0x04	; 4
    448e:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_WriteString(" Pass : ");
    4490:	86 ef       	ldi	r24, 0xF6	; 246
    4492:	90 e0       	ldi	r25, 0x00	; 0
    4494:	0e 94 2c 14 	call	0x2858	; 0x2858 <LCD_WriteString>
    4498:	99 c0       	rjmp	.+306    	; 0x45cc <getPass+0x15c>
	while(passLong-- )
	{
		pass *=10 ; //to put the next cahracter in the next place
    449a:	88 89       	ldd	r24, Y+16	; 0x10
    449c:	99 89       	ldd	r25, Y+17	; 0x11
    449e:	aa 89       	ldd	r26, Y+18	; 0x12
    44a0:	bb 89       	ldd	r27, Y+19	; 0x13
    44a2:	2a e0       	ldi	r18, 0x0A	; 10
    44a4:	30 e0       	ldi	r19, 0x00	; 0
    44a6:	40 e0       	ldi	r20, 0x00	; 0
    44a8:	50 e0       	ldi	r21, 0x00	; 0
    44aa:	bc 01       	movw	r22, r24
    44ac:	cd 01       	movw	r24, r26
    44ae:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <__mulsi3>
    44b2:	dc 01       	movw	r26, r24
    44b4:	cb 01       	movw	r24, r22
    44b6:	88 8b       	std	Y+16, r24	; 0x10
    44b8:	99 8b       	std	Y+17, r25	; 0x11
    44ba:	aa 8b       	std	Y+18, r26	; 0x12
    44bc:	bb 8b       	std	Y+19, r27	; 0x13
		pass += getOption() ;
    44be:	0e 94 28 22 	call	0x4450	; 0x4450 <getOption>
    44c2:	28 2f       	mov	r18, r24
    44c4:	30 e0       	ldi	r19, 0x00	; 0
    44c6:	40 e0       	ldi	r20, 0x00	; 0
    44c8:	50 e0       	ldi	r21, 0x00	; 0
    44ca:	88 89       	ldd	r24, Y+16	; 0x10
    44cc:	99 89       	ldd	r25, Y+17	; 0x11
    44ce:	aa 89       	ldd	r26, Y+18	; 0x12
    44d0:	bb 89       	ldd	r27, Y+19	; 0x13
    44d2:	82 0f       	add	r24, r18
    44d4:	93 1f       	adc	r25, r19
    44d6:	a4 1f       	adc	r26, r20
    44d8:	b5 1f       	adc	r27, r21
    44da:	88 8b       	std	Y+16, r24	; 0x10
    44dc:	99 8b       	std	Y+17, r25	; 0x11
    44de:	aa 8b       	std	Y+18, r26	; 0x12
    44e0:	bb 8b       	std	Y+19, r27	; 0x13
		LCD_WriteData('*');
    44e2:	8a e2       	ldi	r24, 0x2A	; 42
    44e4:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <LCD_WriteData>
    44e8:	80 e0       	ldi	r24, 0x00	; 0
    44ea:	90 e0       	ldi	r25, 0x00	; 0
    44ec:	a8 ec       	ldi	r26, 0xC8	; 200
    44ee:	b2 e4       	ldi	r27, 0x42	; 66
    44f0:	8b 87       	std	Y+11, r24	; 0x0b
    44f2:	9c 87       	std	Y+12, r25	; 0x0c
    44f4:	ad 87       	std	Y+13, r26	; 0x0d
    44f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    44fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    44fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    44fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    4500:	20 e0       	ldi	r18, 0x00	; 0
    4502:	30 e0       	ldi	r19, 0x00	; 0
    4504:	4a ef       	ldi	r20, 0xFA	; 250
    4506:	54 e4       	ldi	r21, 0x44	; 68
    4508:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    450c:	dc 01       	movw	r26, r24
    450e:	cb 01       	movw	r24, r22
    4510:	8f 83       	std	Y+7, r24	; 0x07
    4512:	98 87       	std	Y+8, r25	; 0x08
    4514:	a9 87       	std	Y+9, r26	; 0x09
    4516:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4518:	6f 81       	ldd	r22, Y+7	; 0x07
    451a:	78 85       	ldd	r23, Y+8	; 0x08
    451c:	89 85       	ldd	r24, Y+9	; 0x09
    451e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4520:	20 e0       	ldi	r18, 0x00	; 0
    4522:	30 e0       	ldi	r19, 0x00	; 0
    4524:	40 e8       	ldi	r20, 0x80	; 128
    4526:	5f e3       	ldi	r21, 0x3F	; 63
    4528:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    452c:	88 23       	and	r24, r24
    452e:	2c f4       	brge	.+10     	; 0x453a <getPass+0xca>
		__ticks = 1;
    4530:	81 e0       	ldi	r24, 0x01	; 1
    4532:	90 e0       	ldi	r25, 0x00	; 0
    4534:	9e 83       	std	Y+6, r25	; 0x06
    4536:	8d 83       	std	Y+5, r24	; 0x05
    4538:	3f c0       	rjmp	.+126    	; 0x45b8 <getPass+0x148>
	else if (__tmp > 65535)
    453a:	6f 81       	ldd	r22, Y+7	; 0x07
    453c:	78 85       	ldd	r23, Y+8	; 0x08
    453e:	89 85       	ldd	r24, Y+9	; 0x09
    4540:	9a 85       	ldd	r25, Y+10	; 0x0a
    4542:	20 e0       	ldi	r18, 0x00	; 0
    4544:	3f ef       	ldi	r19, 0xFF	; 255
    4546:	4f e7       	ldi	r20, 0x7F	; 127
    4548:	57 e4       	ldi	r21, 0x47	; 71
    454a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    454e:	18 16       	cp	r1, r24
    4550:	4c f5       	brge	.+82     	; 0x45a4 <getPass+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4552:	6b 85       	ldd	r22, Y+11	; 0x0b
    4554:	7c 85       	ldd	r23, Y+12	; 0x0c
    4556:	8d 85       	ldd	r24, Y+13	; 0x0d
    4558:	9e 85       	ldd	r25, Y+14	; 0x0e
    455a:	20 e0       	ldi	r18, 0x00	; 0
    455c:	30 e0       	ldi	r19, 0x00	; 0
    455e:	40 e2       	ldi	r20, 0x20	; 32
    4560:	51 e4       	ldi	r21, 0x41	; 65
    4562:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4566:	dc 01       	movw	r26, r24
    4568:	cb 01       	movw	r24, r22
    456a:	bc 01       	movw	r22, r24
    456c:	cd 01       	movw	r24, r26
    456e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4572:	dc 01       	movw	r26, r24
    4574:	cb 01       	movw	r24, r22
    4576:	9e 83       	std	Y+6, r25	; 0x06
    4578:	8d 83       	std	Y+5, r24	; 0x05
    457a:	0f c0       	rjmp	.+30     	; 0x459a <getPass+0x12a>
    457c:	88 ec       	ldi	r24, 0xC8	; 200
    457e:	90 e0       	ldi	r25, 0x00	; 0
    4580:	9c 83       	std	Y+4, r25	; 0x04
    4582:	8b 83       	std	Y+3, r24	; 0x03
    4584:	8b 81       	ldd	r24, Y+3	; 0x03
    4586:	9c 81       	ldd	r25, Y+4	; 0x04
    4588:	01 97       	sbiw	r24, 0x01	; 1
    458a:	f1 f7       	brne	.-4      	; 0x4588 <getPass+0x118>
    458c:	9c 83       	std	Y+4, r25	; 0x04
    458e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4590:	8d 81       	ldd	r24, Y+5	; 0x05
    4592:	9e 81       	ldd	r25, Y+6	; 0x06
    4594:	01 97       	sbiw	r24, 0x01	; 1
    4596:	9e 83       	std	Y+6, r25	; 0x06
    4598:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    459a:	8d 81       	ldd	r24, Y+5	; 0x05
    459c:	9e 81       	ldd	r25, Y+6	; 0x06
    459e:	00 97       	sbiw	r24, 0x00	; 0
    45a0:	69 f7       	brne	.-38     	; 0x457c <getPass+0x10c>
    45a2:	14 c0       	rjmp	.+40     	; 0x45cc <getPass+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45a4:	6f 81       	ldd	r22, Y+7	; 0x07
    45a6:	78 85       	ldd	r23, Y+8	; 0x08
    45a8:	89 85       	ldd	r24, Y+9	; 0x09
    45aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    45ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45b0:	dc 01       	movw	r26, r24
    45b2:	cb 01       	movw	r24, r22
    45b4:	9e 83       	std	Y+6, r25	; 0x06
    45b6:	8d 83       	std	Y+5, r24	; 0x05
    45b8:	8d 81       	ldd	r24, Y+5	; 0x05
    45ba:	9e 81       	ldd	r25, Y+6	; 0x06
    45bc:	9a 83       	std	Y+2, r25	; 0x02
    45be:	89 83       	std	Y+1, r24	; 0x01
    45c0:	89 81       	ldd	r24, Y+1	; 0x01
    45c2:	9a 81       	ldd	r25, Y+2	; 0x02
    45c4:	01 97       	sbiw	r24, 0x01	; 1
    45c6:	f1 f7       	brne	.-4      	; 0x45c4 <getPass+0x154>
    45c8:	9a 83       	std	Y+2, r25	; 0x02
    45ca:	89 83       	std	Y+1, r24	; 0x01
u32 getPass(void)
{
	u32 pass = 0;
	u8 passLong = PASS_LONG ;
	LCD_WriteString(" Pass : ");
	while(passLong-- )
    45cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    45ce:	8c 8b       	std	Y+20, r24	; 0x14
    45d0:	8c 89       	ldd	r24, Y+20	; 0x14
    45d2:	88 23       	and	r24, r24
    45d4:	11 f0       	breq	.+4      	; 0x45da <getPass+0x16a>
    45d6:	81 e0       	ldi	r24, 0x01	; 1
    45d8:	8c 8b       	std	Y+20, r24	; 0x14
    45da:	8c 89       	ldd	r24, Y+20	; 0x14
    45dc:	9f 85       	ldd	r25, Y+15	; 0x0f
    45de:	91 50       	subi	r25, 0x01	; 1
    45e0:	9f 87       	std	Y+15, r25	; 0x0f
    45e2:	88 23       	and	r24, r24
    45e4:	09 f0       	breq	.+2      	; 0x45e8 <getPass+0x178>
    45e6:	59 cf       	rjmp	.-334    	; 0x449a <getPass+0x2a>
		pass *=10 ; //to put the next cahracter in the next place
		pass += getOption() ;
		LCD_WriteData('*');
		_delay_ms(100);
	}
	LCD_WriteCommand(clear);
    45e8:	81 e0       	ldi	r24, 0x01	; 1
    45ea:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <LCD_WriteCommand>
	return pass ;
    45ee:	88 89       	ldd	r24, Y+16	; 0x10
    45f0:	99 89       	ldd	r25, Y+17	; 0x11
    45f2:	aa 89       	ldd	r26, Y+18	; 0x12
    45f4:	bb 89       	ldd	r27, Y+19	; 0x13
}
    45f6:	bc 01       	movw	r22, r24
    45f8:	cd 01       	movw	r24, r26
    45fa:	64 96       	adiw	r28, 0x14	; 20
    45fc:	0f b6       	in	r0, 0x3f	; 63
    45fe:	f8 94       	cli
    4600:	de bf       	out	0x3e, r29	; 62
    4602:	0f be       	out	0x3f, r0	; 63
    4604:	cd bf       	out	0x3d, r28	; 61
    4606:	cf 91       	pop	r28
    4608:	df 91       	pop	r29
    460a:	08 95       	ret

0000460c <room1On>:
void room1On(void)
{
    460c:	df 93       	push	r29
    460e:	cf 93       	push	r28
    4610:	cd b7       	in	r28, 0x3d	; 61
    4612:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinValue(PORTB, DIO_PIN4, DIO_HIGH);
    4614:	81 e0       	ldi	r24, 0x01	; 1
    4616:	64 e0       	ldi	r22, 0x04	; 4
    4618:	41 e0       	ldi	r20, 0x01	; 1
    461a:	0e 94 38 0b 	call	0x1670	; 0x1670 <DIO_SetPinValue>
}
    461e:	cf 91       	pop	r28
    4620:	df 91       	pop	r29
    4622:	08 95       	ret

00004624 <room1Off>:
void room1Off(void)
{
    4624:	df 93       	push	r29
    4626:	cf 93       	push	r28
    4628:	cd b7       	in	r28, 0x3d	; 61
    462a:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinValue(PORTB, DIO_PIN4, DIO_LOW);
    462c:	81 e0       	ldi	r24, 0x01	; 1
    462e:	64 e0       	ldi	r22, 0x04	; 4
    4630:	40 e0       	ldi	r20, 0x00	; 0
    4632:	0e 94 38 0b 	call	0x1670	; 0x1670 <DIO_SetPinValue>
}
    4636:	cf 91       	pop	r28
    4638:	df 91       	pop	r29
    463a:	08 95       	ret

0000463c <room2On>:
void room2On(void)
{
    463c:	df 93       	push	r29
    463e:	cf 93       	push	r28
    4640:	cd b7       	in	r28, 0x3d	; 61
    4642:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinValue(PORTB, DIO_PIN5, DIO_HIGH);
    4644:	81 e0       	ldi	r24, 0x01	; 1
    4646:	65 e0       	ldi	r22, 0x05	; 5
    4648:	41 e0       	ldi	r20, 0x01	; 1
    464a:	0e 94 38 0b 	call	0x1670	; 0x1670 <DIO_SetPinValue>
}
    464e:	cf 91       	pop	r28
    4650:	df 91       	pop	r29
    4652:	08 95       	ret

00004654 <room2Off>:
void room2Off(void)
{
    4654:	df 93       	push	r29
    4656:	cf 93       	push	r28
    4658:	cd b7       	in	r28, 0x3d	; 61
    465a:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinValue(PORTB, DIO_PIN5, DIO_LOW);
    465c:	81 e0       	ldi	r24, 0x01	; 1
    465e:	65 e0       	ldi	r22, 0x05	; 5
    4660:	40 e0       	ldi	r20, 0x00	; 0
    4662:	0e 94 38 0b 	call	0x1670	; 0x1670 <DIO_SetPinValue>
}
    4666:	cf 91       	pop	r28
    4668:	df 91       	pop	r29
    466a:	08 95       	ret

0000466c <room3On>:
void room3On(void)
{
    466c:	df 93       	push	r29
    466e:	cf 93       	push	r28
    4670:	cd b7       	in	r28, 0x3d	; 61
    4672:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinValue(PORTB, DIO_PIN6, DIO_HIGH);
    4674:	81 e0       	ldi	r24, 0x01	; 1
    4676:	66 e0       	ldi	r22, 0x06	; 6
    4678:	41 e0       	ldi	r20, 0x01	; 1
    467a:	0e 94 38 0b 	call	0x1670	; 0x1670 <DIO_SetPinValue>
}
    467e:	cf 91       	pop	r28
    4680:	df 91       	pop	r29
    4682:	08 95       	ret

00004684 <room3Off>:
void room3Off(void)
{
    4684:	df 93       	push	r29
    4686:	cf 93       	push	r28
    4688:	cd b7       	in	r28, 0x3d	; 61
    468a:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinValue(PORTB, DIO_PIN6, DIO_LOW);
    468c:	81 e0       	ldi	r24, 0x01	; 1
    468e:	66 e0       	ldi	r22, 0x06	; 6
    4690:	40 e0       	ldi	r20, 0x00	; 0
    4692:	0e 94 38 0b 	call	0x1670	; 0x1670 <DIO_SetPinValue>
}
    4696:	cf 91       	pop	r28
    4698:	df 91       	pop	r29
    469a:	08 95       	ret

0000469c <roomOptions>:
void roomOptions(void)
{
    469c:	df 93       	push	r29
    469e:	cf 93       	push	r28
    46a0:	00 d0       	rcall	.+0      	; 0x46a2 <roomOptions+0x6>
    46a2:	00 d0       	rcall	.+0      	; 0x46a4 <roomOptions+0x8>
    46a4:	00 d0       	rcall	.+0      	; 0x46a6 <roomOptions+0xa>
    46a6:	cd b7       	in	r28, 0x3d	; 61
    46a8:	de b7       	in	r29, 0x3e	; 62
	LCD_WriteString("1-Room1  2-Room2");
    46aa:	8f ef       	ldi	r24, 0xFF	; 255
    46ac:	90 e0       	ldi	r25, 0x00	; 0
    46ae:	0e 94 2c 14 	call	0x2858	; 0x2858 <LCD_WriteString>
	LCD_GoToXY(1, 0);
    46b2:	81 e0       	ldi	r24, 0x01	; 1
    46b4:	60 e0       	ldi	r22, 0x00	; 0
    46b6:	0e 94 55 14 	call	0x28aa	; 0x28aa <LCD_GoToXY>
	LCD_WriteString("3-Room3 ");
    46ba:	80 e1       	ldi	r24, 0x10	; 16
    46bc:	91 e0       	ldi	r25, 0x01	; 1
    46be:	0e 94 2c 14 	call	0x2858	; 0x2858 <LCD_WriteString>
	u8 option = getOption();
    46c2:	0e 94 28 22 	call	0x4450	; 0x4450 <getOption>
    46c6:	8c 83       	std	Y+4, r24	; 0x04
	LCD_WriteCommand(clear);
    46c8:	81 e0       	ldi	r24, 0x01	; 1
    46ca:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <LCD_WriteCommand>
	LCD_WriteString(" 1-on   2-off");
    46ce:	89 e1       	ldi	r24, 0x19	; 25
    46d0:	91 e0       	ldi	r25, 0x01	; 1
    46d2:	0e 94 2c 14 	call	0x2858	; 0x2858 <LCD_WriteString>
	switch (option)
    46d6:	8c 81       	ldd	r24, Y+4	; 0x04
    46d8:	28 2f       	mov	r18, r24
    46da:	30 e0       	ldi	r19, 0x00	; 0
    46dc:	3e 83       	std	Y+6, r19	; 0x06
    46de:	2d 83       	std	Y+5, r18	; 0x05
    46e0:	8d 81       	ldd	r24, Y+5	; 0x05
    46e2:	9e 81       	ldd	r25, Y+6	; 0x06
    46e4:	82 30       	cpi	r24, 0x02	; 2
    46e6:	91 05       	cpc	r25, r1
    46e8:	c9 f0       	breq	.+50     	; 0x471c <roomOptions+0x80>
    46ea:	2d 81       	ldd	r18, Y+5	; 0x05
    46ec:	3e 81       	ldd	r19, Y+6	; 0x06
    46ee:	23 30       	cpi	r18, 0x03	; 3
    46f0:	31 05       	cpc	r19, r1
    46f2:	19 f1       	breq	.+70     	; 0x473a <roomOptions+0x9e>
    46f4:	8d 81       	ldd	r24, Y+5	; 0x05
    46f6:	9e 81       	ldd	r25, Y+6	; 0x06
    46f8:	81 30       	cpi	r24, 0x01	; 1
    46fa:	91 05       	cpc	r25, r1
    46fc:	61 f5       	brne	.+88     	; 0x4756 <roomOptions+0xba>
	{
	case Room1 :
	{
		u8 state = getOption();
    46fe:	0e 94 28 22 	call	0x4450	; 0x4450 <getOption>
    4702:	8b 83       	std	Y+3, r24	; 0x03
		if(state == on)
    4704:	8b 81       	ldd	r24, Y+3	; 0x03
    4706:	81 30       	cpi	r24, 0x01	; 1
    4708:	19 f4       	brne	.+6      	; 0x4710 <roomOptions+0x74>
		{
			room1On();
    470a:	0e 94 06 23 	call	0x460c	; 0x460c <room1On>
    470e:	23 c0       	rjmp	.+70     	; 0x4756 <roomOptions+0xba>
		}
		else if(state == off)
    4710:	8b 81       	ldd	r24, Y+3	; 0x03
    4712:	82 30       	cpi	r24, 0x02	; 2
    4714:	01 f5       	brne	.+64     	; 0x4756 <roomOptions+0xba>
		{
			room1Off();
    4716:	0e 94 12 23 	call	0x4624	; 0x4624 <room1Off>
    471a:	1d c0       	rjmp	.+58     	; 0x4756 <roomOptions+0xba>
		}
		break;
	}
	case Room2 :
	{
		u8 state = getOption();
    471c:	0e 94 28 22 	call	0x4450	; 0x4450 <getOption>
    4720:	8a 83       	std	Y+2, r24	; 0x02
		if(state == on)
    4722:	8a 81       	ldd	r24, Y+2	; 0x02
    4724:	81 30       	cpi	r24, 0x01	; 1
    4726:	19 f4       	brne	.+6      	; 0x472e <roomOptions+0x92>
		{
			room2On();
    4728:	0e 94 1e 23 	call	0x463c	; 0x463c <room2On>
    472c:	14 c0       	rjmp	.+40     	; 0x4756 <roomOptions+0xba>
		}
		else if(state == off)
    472e:	8a 81       	ldd	r24, Y+2	; 0x02
    4730:	82 30       	cpi	r24, 0x02	; 2
    4732:	89 f4       	brne	.+34     	; 0x4756 <roomOptions+0xba>
		{
			room2Off();
    4734:	0e 94 2a 23 	call	0x4654	; 0x4654 <room2Off>
    4738:	0e c0       	rjmp	.+28     	; 0x4756 <roomOptions+0xba>

		break;
	}
	case Room3 :
	{
		u8 state = getOption();
    473a:	0e 94 28 22 	call	0x4450	; 0x4450 <getOption>
    473e:	89 83       	std	Y+1, r24	; 0x01
		if(state == on)
    4740:	89 81       	ldd	r24, Y+1	; 0x01
    4742:	81 30       	cpi	r24, 0x01	; 1
    4744:	19 f4       	brne	.+6      	; 0x474c <roomOptions+0xb0>
		{
			room3On();
    4746:	0e 94 36 23 	call	0x466c	; 0x466c <room3On>
    474a:	05 c0       	rjmp	.+10     	; 0x4756 <roomOptions+0xba>
		}
		else if(state == off)
    474c:	89 81       	ldd	r24, Y+1	; 0x01
    474e:	82 30       	cpi	r24, 0x02	; 2
    4750:	11 f4       	brne	.+4      	; 0x4756 <roomOptions+0xba>
		{
			room3Off();
    4752:	0e 94 42 23 	call	0x4684	; 0x4684 <room3Off>
		}
		break;
	}
	}
	LCD_WriteCommand(clear);
    4756:	81 e0       	ldi	r24, 0x01	; 1
    4758:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <LCD_WriteCommand>
	options();
    475c:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <options>
}
    4760:	26 96       	adiw	r28, 0x06	; 6
    4762:	0f b6       	in	r0, 0x3f	; 63
    4764:	f8 94       	cli
    4766:	de bf       	out	0x3e, r29	; 62
    4768:	0f be       	out	0x3f, r0	; 63
    476a:	cd bf       	out	0x3d, r28	; 61
    476c:	cf 91       	pop	r28
    476e:	df 91       	pop	r29
    4770:	08 95       	ret

00004772 <rigthPass>:

void rigthPass(void)
{
    4772:	df 93       	push	r29
    4774:	cf 93       	push	r28
    4776:	cd b7       	in	r28, 0x3d	; 61
    4778:	de b7       	in	r29, 0x3e	; 62
    477a:	2e 97       	sbiw	r28, 0x0e	; 14
    477c:	0f b6       	in	r0, 0x3f	; 63
    477e:	f8 94       	cli
    4780:	de bf       	out	0x3e, r29	; 62
    4782:	0f be       	out	0x3f, r0	; 63
    4784:	cd bf       	out	0x3d, r28	; 61
	LCD_WriteString(" Right Pass");
    4786:	87 e2       	ldi	r24, 0x27	; 39
    4788:	91 e0       	ldi	r25, 0x01	; 1
    478a:	0e 94 2c 14 	call	0x2858	; 0x2858 <LCD_WriteString>
    478e:	80 e0       	ldi	r24, 0x00	; 0
    4790:	90 e0       	ldi	r25, 0x00	; 0
    4792:	aa ef       	ldi	r26, 0xFA	; 250
    4794:	b3 e4       	ldi	r27, 0x43	; 67
    4796:	8b 87       	std	Y+11, r24	; 0x0b
    4798:	9c 87       	std	Y+12, r25	; 0x0c
    479a:	ad 87       	std	Y+13, r26	; 0x0d
    479c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    479e:	6b 85       	ldd	r22, Y+11	; 0x0b
    47a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    47a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    47a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    47a6:	20 e0       	ldi	r18, 0x00	; 0
    47a8:	30 e0       	ldi	r19, 0x00	; 0
    47aa:	4a ef       	ldi	r20, 0xFA	; 250
    47ac:	54 e4       	ldi	r21, 0x44	; 68
    47ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47b2:	dc 01       	movw	r26, r24
    47b4:	cb 01       	movw	r24, r22
    47b6:	8f 83       	std	Y+7, r24	; 0x07
    47b8:	98 87       	std	Y+8, r25	; 0x08
    47ba:	a9 87       	std	Y+9, r26	; 0x09
    47bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    47be:	6f 81       	ldd	r22, Y+7	; 0x07
    47c0:	78 85       	ldd	r23, Y+8	; 0x08
    47c2:	89 85       	ldd	r24, Y+9	; 0x09
    47c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    47c6:	20 e0       	ldi	r18, 0x00	; 0
    47c8:	30 e0       	ldi	r19, 0x00	; 0
    47ca:	40 e8       	ldi	r20, 0x80	; 128
    47cc:	5f e3       	ldi	r21, 0x3F	; 63
    47ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    47d2:	88 23       	and	r24, r24
    47d4:	2c f4       	brge	.+10     	; 0x47e0 <rigthPass+0x6e>
		__ticks = 1;
    47d6:	81 e0       	ldi	r24, 0x01	; 1
    47d8:	90 e0       	ldi	r25, 0x00	; 0
    47da:	9e 83       	std	Y+6, r25	; 0x06
    47dc:	8d 83       	std	Y+5, r24	; 0x05
    47de:	3f c0       	rjmp	.+126    	; 0x485e <rigthPass+0xec>
	else if (__tmp > 65535)
    47e0:	6f 81       	ldd	r22, Y+7	; 0x07
    47e2:	78 85       	ldd	r23, Y+8	; 0x08
    47e4:	89 85       	ldd	r24, Y+9	; 0x09
    47e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    47e8:	20 e0       	ldi	r18, 0x00	; 0
    47ea:	3f ef       	ldi	r19, 0xFF	; 255
    47ec:	4f e7       	ldi	r20, 0x7F	; 127
    47ee:	57 e4       	ldi	r21, 0x47	; 71
    47f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    47f4:	18 16       	cp	r1, r24
    47f6:	4c f5       	brge	.+82     	; 0x484a <rigthPass+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    47fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    47fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    47fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    4800:	20 e0       	ldi	r18, 0x00	; 0
    4802:	30 e0       	ldi	r19, 0x00	; 0
    4804:	40 e2       	ldi	r20, 0x20	; 32
    4806:	51 e4       	ldi	r21, 0x41	; 65
    4808:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    480c:	dc 01       	movw	r26, r24
    480e:	cb 01       	movw	r24, r22
    4810:	bc 01       	movw	r22, r24
    4812:	cd 01       	movw	r24, r26
    4814:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4818:	dc 01       	movw	r26, r24
    481a:	cb 01       	movw	r24, r22
    481c:	9e 83       	std	Y+6, r25	; 0x06
    481e:	8d 83       	std	Y+5, r24	; 0x05
    4820:	0f c0       	rjmp	.+30     	; 0x4840 <rigthPass+0xce>
    4822:	88 ec       	ldi	r24, 0xC8	; 200
    4824:	90 e0       	ldi	r25, 0x00	; 0
    4826:	9c 83       	std	Y+4, r25	; 0x04
    4828:	8b 83       	std	Y+3, r24	; 0x03
    482a:	8b 81       	ldd	r24, Y+3	; 0x03
    482c:	9c 81       	ldd	r25, Y+4	; 0x04
    482e:	01 97       	sbiw	r24, 0x01	; 1
    4830:	f1 f7       	brne	.-4      	; 0x482e <rigthPass+0xbc>
    4832:	9c 83       	std	Y+4, r25	; 0x04
    4834:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4836:	8d 81       	ldd	r24, Y+5	; 0x05
    4838:	9e 81       	ldd	r25, Y+6	; 0x06
    483a:	01 97       	sbiw	r24, 0x01	; 1
    483c:	9e 83       	std	Y+6, r25	; 0x06
    483e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4840:	8d 81       	ldd	r24, Y+5	; 0x05
    4842:	9e 81       	ldd	r25, Y+6	; 0x06
    4844:	00 97       	sbiw	r24, 0x00	; 0
    4846:	69 f7       	brne	.-38     	; 0x4822 <rigthPass+0xb0>
    4848:	14 c0       	rjmp	.+40     	; 0x4872 <rigthPass+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    484a:	6f 81       	ldd	r22, Y+7	; 0x07
    484c:	78 85       	ldd	r23, Y+8	; 0x08
    484e:	89 85       	ldd	r24, Y+9	; 0x09
    4850:	9a 85       	ldd	r25, Y+10	; 0x0a
    4852:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4856:	dc 01       	movw	r26, r24
    4858:	cb 01       	movw	r24, r22
    485a:	9e 83       	std	Y+6, r25	; 0x06
    485c:	8d 83       	std	Y+5, r24	; 0x05
    485e:	8d 81       	ldd	r24, Y+5	; 0x05
    4860:	9e 81       	ldd	r25, Y+6	; 0x06
    4862:	9a 83       	std	Y+2, r25	; 0x02
    4864:	89 83       	std	Y+1, r24	; 0x01
    4866:	89 81       	ldd	r24, Y+1	; 0x01
    4868:	9a 81       	ldd	r25, Y+2	; 0x02
    486a:	01 97       	sbiw	r24, 0x01	; 1
    486c:	f1 f7       	brne	.-4      	; 0x486a <rigthPass+0xf8>
    486e:	9a 83       	std	Y+2, r25	; 0x02
    4870:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	LCD_WriteCommand(clear);
    4872:	81 e0       	ldi	r24, 0x01	; 1
    4874:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <LCD_WriteCommand>

}
    4878:	2e 96       	adiw	r28, 0x0e	; 14
    487a:	0f b6       	in	r0, 0x3f	; 63
    487c:	f8 94       	cli
    487e:	de bf       	out	0x3e, r29	; 62
    4880:	0f be       	out	0x3f, r0	; 63
    4882:	cd bf       	out	0x3d, r28	; 61
    4884:	cf 91       	pop	r28
    4886:	df 91       	pop	r29
    4888:	08 95       	ret

0000488a <WrongPass>:


void WrongPass(void)
{
    488a:	df 93       	push	r29
    488c:	cf 93       	push	r28
    488e:	cd b7       	in	r28, 0x3d	; 61
    4890:	de b7       	in	r29, 0x3e	; 62
    4892:	2e 97       	sbiw	r28, 0x0e	; 14
    4894:	0f b6       	in	r0, 0x3f	; 63
    4896:	f8 94       	cli
    4898:	de bf       	out	0x3e, r29	; 62
    489a:	0f be       	out	0x3f, r0	; 63
    489c:	cd bf       	out	0x3d, r28	; 61
	LCD_WriteString(" Wrong Pass");
    489e:	83 e3       	ldi	r24, 0x33	; 51
    48a0:	91 e0       	ldi	r25, 0x01	; 1
    48a2:	0e 94 2c 14 	call	0x2858	; 0x2858 <LCD_WriteString>
    48a6:	80 e0       	ldi	r24, 0x00	; 0
    48a8:	90 e0       	ldi	r25, 0x00	; 0
    48aa:	aa ef       	ldi	r26, 0xFA	; 250
    48ac:	b3 e4       	ldi	r27, 0x43	; 67
    48ae:	8b 87       	std	Y+11, r24	; 0x0b
    48b0:	9c 87       	std	Y+12, r25	; 0x0c
    48b2:	ad 87       	std	Y+13, r26	; 0x0d
    48b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    48b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    48ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    48bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    48be:	20 e0       	ldi	r18, 0x00	; 0
    48c0:	30 e0       	ldi	r19, 0x00	; 0
    48c2:	4a ef       	ldi	r20, 0xFA	; 250
    48c4:	54 e4       	ldi	r21, 0x44	; 68
    48c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48ca:	dc 01       	movw	r26, r24
    48cc:	cb 01       	movw	r24, r22
    48ce:	8f 83       	std	Y+7, r24	; 0x07
    48d0:	98 87       	std	Y+8, r25	; 0x08
    48d2:	a9 87       	std	Y+9, r26	; 0x09
    48d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    48d6:	6f 81       	ldd	r22, Y+7	; 0x07
    48d8:	78 85       	ldd	r23, Y+8	; 0x08
    48da:	89 85       	ldd	r24, Y+9	; 0x09
    48dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    48de:	20 e0       	ldi	r18, 0x00	; 0
    48e0:	30 e0       	ldi	r19, 0x00	; 0
    48e2:	40 e8       	ldi	r20, 0x80	; 128
    48e4:	5f e3       	ldi	r21, 0x3F	; 63
    48e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    48ea:	88 23       	and	r24, r24
    48ec:	2c f4       	brge	.+10     	; 0x48f8 <WrongPass+0x6e>
		__ticks = 1;
    48ee:	81 e0       	ldi	r24, 0x01	; 1
    48f0:	90 e0       	ldi	r25, 0x00	; 0
    48f2:	9e 83       	std	Y+6, r25	; 0x06
    48f4:	8d 83       	std	Y+5, r24	; 0x05
    48f6:	3f c0       	rjmp	.+126    	; 0x4976 <WrongPass+0xec>
	else if (__tmp > 65535)
    48f8:	6f 81       	ldd	r22, Y+7	; 0x07
    48fa:	78 85       	ldd	r23, Y+8	; 0x08
    48fc:	89 85       	ldd	r24, Y+9	; 0x09
    48fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    4900:	20 e0       	ldi	r18, 0x00	; 0
    4902:	3f ef       	ldi	r19, 0xFF	; 255
    4904:	4f e7       	ldi	r20, 0x7F	; 127
    4906:	57 e4       	ldi	r21, 0x47	; 71
    4908:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    490c:	18 16       	cp	r1, r24
    490e:	4c f5       	brge	.+82     	; 0x4962 <WrongPass+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4910:	6b 85       	ldd	r22, Y+11	; 0x0b
    4912:	7c 85       	ldd	r23, Y+12	; 0x0c
    4914:	8d 85       	ldd	r24, Y+13	; 0x0d
    4916:	9e 85       	ldd	r25, Y+14	; 0x0e
    4918:	20 e0       	ldi	r18, 0x00	; 0
    491a:	30 e0       	ldi	r19, 0x00	; 0
    491c:	40 e2       	ldi	r20, 0x20	; 32
    491e:	51 e4       	ldi	r21, 0x41	; 65
    4920:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4924:	dc 01       	movw	r26, r24
    4926:	cb 01       	movw	r24, r22
    4928:	bc 01       	movw	r22, r24
    492a:	cd 01       	movw	r24, r26
    492c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4930:	dc 01       	movw	r26, r24
    4932:	cb 01       	movw	r24, r22
    4934:	9e 83       	std	Y+6, r25	; 0x06
    4936:	8d 83       	std	Y+5, r24	; 0x05
    4938:	0f c0       	rjmp	.+30     	; 0x4958 <WrongPass+0xce>
    493a:	88 ec       	ldi	r24, 0xC8	; 200
    493c:	90 e0       	ldi	r25, 0x00	; 0
    493e:	9c 83       	std	Y+4, r25	; 0x04
    4940:	8b 83       	std	Y+3, r24	; 0x03
    4942:	8b 81       	ldd	r24, Y+3	; 0x03
    4944:	9c 81       	ldd	r25, Y+4	; 0x04
    4946:	01 97       	sbiw	r24, 0x01	; 1
    4948:	f1 f7       	brne	.-4      	; 0x4946 <WrongPass+0xbc>
    494a:	9c 83       	std	Y+4, r25	; 0x04
    494c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    494e:	8d 81       	ldd	r24, Y+5	; 0x05
    4950:	9e 81       	ldd	r25, Y+6	; 0x06
    4952:	01 97       	sbiw	r24, 0x01	; 1
    4954:	9e 83       	std	Y+6, r25	; 0x06
    4956:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4958:	8d 81       	ldd	r24, Y+5	; 0x05
    495a:	9e 81       	ldd	r25, Y+6	; 0x06
    495c:	00 97       	sbiw	r24, 0x00	; 0
    495e:	69 f7       	brne	.-38     	; 0x493a <WrongPass+0xb0>
    4960:	14 c0       	rjmp	.+40     	; 0x498a <WrongPass+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4962:	6f 81       	ldd	r22, Y+7	; 0x07
    4964:	78 85       	ldd	r23, Y+8	; 0x08
    4966:	89 85       	ldd	r24, Y+9	; 0x09
    4968:	9a 85       	ldd	r25, Y+10	; 0x0a
    496a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    496e:	dc 01       	movw	r26, r24
    4970:	cb 01       	movw	r24, r22
    4972:	9e 83       	std	Y+6, r25	; 0x06
    4974:	8d 83       	std	Y+5, r24	; 0x05
    4976:	8d 81       	ldd	r24, Y+5	; 0x05
    4978:	9e 81       	ldd	r25, Y+6	; 0x06
    497a:	9a 83       	std	Y+2, r25	; 0x02
    497c:	89 83       	std	Y+1, r24	; 0x01
    497e:	89 81       	ldd	r24, Y+1	; 0x01
    4980:	9a 81       	ldd	r25, Y+2	; 0x02
    4982:	01 97       	sbiw	r24, 0x01	; 1
    4984:	f1 f7       	brne	.-4      	; 0x4982 <WrongPass+0xf8>
    4986:	9a 83       	std	Y+2, r25	; 0x02
    4988:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	LCD_WriteCommand(clear);
    498a:	81 e0       	ldi	r24, 0x01	; 1
    498c:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <LCD_WriteCommand>

}
    4990:	2e 96       	adiw	r28, 0x0e	; 14
    4992:	0f b6       	in	r0, 0x3f	; 63
    4994:	f8 94       	cli
    4996:	de bf       	out	0x3e, r29	; 62
    4998:	0f be       	out	0x3f, r0	; 63
    499a:	cd bf       	out	0x3d, r28	; 61
    499c:	cf 91       	pop	r28
    499e:	df 91       	pop	r29
    49a0:	08 95       	ret

000049a2 <ldrCheck>:

void ldrCheck(void)
{
    49a2:	df 93       	push	r29
    49a4:	cf 93       	push	r28
    49a6:	cd b7       	in	r28, 0x3d	; 61
    49a8:	de b7       	in	r29, 0x3e	; 62
    49aa:	28 97       	sbiw	r28, 0x08	; 8
    49ac:	0f b6       	in	r0, 0x3f	; 63
    49ae:	f8 94       	cli
    49b0:	de bf       	out	0x3e, r29	; 62
    49b2:	0f be       	out	0x3f, r0	; 63
    49b4:	cd bf       	out	0x3d, r28	; 61
	u16 Local_AnaloglValue,Local_DigitalValue;

	DIO_SetPinDirection(PORTB,3,DIO_OUTPUT);
    49b6:	81 e0       	ldi	r24, 0x01	; 1
    49b8:	63 e0       	ldi	r22, 0x03	; 3
    49ba:	41 e0       	ldi	r20, 0x01	; 1
    49bc:	0e 94 46 0a 	call	0x148c	; 0x148c <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTA,1,DIO_INPUT);
    49c0:	80 e0       	ldi	r24, 0x00	; 0
    49c2:	61 e0       	ldi	r22, 0x01	; 1
    49c4:	40 e0       	ldi	r20, 0x00	; 0
    49c6:	0e 94 46 0a 	call	0x148c	; 0x148c <DIO_SetPinDirection>
	MADC_voidInit();
    49ca:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <MADC_voidInit>
	u16 reading = MADC_u8StartConversion(ADC_CHANNEL_1);
    49ce:	81 e0       	ldi	r24, 0x01	; 1
    49d0:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <MADC_u8StartConversion>
    49d4:	9c 83       	std	Y+4, r25	; 0x04
    49d6:	8b 83       	std	Y+3, r24	; 0x03
	u16 volt_reading =((reading*5000UL)/1024);
    49d8:	8b 81       	ldd	r24, Y+3	; 0x03
    49da:	9c 81       	ldd	r25, Y+4	; 0x04
    49dc:	cc 01       	movw	r24, r24
    49de:	a0 e0       	ldi	r26, 0x00	; 0
    49e0:	b0 e0       	ldi	r27, 0x00	; 0
    49e2:	28 e8       	ldi	r18, 0x88	; 136
    49e4:	33 e1       	ldi	r19, 0x13	; 19
    49e6:	40 e0       	ldi	r20, 0x00	; 0
    49e8:	50 e0       	ldi	r21, 0x00	; 0
    49ea:	bc 01       	movw	r22, r24
    49ec:	cd 01       	movw	r24, r26
    49ee:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <__mulsi3>
    49f2:	dc 01       	movw	r26, r24
    49f4:	cb 01       	movw	r24, r22
    49f6:	07 2e       	mov	r0, r23
    49f8:	7a e0       	ldi	r23, 0x0A	; 10
    49fa:	b6 95       	lsr	r27
    49fc:	a7 95       	ror	r26
    49fe:	97 95       	ror	r25
    4a00:	87 95       	ror	r24
    4a02:	7a 95       	dec	r23
    4a04:	d1 f7       	brne	.-12     	; 0x49fa <ldrCheck+0x58>
    4a06:	70 2d       	mov	r23, r0
    4a08:	9a 83       	std	Y+2, r25	; 0x02
    4a0a:	89 83       	std	Y+1, r24	; 0x01

	if(volt_reading > 3500)
    4a0c:	89 81       	ldd	r24, Y+1	; 0x01
    4a0e:	9a 81       	ldd	r25, Y+2	; 0x02
    4a10:	2d e0       	ldi	r18, 0x0D	; 13
    4a12:	8d 3a       	cpi	r24, 0xAD	; 173
    4a14:	92 07       	cpc	r25, r18
    4a16:	38 f0       	brcs	.+14     	; 0x4a26 <ldrCheck+0x84>
	{
		room1On();
    4a18:	0e 94 06 23 	call	0x460c	; 0x460c <room1On>
		room2On();
    4a1c:	0e 94 1e 23 	call	0x463c	; 0x463c <room2On>
		room3On();
    4a20:	0e 94 36 23 	call	0x466c	; 0x466c <room3On>
    4a24:	06 c0       	rjmp	.+12     	; 0x4a32 <ldrCheck+0x90>
	}

	else
	{
		room1Off();
    4a26:	0e 94 12 23 	call	0x4624	; 0x4624 <room1Off>
		room2Off();
    4a2a:	0e 94 2a 23 	call	0x4654	; 0x4654 <room2Off>
		room3Off();
    4a2e:	0e 94 42 23 	call	0x4684	; 0x4684 <room3Off>
	}




}
    4a32:	28 96       	adiw	r28, 0x08	; 8
    4a34:	0f b6       	in	r0, 0x3f	; 63
    4a36:	f8 94       	cli
    4a38:	de bf       	out	0x3e, r29	; 62
    4a3a:	0f be       	out	0x3f, r0	; 63
    4a3c:	cd bf       	out	0x3d, r28	; 61
    4a3e:	cf 91       	pop	r28
    4a40:	df 91       	pop	r29
    4a42:	08 95       	ret

00004a44 <ControlFan>:

void ControlFan(void)
{
    4a44:	df 93       	push	r29
    4a46:	cf 93       	push	r28
    4a48:	cd b7       	in	r28, 0x3d	; 61
    4a4a:	de b7       	in	r29, 0x3e	; 62
    4a4c:	62 97       	sbiw	r28, 0x12	; 18
    4a4e:	0f b6       	in	r0, 0x3f	; 63
    4a50:	f8 94       	cli
    4a52:	de bf       	out	0x3e, r29	; 62
    4a54:	0f be       	out	0x3f, r0	; 63
    4a56:	cd bf       	out	0x3d, r28	; 61
	u16 Local_AnaloglValue,Local_DigitalValue;
	DIO_SetPinDirection(PORTA,0,DIO_INPUT);
    4a58:	80 e0       	ldi	r24, 0x00	; 0
    4a5a:	60 e0       	ldi	r22, 0x00	; 0
    4a5c:	40 e0       	ldi	r20, 0x00	; 0
    4a5e:	0e 94 46 0a 	call	0x148c	; 0x148c <DIO_SetPinDirection>
	MADC_voidInit();
    4a62:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <MADC_voidInit>
	DIO_SetPinDirection(PORTB,3,DIO_OUTPUT);
    4a66:	81 e0       	ldi	r24, 0x01	; 1
    4a68:	63 e0       	ldi	r22, 0x03	; 3
    4a6a:	41 e0       	ldi	r20, 0x01	; 1
    4a6c:	0e 94 46 0a 	call	0x148c	; 0x148c <DIO_SetPinDirection>



	Local_DigitalValue = MADC_u8StartConversion(0);
    4a70:	80 e0       	ldi	r24, 0x00	; 0
    4a72:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <MADC_u8StartConversion>
    4a76:	98 8b       	std	Y+16, r25	; 0x10
    4a78:	8f 87       	std	Y+15, r24	; 0x0f
	Local_AnaloglValue = (Local_DigitalValue * 5000UL)/1024;
    4a7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    4a7c:	98 89       	ldd	r25, Y+16	; 0x10
    4a7e:	cc 01       	movw	r24, r24
    4a80:	a0 e0       	ldi	r26, 0x00	; 0
    4a82:	b0 e0       	ldi	r27, 0x00	; 0
    4a84:	28 e8       	ldi	r18, 0x88	; 136
    4a86:	33 e1       	ldi	r19, 0x13	; 19
    4a88:	40 e0       	ldi	r20, 0x00	; 0
    4a8a:	50 e0       	ldi	r21, 0x00	; 0
    4a8c:	bc 01       	movw	r22, r24
    4a8e:	cd 01       	movw	r24, r26
    4a90:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <__mulsi3>
    4a94:	dc 01       	movw	r26, r24
    4a96:	cb 01       	movw	r24, r22
    4a98:	07 2e       	mov	r0, r23
    4a9a:	7a e0       	ldi	r23, 0x0A	; 10
    4a9c:	b6 95       	lsr	r27
    4a9e:	a7 95       	ror	r26
    4aa0:	97 95       	ror	r25
    4aa2:	87 95       	ror	r24
    4aa4:	7a 95       	dec	r23
    4aa6:	d1 f7       	brne	.-12     	; 0x4a9c <ControlFan+0x58>
    4aa8:	70 2d       	mov	r23, r0
    4aaa:	9a 8b       	std	Y+18, r25	; 0x12
    4aac:	89 8b       	std	Y+17, r24	; 0x11
	//u8 s = stateShow(PORTA ,0);
	if(Local_AnaloglValue>430 && state!=0 )
    4aae:	89 89       	ldd	r24, Y+17	; 0x11
    4ab0:	9a 89       	ldd	r25, Y+18	; 0x12
    4ab2:	21 e0       	ldi	r18, 0x01	; 1
    4ab4:	8f 3a       	cpi	r24, 0xAF	; 175
    4ab6:	92 07       	cpc	r25, r18
    4ab8:	08 f4       	brcc	.+2      	; 0x4abc <ControlFan+0x78>
    4aba:	8c c0       	rjmp	.+280    	; 0x4bd4 <ControlFan+0x190>
    4abc:	80 91 4f 02 	lds	r24, 0x024F
    4ac0:	88 23       	and	r24, r24
    4ac2:	09 f4       	brne	.+2      	; 0x4ac6 <ControlFan+0x82>
    4ac4:	87 c0       	rjmp	.+270    	; 0x4bd4 <ControlFan+0x190>
	{
		TIMER1_INT();
    4ac6:	0e 94 0b 07 	call	0xe16	; 0xe16 <TIMER1_INT>
		PWM_INIT_FAST();
    4aca:	0e 94 99 07 	call	0xf32	; 0xf32 <PWM_INIT_FAST>
		PWM_CTC_VALUE((Local_AnaloglValue/10)*3);
    4ace:	89 89       	ldd	r24, Y+17	; 0x11
    4ad0:	9a 89       	ldd	r25, Y+18	; 0x12
    4ad2:	2a e0       	ldi	r18, 0x0A	; 10
    4ad4:	30 e0       	ldi	r19, 0x00	; 0
    4ad6:	b9 01       	movw	r22, r18
    4ad8:	0e 94 9c 26 	call	0x4d38	; 0x4d38 <__udivmodhi4>
    4adc:	cb 01       	movw	r24, r22
    4ade:	9c 01       	movw	r18, r24
    4ae0:	c9 01       	movw	r24, r18
    4ae2:	88 0f       	add	r24, r24
    4ae4:	99 1f       	adc	r25, r25
    4ae6:	82 0f       	add	r24, r18
    4ae8:	93 1f       	adc	r25, r19
    4aea:	0e 94 09 08 	call	0x1012	; 0x1012 <PWM_CTC_VALUE>
    4aee:	80 e0       	ldi	r24, 0x00	; 0
    4af0:	90 e0       	ldi	r25, 0x00	; 0
    4af2:	a0 ea       	ldi	r26, 0xA0	; 160
    4af4:	b0 e4       	ldi	r27, 0x40	; 64
    4af6:	8b 87       	std	Y+11, r24	; 0x0b
    4af8:	9c 87       	std	Y+12, r25	; 0x0c
    4afa:	ad 87       	std	Y+13, r26	; 0x0d
    4afc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4afe:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b00:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b02:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b04:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b06:	20 e0       	ldi	r18, 0x00	; 0
    4b08:	30 e0       	ldi	r19, 0x00	; 0
    4b0a:	4a ef       	ldi	r20, 0xFA	; 250
    4b0c:	54 e4       	ldi	r21, 0x44	; 68
    4b0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b12:	dc 01       	movw	r26, r24
    4b14:	cb 01       	movw	r24, r22
    4b16:	8f 83       	std	Y+7, r24	; 0x07
    4b18:	98 87       	std	Y+8, r25	; 0x08
    4b1a:	a9 87       	std	Y+9, r26	; 0x09
    4b1c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4b1e:	6f 81       	ldd	r22, Y+7	; 0x07
    4b20:	78 85       	ldd	r23, Y+8	; 0x08
    4b22:	89 85       	ldd	r24, Y+9	; 0x09
    4b24:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b26:	20 e0       	ldi	r18, 0x00	; 0
    4b28:	30 e0       	ldi	r19, 0x00	; 0
    4b2a:	40 e8       	ldi	r20, 0x80	; 128
    4b2c:	5f e3       	ldi	r21, 0x3F	; 63
    4b2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4b32:	88 23       	and	r24, r24
    4b34:	2c f4       	brge	.+10     	; 0x4b40 <ControlFan+0xfc>
		__ticks = 1;
    4b36:	81 e0       	ldi	r24, 0x01	; 1
    4b38:	90 e0       	ldi	r25, 0x00	; 0
    4b3a:	9e 83       	std	Y+6, r25	; 0x06
    4b3c:	8d 83       	std	Y+5, r24	; 0x05
    4b3e:	3f c0       	rjmp	.+126    	; 0x4bbe <ControlFan+0x17a>
	else if (__tmp > 65535)
    4b40:	6f 81       	ldd	r22, Y+7	; 0x07
    4b42:	78 85       	ldd	r23, Y+8	; 0x08
    4b44:	89 85       	ldd	r24, Y+9	; 0x09
    4b46:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b48:	20 e0       	ldi	r18, 0x00	; 0
    4b4a:	3f ef       	ldi	r19, 0xFF	; 255
    4b4c:	4f e7       	ldi	r20, 0x7F	; 127
    4b4e:	57 e4       	ldi	r21, 0x47	; 71
    4b50:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4b54:	18 16       	cp	r1, r24
    4b56:	4c f5       	brge	.+82     	; 0x4baa <ControlFan+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b58:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b60:	20 e0       	ldi	r18, 0x00	; 0
    4b62:	30 e0       	ldi	r19, 0x00	; 0
    4b64:	40 e2       	ldi	r20, 0x20	; 32
    4b66:	51 e4       	ldi	r21, 0x41	; 65
    4b68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b6c:	dc 01       	movw	r26, r24
    4b6e:	cb 01       	movw	r24, r22
    4b70:	bc 01       	movw	r22, r24
    4b72:	cd 01       	movw	r24, r26
    4b74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b78:	dc 01       	movw	r26, r24
    4b7a:	cb 01       	movw	r24, r22
    4b7c:	9e 83       	std	Y+6, r25	; 0x06
    4b7e:	8d 83       	std	Y+5, r24	; 0x05
    4b80:	0f c0       	rjmp	.+30     	; 0x4ba0 <ControlFan+0x15c>
    4b82:	88 ec       	ldi	r24, 0xC8	; 200
    4b84:	90 e0       	ldi	r25, 0x00	; 0
    4b86:	9c 83       	std	Y+4, r25	; 0x04
    4b88:	8b 83       	std	Y+3, r24	; 0x03
    4b8a:	8b 81       	ldd	r24, Y+3	; 0x03
    4b8c:	9c 81       	ldd	r25, Y+4	; 0x04
    4b8e:	01 97       	sbiw	r24, 0x01	; 1
    4b90:	f1 f7       	brne	.-4      	; 0x4b8e <ControlFan+0x14a>
    4b92:	9c 83       	std	Y+4, r25	; 0x04
    4b94:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b96:	8d 81       	ldd	r24, Y+5	; 0x05
    4b98:	9e 81       	ldd	r25, Y+6	; 0x06
    4b9a:	01 97       	sbiw	r24, 0x01	; 1
    4b9c:	9e 83       	std	Y+6, r25	; 0x06
    4b9e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ba0:	8d 81       	ldd	r24, Y+5	; 0x05
    4ba2:	9e 81       	ldd	r25, Y+6	; 0x06
    4ba4:	00 97       	sbiw	r24, 0x00	; 0
    4ba6:	69 f7       	brne	.-38     	; 0x4b82 <ControlFan+0x13e>
    4ba8:	1e c0       	rjmp	.+60     	; 0x4be6 <ControlFan+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4baa:	6f 81       	ldd	r22, Y+7	; 0x07
    4bac:	78 85       	ldd	r23, Y+8	; 0x08
    4bae:	89 85       	ldd	r24, Y+9	; 0x09
    4bb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bb6:	dc 01       	movw	r26, r24
    4bb8:	cb 01       	movw	r24, r22
    4bba:	9e 83       	std	Y+6, r25	; 0x06
    4bbc:	8d 83       	std	Y+5, r24	; 0x05
    4bbe:	8d 81       	ldd	r24, Y+5	; 0x05
    4bc0:	9e 81       	ldd	r25, Y+6	; 0x06
    4bc2:	9a 83       	std	Y+2, r25	; 0x02
    4bc4:	89 83       	std	Y+1, r24	; 0x01
    4bc6:	89 81       	ldd	r24, Y+1	; 0x01
    4bc8:	9a 81       	ldd	r25, Y+2	; 0x02
    4bca:	01 97       	sbiw	r24, 0x01	; 1
    4bcc:	f1 f7       	brne	.-4      	; 0x4bca <ControlFan+0x186>
    4bce:	9a 83       	std	Y+2, r25	; 0x02
    4bd0:	89 83       	std	Y+1, r24	; 0x01
    4bd2:	09 c0       	rjmp	.+18     	; 0x4be6 <ControlFan+0x1a2>
		_delay_ms(5);
	}
	else
	{
		DIO_SetPinDirection(PORTB,3,DIO_INPUT);
    4bd4:	81 e0       	ldi	r24, 0x01	; 1
    4bd6:	63 e0       	ldi	r22, 0x03	; 3
    4bd8:	40 e0       	ldi	r20, 0x00	; 0
    4bda:	0e 94 46 0a 	call	0x148c	; 0x148c <DIO_SetPinDirection>
		PWM_CTC_VALUE(0);
    4bde:	80 e0       	ldi	r24, 0x00	; 0
    4be0:	90 e0       	ldi	r25, 0x00	; 0
    4be2:	0e 94 09 08 	call	0x1012	; 0x1012 <PWM_CTC_VALUE>
	}



}
    4be6:	62 96       	adiw	r28, 0x12	; 18
    4be8:	0f b6       	in	r0, 0x3f	; 63
    4bea:	f8 94       	cli
    4bec:	de bf       	out	0x3e, r29	; 62
    4bee:	0f be       	out	0x3f, r0	; 63
    4bf0:	cd bf       	out	0x3d, r28	; 61
    4bf2:	cf 91       	pop	r28
    4bf4:	df 91       	pop	r29
    4bf6:	08 95       	ret

00004bf8 <keypadinit>:

void keypadinit(void)
{
    4bf8:	df 93       	push	r29
    4bfa:	cf 93       	push	r28
    4bfc:	cd b7       	in	r28, 0x3d	; 61
    4bfe:	de b7       	in	r29, 0x3e	; 62
	// columns pin direction as output
	DIO_SetPinDirection(KPD_PORT, KPD_COLUMN0_PIN, DIO_OUTPUT);
    4c00:	82 e0       	ldi	r24, 0x02	; 2
    4c02:	60 e0       	ldi	r22, 0x00	; 0
    4c04:	41 e0       	ldi	r20, 0x01	; 1
    4c06:	0e 94 46 0a 	call	0x148c	; 0x148c <DIO_SetPinDirection>
	DIO_SetPinDirection(KPD_PORT, KPD_COLUMN1_PIN, DIO_OUTPUT);
    4c0a:	82 e0       	ldi	r24, 0x02	; 2
    4c0c:	61 e0       	ldi	r22, 0x01	; 1
    4c0e:	41 e0       	ldi	r20, 0x01	; 1
    4c10:	0e 94 46 0a 	call	0x148c	; 0x148c <DIO_SetPinDirection>
	DIO_SetPinDirection(KPD_PORT, KPD_COLUMN2_PIN, DIO_OUTPUT);
    4c14:	82 e0       	ldi	r24, 0x02	; 2
    4c16:	62 e0       	ldi	r22, 0x02	; 2
    4c18:	41 e0       	ldi	r20, 0x01	; 1
    4c1a:	0e 94 46 0a 	call	0x148c	; 0x148c <DIO_SetPinDirection>
	DIO_SetPinDirection(KPD_PORT, KPD_COLUMN3_PIN, DIO_OUTPUT);
    4c1e:	82 e0       	ldi	r24, 0x02	; 2
    4c20:	63 e0       	ldi	r22, 0x03	; 3
    4c22:	41 e0       	ldi	r20, 0x01	; 1
    4c24:	0e 94 46 0a 	call	0x148c	; 0x148c <DIO_SetPinDirection>

	// rows pins direction as input
	DIO_SetPinDirection(KPD_PORT, KPD_ROW1_PIN, DIO_INPUT );
    4c28:	82 e0       	ldi	r24, 0x02	; 2
    4c2a:	65 e0       	ldi	r22, 0x05	; 5
    4c2c:	40 e0       	ldi	r20, 0x00	; 0
    4c2e:	0e 94 46 0a 	call	0x148c	; 0x148c <DIO_SetPinDirection>
	DIO_SetPinDirection(KPD_PORT, KPD_ROW1_PIN, DIO_INPUT );
    4c32:	82 e0       	ldi	r24, 0x02	; 2
    4c34:	65 e0       	ldi	r22, 0x05	; 5
    4c36:	40 e0       	ldi	r20, 0x00	; 0
    4c38:	0e 94 46 0a 	call	0x148c	; 0x148c <DIO_SetPinDirection>
	DIO_SetPinDirection(KPD_PORT, KPD_ROW2_PIN, DIO_INPUT );
    4c3c:	82 e0       	ldi	r24, 0x02	; 2
    4c3e:	66 e0       	ldi	r22, 0x06	; 6
    4c40:	40 e0       	ldi	r20, 0x00	; 0
    4c42:	0e 94 46 0a 	call	0x148c	; 0x148c <DIO_SetPinDirection>
	DIO_SetPinDirection(KPD_PORT, KPD_ROW3_PIN, DIO_INPUT );
    4c46:	82 e0       	ldi	r24, 0x02	; 2
    4c48:	67 e0       	ldi	r22, 0x07	; 7
    4c4a:	40 e0       	ldi	r20, 0x00	; 0
    4c4c:	0e 94 46 0a 	call	0x148c	; 0x148c <DIO_SetPinDirection>
	// setting all high
	DIO_SetPortValue(KPD_PORT,0xff);
    4c50:	82 e0       	ldi	r24, 0x02	; 2
    4c52:	6f ef       	ldi	r22, 0xFF	; 255
    4c54:	0e 94 ed 0c 	call	0x19da	; 0x19da <DIO_SetPortValue>

	//rooms
	DIO_SetPinDirection(PORTB, DIO_PIN4, DIO_OUTPUT);
    4c58:	81 e0       	ldi	r24, 0x01	; 1
    4c5a:	64 e0       	ldi	r22, 0x04	; 4
    4c5c:	41 e0       	ldi	r20, 0x01	; 1
    4c5e:	0e 94 46 0a 	call	0x148c	; 0x148c <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTB, DIO_PIN5, DIO_OUTPUT);
    4c62:	81 e0       	ldi	r24, 0x01	; 1
    4c64:	65 e0       	ldi	r22, 0x05	; 5
    4c66:	41 e0       	ldi	r20, 0x01	; 1
    4c68:	0e 94 46 0a 	call	0x148c	; 0x148c <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTB, DIO_PIN6, DIO_OUTPUT);
    4c6c:	81 e0       	ldi	r24, 0x01	; 1
    4c6e:	66 e0       	ldi	r22, 0x06	; 6
    4c70:	41 e0       	ldi	r20, 0x01	; 1
    4c72:	0e 94 46 0a 	call	0x148c	; 0x148c <DIO_SetPinDirection>
	LCD_Init();
    4c76:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <LCD_Init>
	DIO_SetPinDirection(PORTA,1,DIO_OUTPUT);
    4c7a:	80 e0       	ldi	r24, 0x00	; 0
    4c7c:	61 e0       	ldi	r22, 0x01	; 1
    4c7e:	41 e0       	ldi	r20, 0x01	; 1
    4c80:	0e 94 46 0a 	call	0x148c	; 0x148c <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTD,2,DIO_INPUT);
    4c84:	83 e0       	ldi	r24, 0x03	; 3
    4c86:	62 e0       	ldi	r22, 0x02	; 2
    4c88:	40 e0       	ldi	r20, 0x00	; 0
    4c8a:	0e 94 46 0a 	call	0x148c	; 0x148c <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTA,2,DIO_OUTPUT);
    4c8e:	80 e0       	ldi	r24, 0x00	; 0
    4c90:	62 e0       	ldi	r22, 0x02	; 2
    4c92:	41 e0       	ldi	r20, 0x01	; 1
    4c94:	0e 94 46 0a 	call	0x148c	; 0x148c <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTD,3,DIO_INPUT);
    4c98:	83 e0       	ldi	r24, 0x03	; 3
    4c9a:	63 e0       	ldi	r22, 0x03	; 3
    4c9c:	40 e0       	ldi	r20, 0x00	; 0
    4c9e:	0e 94 46 0a 	call	0x148c	; 0x148c <DIO_SetPinDirection>
	GI_Enable();
    4ca2:	0e 94 17 08 	call	0x102e	; 0x102e <GI_Enable>
	SetCallBack(&ldrCheck,EXT_INT0);
    4ca6:	81 ed       	ldi	r24, 0xD1	; 209
    4ca8:	94 e2       	ldi	r25, 0x24	; 36
    4caa:	60 e0       	ldi	r22, 0x00	; 0
    4cac:	0e 94 85 09 	call	0x130a	; 0x130a <SetCallBack>
	SetCallBack(&ControlFan,EXT_INT1);
    4cb0:	82 e2       	ldi	r24, 0x22	; 34
    4cb2:	95 e2       	ldi	r25, 0x25	; 37
    4cb4:	61 e0       	ldi	r22, 0x01	; 1
    4cb6:	0e 94 85 09 	call	0x130a	; 0x130a <SetCallBack>
	ExtEnable(EXT_INT0,EXT_ANY_LOGICAL);
    4cba:	80 e0       	ldi	r24, 0x00	; 0
    4cbc:	62 e0       	ldi	r22, 0x02	; 2
    4cbe:	0e 94 33 08 	call	0x1066	; 0x1066 <ExtEnable>
	ExtEnable(EXT_INT1,EXT_ANY_LOGICAL);
    4cc2:	81 e0       	ldi	r24, 0x01	; 1
    4cc4:	62 e0       	ldi	r22, 0x02	; 2
    4cc6:	0e 94 33 08 	call	0x1066	; 0x1066 <ExtEnable>

}
    4cca:	cf 91       	pop	r28
    4ccc:	df 91       	pop	r29
    4cce:	08 95       	ret

00004cd0 <main>:
#include "../HAL/KEYPAD/KPD_config.h"
#include "../MCAL/ADC/ADC_INTERFACE.h"
#include "avr/delay.h"

int main ()
{
    4cd0:	df 93       	push	r29
    4cd2:	cf 93       	push	r28
    4cd4:	0f 92       	push	r0
    4cd6:	cd b7       	in	r28, 0x3d	; 61
    4cd8:	de b7       	in	r29, 0x3e	; 62

	keypadinit();
    4cda:	0e 94 fc 25 	call	0x4bf8	; 0x4bf8 <keypadinit>
	u8 flag =0 ;
    4cde:	19 82       	std	Y+1, r1	; 0x01
    4ce0:	03 c0       	rjmp	.+6      	; 0x4ce8 <main+0x18>
	while (flag ==0 )
	{
		flag = Login();
    4ce2:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <Login>
    4ce6:	89 83       	std	Y+1, r24	; 0x01
int main ()
{

	keypadinit();
	u8 flag =0 ;
	while (flag ==0 )
    4ce8:	89 81       	ldd	r24, Y+1	; 0x01
    4cea:	88 23       	and	r24, r24
    4cec:	d1 f3       	breq	.-12     	; 0x4ce2 <main+0x12>
	{
		flag = Login();

	}

	return 0;
    4cee:	80 e0       	ldi	r24, 0x00	; 0
    4cf0:	90 e0       	ldi	r25, 0x00	; 0
}
    4cf2:	0f 90       	pop	r0
    4cf4:	cf 91       	pop	r28
    4cf6:	df 91       	pop	r29
    4cf8:	08 95       	ret

00004cfa <__mulsi3>:
    4cfa:	62 9f       	mul	r22, r18
    4cfc:	d0 01       	movw	r26, r0
    4cfe:	73 9f       	mul	r23, r19
    4d00:	f0 01       	movw	r30, r0
    4d02:	82 9f       	mul	r24, r18
    4d04:	e0 0d       	add	r30, r0
    4d06:	f1 1d       	adc	r31, r1
    4d08:	64 9f       	mul	r22, r20
    4d0a:	e0 0d       	add	r30, r0
    4d0c:	f1 1d       	adc	r31, r1
    4d0e:	92 9f       	mul	r25, r18
    4d10:	f0 0d       	add	r31, r0
    4d12:	83 9f       	mul	r24, r19
    4d14:	f0 0d       	add	r31, r0
    4d16:	74 9f       	mul	r23, r20
    4d18:	f0 0d       	add	r31, r0
    4d1a:	65 9f       	mul	r22, r21
    4d1c:	f0 0d       	add	r31, r0
    4d1e:	99 27       	eor	r25, r25
    4d20:	72 9f       	mul	r23, r18
    4d22:	b0 0d       	add	r27, r0
    4d24:	e1 1d       	adc	r30, r1
    4d26:	f9 1f       	adc	r31, r25
    4d28:	63 9f       	mul	r22, r19
    4d2a:	b0 0d       	add	r27, r0
    4d2c:	e1 1d       	adc	r30, r1
    4d2e:	f9 1f       	adc	r31, r25
    4d30:	bd 01       	movw	r22, r26
    4d32:	cf 01       	movw	r24, r30
    4d34:	11 24       	eor	r1, r1
    4d36:	08 95       	ret

00004d38 <__udivmodhi4>:
    4d38:	aa 1b       	sub	r26, r26
    4d3a:	bb 1b       	sub	r27, r27
    4d3c:	51 e1       	ldi	r21, 0x11	; 17
    4d3e:	07 c0       	rjmp	.+14     	; 0x4d4e <__udivmodhi4_ep>

00004d40 <__udivmodhi4_loop>:
    4d40:	aa 1f       	adc	r26, r26
    4d42:	bb 1f       	adc	r27, r27
    4d44:	a6 17       	cp	r26, r22
    4d46:	b7 07       	cpc	r27, r23
    4d48:	10 f0       	brcs	.+4      	; 0x4d4e <__udivmodhi4_ep>
    4d4a:	a6 1b       	sub	r26, r22
    4d4c:	b7 0b       	sbc	r27, r23

00004d4e <__udivmodhi4_ep>:
    4d4e:	88 1f       	adc	r24, r24
    4d50:	99 1f       	adc	r25, r25
    4d52:	5a 95       	dec	r21
    4d54:	a9 f7       	brne	.-22     	; 0x4d40 <__udivmodhi4_loop>
    4d56:	80 95       	com	r24
    4d58:	90 95       	com	r25
    4d5a:	bc 01       	movw	r22, r24
    4d5c:	cd 01       	movw	r24, r26
    4d5e:	08 95       	ret

00004d60 <__divmodsi4>:
    4d60:	97 fb       	bst	r25, 7
    4d62:	09 2e       	mov	r0, r25
    4d64:	05 26       	eor	r0, r21
    4d66:	0e d0       	rcall	.+28     	; 0x4d84 <__divmodsi4_neg1>
    4d68:	57 fd       	sbrc	r21, 7
    4d6a:	04 d0       	rcall	.+8      	; 0x4d74 <__divmodsi4_neg2>
    4d6c:	14 d0       	rcall	.+40     	; 0x4d96 <__udivmodsi4>
    4d6e:	0a d0       	rcall	.+20     	; 0x4d84 <__divmodsi4_neg1>
    4d70:	00 1c       	adc	r0, r0
    4d72:	38 f4       	brcc	.+14     	; 0x4d82 <__divmodsi4_exit>

00004d74 <__divmodsi4_neg2>:
    4d74:	50 95       	com	r21
    4d76:	40 95       	com	r20
    4d78:	30 95       	com	r19
    4d7a:	21 95       	neg	r18
    4d7c:	3f 4f       	sbci	r19, 0xFF	; 255
    4d7e:	4f 4f       	sbci	r20, 0xFF	; 255
    4d80:	5f 4f       	sbci	r21, 0xFF	; 255

00004d82 <__divmodsi4_exit>:
    4d82:	08 95       	ret

00004d84 <__divmodsi4_neg1>:
    4d84:	f6 f7       	brtc	.-4      	; 0x4d82 <__divmodsi4_exit>
    4d86:	90 95       	com	r25
    4d88:	80 95       	com	r24
    4d8a:	70 95       	com	r23
    4d8c:	61 95       	neg	r22
    4d8e:	7f 4f       	sbci	r23, 0xFF	; 255
    4d90:	8f 4f       	sbci	r24, 0xFF	; 255
    4d92:	9f 4f       	sbci	r25, 0xFF	; 255
    4d94:	08 95       	ret

00004d96 <__udivmodsi4>:
    4d96:	a1 e2       	ldi	r26, 0x21	; 33
    4d98:	1a 2e       	mov	r1, r26
    4d9a:	aa 1b       	sub	r26, r26
    4d9c:	bb 1b       	sub	r27, r27
    4d9e:	fd 01       	movw	r30, r26
    4da0:	0d c0       	rjmp	.+26     	; 0x4dbc <__udivmodsi4_ep>

00004da2 <__udivmodsi4_loop>:
    4da2:	aa 1f       	adc	r26, r26
    4da4:	bb 1f       	adc	r27, r27
    4da6:	ee 1f       	adc	r30, r30
    4da8:	ff 1f       	adc	r31, r31
    4daa:	a2 17       	cp	r26, r18
    4dac:	b3 07       	cpc	r27, r19
    4dae:	e4 07       	cpc	r30, r20
    4db0:	f5 07       	cpc	r31, r21
    4db2:	20 f0       	brcs	.+8      	; 0x4dbc <__udivmodsi4_ep>
    4db4:	a2 1b       	sub	r26, r18
    4db6:	b3 0b       	sbc	r27, r19
    4db8:	e4 0b       	sbc	r30, r20
    4dba:	f5 0b       	sbc	r31, r21

00004dbc <__udivmodsi4_ep>:
    4dbc:	66 1f       	adc	r22, r22
    4dbe:	77 1f       	adc	r23, r23
    4dc0:	88 1f       	adc	r24, r24
    4dc2:	99 1f       	adc	r25, r25
    4dc4:	1a 94       	dec	r1
    4dc6:	69 f7       	brne	.-38     	; 0x4da2 <__udivmodsi4_loop>
    4dc8:	60 95       	com	r22
    4dca:	70 95       	com	r23
    4dcc:	80 95       	com	r24
    4dce:	90 95       	com	r25
    4dd0:	9b 01       	movw	r18, r22
    4dd2:	ac 01       	movw	r20, r24
    4dd4:	bd 01       	movw	r22, r26
    4dd6:	cf 01       	movw	r24, r30
    4dd8:	08 95       	ret

00004dda <__prologue_saves__>:
    4dda:	2f 92       	push	r2
    4ddc:	3f 92       	push	r3
    4dde:	4f 92       	push	r4
    4de0:	5f 92       	push	r5
    4de2:	6f 92       	push	r6
    4de4:	7f 92       	push	r7
    4de6:	8f 92       	push	r8
    4de8:	9f 92       	push	r9
    4dea:	af 92       	push	r10
    4dec:	bf 92       	push	r11
    4dee:	cf 92       	push	r12
    4df0:	df 92       	push	r13
    4df2:	ef 92       	push	r14
    4df4:	ff 92       	push	r15
    4df6:	0f 93       	push	r16
    4df8:	1f 93       	push	r17
    4dfa:	cf 93       	push	r28
    4dfc:	df 93       	push	r29
    4dfe:	cd b7       	in	r28, 0x3d	; 61
    4e00:	de b7       	in	r29, 0x3e	; 62
    4e02:	ca 1b       	sub	r28, r26
    4e04:	db 0b       	sbc	r29, r27
    4e06:	0f b6       	in	r0, 0x3f	; 63
    4e08:	f8 94       	cli
    4e0a:	de bf       	out	0x3e, r29	; 62
    4e0c:	0f be       	out	0x3f, r0	; 63
    4e0e:	cd bf       	out	0x3d, r28	; 61
    4e10:	09 94       	ijmp

00004e12 <__epilogue_restores__>:
    4e12:	2a 88       	ldd	r2, Y+18	; 0x12
    4e14:	39 88       	ldd	r3, Y+17	; 0x11
    4e16:	48 88       	ldd	r4, Y+16	; 0x10
    4e18:	5f 84       	ldd	r5, Y+15	; 0x0f
    4e1a:	6e 84       	ldd	r6, Y+14	; 0x0e
    4e1c:	7d 84       	ldd	r7, Y+13	; 0x0d
    4e1e:	8c 84       	ldd	r8, Y+12	; 0x0c
    4e20:	9b 84       	ldd	r9, Y+11	; 0x0b
    4e22:	aa 84       	ldd	r10, Y+10	; 0x0a
    4e24:	b9 84       	ldd	r11, Y+9	; 0x09
    4e26:	c8 84       	ldd	r12, Y+8	; 0x08
    4e28:	df 80       	ldd	r13, Y+7	; 0x07
    4e2a:	ee 80       	ldd	r14, Y+6	; 0x06
    4e2c:	fd 80       	ldd	r15, Y+5	; 0x05
    4e2e:	0c 81       	ldd	r16, Y+4	; 0x04
    4e30:	1b 81       	ldd	r17, Y+3	; 0x03
    4e32:	aa 81       	ldd	r26, Y+2	; 0x02
    4e34:	b9 81       	ldd	r27, Y+1	; 0x01
    4e36:	ce 0f       	add	r28, r30
    4e38:	d1 1d       	adc	r29, r1
    4e3a:	0f b6       	in	r0, 0x3f	; 63
    4e3c:	f8 94       	cli
    4e3e:	de bf       	out	0x3e, r29	; 62
    4e40:	0f be       	out	0x3f, r0	; 63
    4e42:	cd bf       	out	0x3d, r28	; 61
    4e44:	ed 01       	movw	r28, r26
    4e46:	08 95       	ret

00004e48 <_exit>:
    4e48:	f8 94       	cli

00004e4a <__stop_program>:
    4e4a:	ff cf       	rjmp	.-2      	; 0x4e4a <__stop_program>
